#!/usr/bin/env python3

import os, sys, argparse, logging

from standard_script_setup import *
from CIME import utils
from CIME.utils import expect, run_bld_cmd_ensure_logging, run_cmd_no_fail, run_cmd
from CIME.case import Case
from CIME.build import get_standard_makefile_args

logger = logging.getLogger(__name__)


def parse_command_line(args, description):
    ###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [--debug]
OR
{0} --verbose
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > {0}
""".format(
            os.path.basename(args[0])
        ),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    utils.setup_standard_logging_options(parser)

    parser.add_argument("buildroot", help="build path root")

    parser.add_argument("installpath", help="install path ")

    parser.add_argument(
        "caseroot", nargs="?", default=os.getcwd(), help="Case directory to build"
    )

    args = utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.buildroot, args.installpath, args.caseroot


###############################################################################
def buildlib(bldroot, installpath, case):
    ###############################################################################
    srcroot = case.get_value("SRCROOT")
    kokkos_dir = os.path.join(srcroot, "externals", "kokkos")
    expect(os.path.isdir(kokkos_dir), "Missing kokkos submodule")

    # We want to get the compiler and kokkos_options from Macros.make
    # (generated from cmake_macros), but we want to otherwise
    # let kokkos control flags
    make_args = get_standard_makefile_args(case, shared_lib=True)
    try:
        output = run_cmd_no_fail("make -f Macros.make {} -p | grep KOKKOS_OPTIONS".format(make_args))
    except CIMEError:
        expect(False, "No KOKKOS_OPTIONS set in your cmake_macros for this machine/compiler.")

    kokkos_options = output.split(":=")[-1].strip()

    # We will take care of setting CMAKE_CXX_COMPILER unless user has explictly
    # set one in their KOKKOS_OPTIONS.
    cxx = ""
    if "DCMAKE_CXX_COMPILER" not in kokkos_options:
        if "Kokkos_ENABLE_CUDA" in kokkos_options:
            cxx = os.path.join(kokkos_dir, "bin/nvcc_wrapper")
        else:
            cxx = (
                run_cmd_no_fail("make -f Macros.make {} -p | grep SCXX".format(make_args))
                .split(":=")[-1]
                .strip()
            )
        cxx = "-DCMAKE_CXX_COMPILER={}".format(cxx)

    gmake_cmd = case.get_value("GMAKE")
    gmake_j = case.get_value("GMAKE_J")

    gen_makefile_cmd = "cmake {kokkos_options} {cxx} -DCMAKE_INSTALL_PREFIX={installpath} {kokkos_dir}".format(
        kokkos_dir=kokkos_dir,
        kokkos_options=kokkos_options,
        cxx=cxx,
        installpath=installpath,
    )

    run_bld_cmd_ensure_logging(gen_makefile_cmd, logger, from_dir=bldroot)
    run_bld_cmd_ensure_logging(
        "{} VERBOSE=1 -j {}".format(gmake_cmd, gmake_j), logger, from_dir=bldroot
    )
    run_bld_cmd_ensure_logging("{} install".format(gmake_cmd), logger, from_dir=bldroot)


def _main(argv, documentation):
    bldroot, installpath, caseroot = parse_command_line(argv, documentation)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, installpath, case)


if __name__ == "__main__":
    _main(sys.argv, __doc__)
