#!/usr/bin/env python3
from standard_script_setup import *
from CIME.utils import run_bld_cmd_ensure_logging
from CIME.case import Case
from CIME.build import get_standard_cmake_args

logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [--debug]
OR
{0} --verbose
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > {0}
""" .format (os.path.basename(args[0])),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("buildroot",
                        help="build path root")

    parser.add_argument("installpath",
                        help="install path ")

    parser.add_argument("caseroot", nargs="?", default=os.getcwd(),
                        help="Case directory to build")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.buildroot, args.installpath, args.caseroot

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################
    srcroot   = case.get_value("SRCROOT")
    gmake_cmd = case.get_value("GMAKE")
    gmake_j   = case.get_value("GMAKE_J")

    gptl_dir = os.environ.get("GPTL_ROOT")
    if gptl_dir is not None:
        # We are using a pre-installed gptl
        expect(os.path.exists(gptl_dir), f"Non-existent gptl root {gptl_dir}")
        return

    libdir = os.path.join(bldroot, "gptl")
    if not os.path.isdir(libdir):
        os.makedirs(libdir)

    gptl_dir = os.path.join(srcroot, "share", "timing")
    cmake_cmd = "cmake {stdargs} -DCOMP_NAME=gptl -DGPTL_DIR={gptl} -DCMAKE_INSTALL_PREFIX={install} {gptl}".format(
        gptl=gptl_dir, install=installpath, stdargs=get_standard_cmake_args(case, installpath))

    logger.info(f"Running in dir {libdir}")
    run_bld_cmd_ensure_logging(cmake_cmd, logger, from_dir=libdir)
    run_bld_cmd_ensure_logging(f"{gmake_cmd} -j {gmake_j}", logger, from_dir=libdir)
    run_bld_cmd_ensure_logging(f"{gmake_cmd} install", logger, from_dir=libdir)

###############################################################################
def _main(argv, documentation):
###############################################################################
    bldroot, installpath, caseroot = parse_command_line(argv, documentation)
    with Case(caseroot) as case:
        buildlib(bldroot, installpath, case)

###############################################################################
if (__name__ == "__main__"):
    _main(sys.argv, __doc__)
