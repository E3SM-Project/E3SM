#!/usr/bin/env python3
import sys, os, logging, argparse

cimeroot = os.getenv("CIMEROOT")
sys.path.append(os.path.join(cimeroot, "CIME", "Tools"))

import glob, re, shutil
from standard_script_setup import *
from CIME import utils
from CIME.utils import expect, run_bld_cmd_ensure_logging, safe_copy
from CIME.build import get_standard_makefile_args
from CIME.case import Case

sys.path.append(os.path.dirname(__file__))
from buildlib_util import extract_from_macros

logger = logging.getLogger(__name__)

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [--debug]
OR
{0} --verbose
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > {0}
""".format(
            os.path.basename(args[0])
        ),
        description=description,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    utils.setup_standard_logging_options(parser)

    parser.add_argument("buildroot", help="build path root")

    parser.add_argument("installpath", help="install path ")

    parser.add_argument(
        "caseroot", nargs="?", default=os.getcwd(), help="Case directory to build"
    )

    args = utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.buildroot, args.installpath, args.caseroot


###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################
    caseroot    = case.get_value("CASEROOT")
    exeroot     = case.get_value("EXEROOT")
    pio_version = case.get_value("PIO_VERSION")
    srcroot     = case.get_value("SRCROOT")
    debug       = case.get_value("DEBUG")
    mpilib      = case.get_value("MPILIB")
    gmake       = case.get_value("GMAKE")
    gmake_j     = case.get_value("GMAKE_J")

    scorpio_src_root_dir = os.path.join(srcroot, "externals")
    # Scorpio classic is derived from PIO1
    scorpio_classic_dir = "scorpio_classic"
    # Scorpio is derived from PIO2
    scorpio_dir = "scorpio"
    scorpio_classic_src_dir = os.path.join(scorpio_src_root_dir, scorpio_classic_dir)
    scorpio_new_src_dir = os.path.join(scorpio_src_root_dir, scorpio_dir)
    scorpio_src_dir = scorpio_classic_src_dir if pio_version == 1 else scorpio_new_src_dir
    expect(os.path.isdir(scorpio_src_dir), "Missing scorpio dir " + scorpio_src_dir)

    # find_package(ADIOS2) appears to work better with ADIOS2_DIR than
    # ADIOS2_ROOT. This is a workaround
    if "ADIOS2_ROOT" in os.environ:
        os.environ["ADIOS2_DIR"] = os.environ["ADIOS2_ROOT"]

    # If variable PIO_VERSION_MAJOR is defined in the environment then
    # we assume that PIO is installed on the system
    # and expect to find
    # PIO_LIBDIR, PIO_INCDIR, PIO_TYPENAME_VALID_VALUES
    # also defined in the environment.  In this case we
    # will use the installed pio and not build it here.
    installed_pio_version = os.environ.get("PIO_VERSION_MAJOR")
    logger.info(f"pio_version_major = {installed_pio_version} pio_version = {pio_version}")
    if installed_pio_version is not None and int(installed_pio_version) == pio_version:
        logger.info("Using installed PIO library")
        _set_pio_valid_values(case, os.environ.get("PIO_TYPENAME_VALID_VALUES"))
        return

    pio_model = "pio{}".format(pio_version)
    pio_bld_dir = os.path.join(bldroot, pio_model)
    if not os.path.isdir(pio_bld_dir):
        os.makedirs(pio_bld_dir)

    # Compute cmake args
    # Use old genf90 until "short" type is supported
    cmake_opts = "-Wno-dev "
    if pio_version == 1:
        cmake_opts += f"-DGENF90_PATH={scorpio_src_dir}/pio/bin "
    else:
        cmake_opts += f"-DGENF90_PATH={scorpio_src_dir}/src/genf90 "

    if "ADIOS2_ROOT" in os.environ:
        cmake_opts += "-DWITH_ADIOS2:BOOL=ON "
        if "FROM_CREATE_TEST" in os.environ and os.environ["FROM_CREATE_TEST"] == "True":
            cmake_opts += "-DADIOS_BP2NC_TEST:BOOL=ON "

    if debug:
        cmake_opts += "-DPIO_ENABLE_LOGGING=ON "
    # Case changes for NetCDF/NETCDF forces us to do this. For other packages
    # what's already in the env should work
    if "NETCDF_PATH" in os.environ:
        cmake_opts += f"-DNetCDF_PATH:PATH={os.environ['NETCDF_PATH']} "
    if "NETCDF_C_PATH" in os.environ:
        cmake_opts += f"-DNetCDF_C_PATH:PATH={os.environ['NETCDF_C_PATH']} "
    if "NETCDF_FORTRAN_PATH" in os.environ:
        cmake_opts += f"-DNetCDF_Fortran_PATH:PATH={os.environ['NETCDF_FORTRAN_PATH']} "

    if "PNETCDF_PATH" in os.environ and mpilib != "mpi-serial":
        cmake_opts += f"-DPnetCDF_PATH:PATH={os.environ['PNETCDF_PATH']} "
    else:
        cmake_opts += "-DWITH_PNETCDF:LOGICAL=FALSE -DPIO_USE_MPIIO:LOGICAL=FALSE "

    # scorpio needs a little help finding hdf5. The FindHDF5 in scopio uses the
    # env var "HDF5" instead of "HDF5_ROOT". If HDF5_ROOT is not set, but we have
    # h5dump in our path, we can use that info to set up HDF5. For now, we will
    # assume only HDF5_ROOT is what matters.
    which_h5dump = shutil.which('h5dump')
    if "HDF5_ROOT" in os.environ:
        os.environ["HDF5"] = os.environ["HDF5_ROOT"]
    # elif which_h5dump is not None:
    #     os.environ["HDF5"] = os.path.dirname(os.path.dirname(which_h5dump))

    # Before E3SM upgrades scorpio submodule to 1.5.0 or higher, keep WITH_HDF5
    # CMake option OFF by default.
    # if "HDF5_ROOT" in os.environ:
    #    cmake_opts += "-DWITH_HDF5:BOOL=ON "

    # Same deal with libz and szip
    if "ZLIB_ROOT" in os.environ:
        os.environ["LIBZ"] = os.environ["ZLIB_ROOT"] # LIBZ/ZLIB
    if "SZIP_ROOT" in os.environ:
        os.environ["SZIP"] = os.environ["SZIP_ROOT"]

    if mpilib == "mpi-serial":
        cmake_opts += f"-DPIO_USE_MPISERIAL=TRUE -DMPISERIAL_PATH={installpath} "

    cmake_opts += "-DCMAKE_VERBOSE_MAKEFILE:BOOL=ON "
    cmake_opts += f"-DGPTL_PATH:STRING={installpath} "
    cmake_opts += "-DPIO_ENABLE_TESTS:BOOL=OFF -DPIO_USE_MALLOC:BOOL=ON "
    cmake_opts += f"-DUSER_CMAKE_MODULE_PATH:LIST={cimeroot}/CIME/non_py/src/CMake "

    # Scorpio cmake system is not 100% compatible with the e3sm macros, so we have
    # to pull out the items we need from the macros
    sfc, scc, scxx, mfc, mcc, mcxx, fflags, cflags, cxxflags, cppdefs, ldflags, spio_cmake_opts, pio_hints = \
        extract_from_macros(case, "spio", extra_vars=("SPIO_CMAKE_OPTS", "PIO_FILESYSTEM_HINTS"))

    cppdefs += " -DTIMING"

    # Setting GPTL_PATH is currently insufficient scorpio to find gptl headers?
    incl_flag = f" -I{installpath}/include"

    if mpilib == "mpi-serial":
        fc  = sfc
        cc  = scc
        cxx = scxx
    else:
        fc  = mfc
        cc  = mcc
        cxx = mcxx

    cmake_opts += f"-DCMAKE_Fortran_FLAGS:STRING='{fflags} {incl_flag} {cppdefs}' "
    cmake_opts += f"-DCMAKE_C_FLAGS:STRING='{cflags} {incl_flag} {cppdefs}' "
    cmake_opts += f"-DCMAKE_CXX_FLAGS:STRING='{cxxflags} {incl_flag} {cppdefs}' "
    if spio_cmake_opts:
        cmake_opts += spio_cmake_opts + " "

    if pio_hints:
        cmake_opts += f"-DPIO_FILESYSTEM_HINTS:STRING='$(PIO_FILESYSTEM_HINTS)' "

    # This runs the pio cmake command from the cime case Makefile
    logger.info("Configuring SCORPIO")
    cmd = f"FC={fc} CC={cc} CXX={cxx} LDFLAGS='{ldflags}' cmake {cmake_opts} {scorpio_src_dir}"
    run_bld_cmd_ensure_logging(cmd, logger, from_dir=pio_bld_dir)

    # This runs the pio make command from the cmake generated Makefile
    logger.info("Building SCORPIO")
    run_bld_cmd_ensure_logging(f"{gmake} -j {gmake_j}", logger, from_dir=pio_bld_dir)

    if pio_version == 1:
        expect_string = "D_NETCDF;"
        pnetcdf_string = "D_PNETCDF"
        netcdf4_string = "D_NETCDF4"
    else:
        expect_string = "NetCDF_C_LIBRARY-ADVANCED"
        # pnetcdf_string = "PnetCDF_C_LIBRARY-ADVANCED"
        pnetcdf_string = "WITH_PNETCDF:BOOL=ON"
        netcdf4_string = "NetCDF_C_HAS_PARALLEL:BOOL=TRUE"

    adios_string = "WITH_ADIOS2:BOOL=ON"
    hdf5_string = "WITH_HDF5:BOOL=ON"
    expect_string_found = False
    pnetcdf_found = False
    netcdf4_parallel_found = False
    adios_found = False
    hdf5_found = False

    cache_file = open(os.path.join(pio_bld_dir,"CMakeCache.txt"), "r")
    for line in cache_file:
        if re.search(expect_string, line):
            expect_string_found = True
        if re.search(pnetcdf_string, line):
            pnetcdf_found = True
        if re.search(netcdf4_string, line):
            netcdf4_parallel_found = True
        if re.search(adios_string, line):
            adios_found = True
        if re.search(hdf5_string, line):
            hdf5_found = True

    if pio_version == 1:
        installed_lib = os.path.join(installpath, "lib", "libpio.a")
        installed_lib_time = 0
        if os.path.isfile(installed_lib):
            installed_lib_time = os.path.getmtime(installed_lib)
        newlib = os.path.join(pio_bld_dir, "pio", "libpio.a")
        newlib_time = os.path.getmtime(newlib)
        if newlib_time > installed_lib_time:
            logger.info("Installing pio version 1")
            safe_copy(newlib, installed_lib)
            for glob_to_copy in ("*.h", "*.mod"):
                for item in glob.glob(os.path.join(pio_bld_dir, "pio", glob_to_copy)):
                    safe_copy(item, "{}/include".format(installpath))
    else:
        globs_to_copy = [
            os.path.join("src", "clib", "libpioc.*"),
            os.path.join("src", "flib", "libpiof.*"),
            os.path.join("src", "flib_legacy", "libpiof.*"),
            os.path.join("src", "clib", "*.h"),
            os.path.join("src", "flib", "*.mod"),
            os.path.join("src", "flib_legacy", "*.mod"),
        ]
        # ADIOS requires an ADIOS to NetCDF conversion library/exe
        if adios_found:
            globs_to_copy.append(os.path.join("tools","adios2pio-nm","libadios2pio-nm-lib.*"))
            globs_to_copy.append(os.path.join("tools","adios2pio-nm","adios2pio-nm.exe"))
        for glob_to_copy in globs_to_copy:
            installed_file_time = 0
            for item in glob.glob(os.path.join(pio_bld_dir, glob_to_copy)):
                if item.endswith(".a") or item.endswith(".so"):
                    installdir = "lib"
                else:
                    installdir = "include"
                if item.endswith(".exe"):
                    # FIXME: Move executables into a bin/util dir
                    # Currently we are moving the SCORPIO util exes to the same
                    # dir as e3sm.exe (the EXEROOT) - ignoring installpath
                    installed_file = os.path.join(exeroot,os.path.basename(item))
                else:
                    installed_file = os.path.join(installpath,installdir,os.path.basename(item))
                item_time = os.path.getmtime(item)
                if os.path.isfile(installed_file):
                    installed_file_time = os.path.getmtime(installed_file)
                if item_time > installed_file_time:
                    safe_copy(item, installed_file)

    # make sure case pio_typename valid_values is set correctly
    expect(expect_string_found, "CIME models require NETCDF in PIO build")
    valid_values = "netcdf"
    if pnetcdf_found:
        valid_values += ",pnetcdf"
    if netcdf4_parallel_found:
        valid_values += ",netcdf4p,netcdf4c"
    if adios_found:
        valid_values += ",adios"
    if hdf5_found:
        valid_values += ",hdf5"

    _set_pio_valid_values(case, valid_values)


def _set_pio_valid_values(case, valid_values):
    # nothing means use the general default
    valid_values += ",nothing"
    logger.warning("Updating valid_values for PIO_TYPENAME: {}".format(valid_values))
    env_run = case.get_env("run")
    env_run.set_valid_values("PIO_TYPENAME", valid_values)

    for comp in case.get_values("COMP_CLASSES"):
        comp_pio_typename = "{}_PIO_TYPENAME".format(comp)
        current_value = case.get_value(comp_pio_typename)
        if current_value not in valid_values:
            logger.warning(
                "Resetting PIO_TYPENAME=netcdf for component {}".format(comp)
            )
            env_run.set_value(comp_pio_typename, "netcdf")


def _main(argv, documentation):
    bldroot, installpath, caseroot = parse_command_line(argv, documentation)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, installpath, case)


if __name__ == "__main__":
    _main(sys.argv, __doc__)
