module test_update_landunit_weights

  ! Tests of the update_landunit_weights routine in the dynLandunitArea module

  use pfunit_mod
  use unittestSubgridMod
  use dynLandunitAreaMod
  use shr_kind_mod	, only : r8 => shr_kind_r8
  use landunit_varcon	, only : istsoil, istcrop, istice, istice_mec, istdlak, istwet
  use landunit_varcon	, only : isturb_tbd, isturb_hd, isturb_md
  use GridcellType	, only : grc
  use LandunitType	, only : lun
  use decompMod		, only : bounds_type

  implicit none
  save

  real(r8), parameter :: tol = 1.e-14_r8

contains

  subroutine setup_start()
    call unittest_subgrid_setup_start()
  end subroutine setup_start
  
  subroutine setup_end()
    call unittest_subgrid_setup_end()
  end subroutine setup_end

  subroutine teardown()
    call unittest_subgrid_teardown()
  end subroutine teardown


  @Test
  subroutine test_one_gcell_all_lunits()
    ! Test update_landunit_weights with a single grid cell, which has all landunits
    ! present

    integer :: index_soil, index_crop, index_icemec, index_urbmd
    real(r8) :: expected(begl:endl)
    
    call setup_start()
    call unittest_add_gridcell()
    ! Add all landunits, deliberately out of order; the weights sum to 1:
    call unittest_add_landunit(my_gi=gi, ltype=5, wtgcell=0.16_r8)
    call unittest_add_landunit(my_gi=gi, ltype=1, wtgcell=0.14_r8)
    call unittest_add_landunit(my_gi=gi, ltype=6, wtgcell=0.08_r8)
    call unittest_add_landunit(my_gi=gi, ltype=2, wtgcell=0.25_r8)
    call unittest_add_landunit(my_gi=gi, ltype=7, wtgcell=0.06_r8)
    call unittest_add_landunit(my_gi=gi, ltype=3, wtgcell=0.05_r8)
    call unittest_add_landunit(my_gi=gi, ltype=8, wtgcell=0.04_r8)
    call unittest_add_landunit(my_gi=gi, ltype=4, wtgcell=0.20_r8)
    call unittest_add_landunit(my_gi=gi, ltype=9, wtgcell=0.02_r8)
    call setup_end()

    ! In the following, we assume that the first few elements of decrease_order are:
    ! istsoil, istcrop, isturb_md

    ! First increase the area of istice_mec: weights of istice_mec + istsoil + istcrop + 0.01
    index_soil = grc%landunit_indices(istsoil,gi)
    index_crop = grc%landunit_indices(istcrop,gi)
    index_icemec = grc%landunit_indices(istice_mec,gi)
    index_urbmd = grc%landunit_indices(isturb_md,gi)
    lun%wtgcell(index_icemec) = lun%wtgcell(index_icemec) + lun%wtgcell(index_soil) + lun%wtgcell(index_crop) + 0.01_r8

    ! Now set the expected outcome
    expected = lun%wtgcell
    expected(index_soil) = 0._r8
    expected(index_crop) = 0._r8
    expected(index_urbmd) = expected(index_urbmd) - 0.01_r8

    call update_landunit_weights(bounds)
    @assertEqual(expected(bounds%begl:bounds%endl), lun%wtgcell(bounds%begl:bounds%endl), tolerance=tol)

    call teardown()
  end subroutine test_one_gcell_all_lunits

  @Test
  subroutine test_one_gcell_some_lunits()
    ! Test update_landunit_weights with a single grid cell, which has only some landunits
    ! present

    integer :: index_wet, index_icemec, index_crop
    real(r8) :: expected(begl:endl)

    call setup_start()
    call unittest_add_gridcell()
    call unittest_add_landunit(my_gi=gi, ltype=istwet, wtgcell=0.3_r8)
    index_wet = li
    call unittest_add_landunit(my_gi=gi, ltype=istice_mec, wtgcell=0.8_r8)
    index_icemec = li
    call unittest_add_landunit(my_gi=gi, ltype=istcrop, wtgcell=0.5_r8)
    index_crop = li
    call setup_end()

    ! In the following, we assume that crop is decreased before wetland:
    expected(index_icemec) = 0.8_r8
    expected(index_crop) = 0.0_r8
    expected(index_wet) = 0.2_r8

    call update_landunit_weights(bounds)
    @assertEqual(expected(bounds%begl:bounds%endl), lun%wtgcell(bounds%begl:bounds%endl), tolerance=tol)

    call teardown()
  end subroutine test_one_gcell_some_lunits

  @Test
  subroutine test_multiple_gcells()
    ! Test update_landunit_weights with multiple grid cells
    
    integer :: g1, g2, g3
    real(r8) :: expected(begl:endl)

    call setup_start()

    call unittest_add_gridcell()
    g1 = gi
    call unittest_add_gridcell()
    g2 = gi
    call unittest_add_gridcell()
    g3 = gi

    ! Deliberately add landunits out-of-order
    call unittest_add_landunit(my_gi=g2, ltype=istice_mec, wtgcell=0.8_r8)
    call unittest_add_landunit(my_gi=g3, ltype=istcrop,    wtgcell=0.6_r8)
    call unittest_add_landunit(my_gi=g1, ltype=isturb_md,  wtgcell=0.45_r8)
    call unittest_add_landunit(my_gi=g3, ltype=istice_mec, wtgcell=0.4_r8)
    call unittest_add_landunit(my_gi=g1, ltype=istcrop,    wtgcell=0.7_r8)
    call unittest_add_landunit(my_gi=g2, ltype=istsoil,    wtgcell=0.1_r8)

    call setup_end()

    ! grid cell 1 needs decrease in crop
    ! grid cell 2 needs increase in soil
    ! grid cell 3 stays the same
    expected = lun%wtgcell
    expected(grc%landunit_indices(istcrop,g1)) = 0.55_r8
    expected(grc%landunit_indices(istsoil,g2)) = 0.2_r8

    call update_landunit_weights(bounds)
    @assertEqual(expected(bounds%begl:bounds%endl), lun%wtgcell(bounds%begl:bounds%endl), tolerance=tol)

    call teardown()
  end subroutine test_multiple_gcells

end module test_update_landunit_weights
