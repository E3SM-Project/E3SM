#! /usr/bin/env python

"""
Namelist creator for E3SM's CLM component
"""

import os, sys

_CIMEROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..","..","..","cime")
sys.path.append(os.path.join(_CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect, run_cmd_no_fail, safe_copy
from CIME.buildnml import create_namelist_infile, parse_input

logger = logging.getLogger(__name__)

###############################################################################
def buildnml(case, caseroot, compname):
###############################################################################
    expect(compname == "clm", compname)

    os.chdir(caseroot)

    srcroot             = case.get_value("SRCROOT")
    compset             = case.get_value("COMPSET")
    ccsm_co2_ppmv       = case.get_value("CCSM_CO2_PPMV")
    clm_co2_type        = case.get_value("CLM_CO2_TYPE")
    clm_usrdat_name     = case.get_value("CLM_USRDAT_NAME")
    clm_config_opts     = case.get_value("CLM_CONFIG_OPTS")
    clm_namelist_opts   = case.get_value("CLM_NAMELIST_OPTS")
    clm_bldnml_opts     = case.get_value("CLM_BLDNML_OPTS")
    clm_nml_use_case    = case.get_value("CLM_NML_USE_CASE")
    clm_force_coldstart = case.get_value("CLM_FORCE_COLDSTART")
    comp_interface      = case.get_value("COMP_INTERFACE")
    comp_glc            = case.get_value("COMP_GLC")
    din_loc_root        = case.get_value("DIN_LOC_ROOT")
    glc_nec             = case.get_value("GLC_NEC")
    lnd_grid            = case.get_value("LND_GRID")
    lnd_ncpl            = case.get_value("LND_NCPL")
    lnd_domain_path     = case.get_value("LND_DOMAIN_PATH")
    lnd_domain_file     = case.get_value("LND_DOMAIN_FILE")
    mask_grid           = case.get_value("MASK_GRID")
    ninst_lnd           = case.get_value("NINST_LND")
    rundir              = case.get_value("RUNDIR")
    run_type            = case.get_value("RUN_TYPE")
    run_startdate       = case.get_value("RUN_STARTDATE")
    run_refcase         = case.get_value("RUN_REFCASE")
    run_refdate         = case.get_value("RUN_REFDATE")
    run_reftod          = case.get_value("RUN_REFTOD")
    casebuild		= case.get_value("CASEBUILD")

    clmconf_dir = os.path.join(casebuild, "clmconf")

    if not os.path.isdir(clmconf_dir): os.mkdir(clmconf_dir)

    #--------------------------------------------------------------------
    # Invoke clm configure - output will go in CASEROOT/Buildconf/clmconf
    #--------------------------------------------------------------------

    # The following translation is hard-wired for backwards compatibility
    # to support the differences between how the scripts specify the land grid
    # and how it is specified internally

    if lnd_grid == 'T31':  lnd_grid = "48x96"
    if lnd_grid == 'T42':  lnd_grid = "64x128"
    if lnd_grid == 'T85':  lnd_grid = "128x256"
    if lnd_grid == 'T341': lnd_grid = "512x1024"


    config_opts = ""
    resolution = ""
    clmusr = ""
    if mask_grid != "reg":
        config_opts = " "
        resolution = lnd_grid
        clmusr     = ""

    if mask_grid == "reg" and lnd_grid != "CLM_USRDAT":
        config_opts = "-sitespf_pt {}".format(lnd_grid)
        resolution  = lnd_grid
        clmusr      = ""

    if lnd_grid == "CLM_USRDAT":
        config_opts = " "
        resolution = clm_usrdat_name
        clmusr     = " -clm_usr_name {}".format(clm_usrdat_name)

    if "1PT" in compset:
        config_opts = " -sitespf_pt reg"

    # TODO: clm/bld/configure needs to be converted to python
    sysmod = "{}/components/clm/bld/configure".format(srcroot)
    sysmod += "  {} -comp_intf {} {}".format(config_opts, comp_interface, clm_config_opts)
    sysmod += " -usr_src {}/SourceMods/src.clm".format(caseroot)
    run_cmd_no_fail(sysmod, from_dir=clmconf_dir)

    #--------------------------------------------------------------------
    # Invoke clm build-namelist - output will go in CASEROOT/Buildconf/clmconf
    #--------------------------------------------------------------------

    startfiletype = "finidat"
    start_type = "default"
    if run_type == "startup":
        if clm_force_coldstart == "on": start_type = "cold"
    else:
        if run_type == "hybrid":
            start_type = "startup"
        else:
            start_type = run_type

    if run_type == "branch": startfiletype = "nrevsn"

    inst_string = ""
    for inst_counter in range(1, ninst_lnd + 1):

        # -----------------------------------------------------
        # determine instance string
        # -----------------------------------------------------

        inst_string = ""
        if ninst_lnd > 1:
            inst_string = "_{0:04d}".format(inst_counter)

            # If multi-instance case does not have restart file, use single-case restart
            # for each instance
            if not os.path.exists(os.path.join(rundir, "rpointer.lnd{}".format(inst_string))) and \
                   os.path.exists(os.path.join(rundir, "rpointer.lnd")):
                safe_copy(os.path.join(rundir, "rpointer.lnd"),
                          os.path.join(rundir, "rpointer.lnd{}".format(inst_string)))


        # -----------------------------------------------------
        # create clmconf/namelist
        # -----------------------------------------------------

        if os.path.exists("{}/Buildconf/clm.input_data_list".format(caseroot)):
            os.remove("{}/Buildconf/clm.input_data_list".format(caseroot))

        clmicfile = ""
        clm_startfile = ""
        if run_type == "hybrid" or run_type == "branch":
            clm_startfile = "{}.clm2{}.r.{}-{}.nc".format(run_refcase, inst_string, run_refdate, run_reftod)
            if not os.path.exists(os.path.join(rundir, clm_startfile)):
                clm_startfile = "{}.clm2.r.{}-{}.nc".format(run_refcase, run_refdate, run_reftod)

            clmicfile = " {} = '{}'".format(startfiletype, clm_startfile)

        infile_text = ""
        if clmicfile: infile_text = "{} = '{}' \n".format(startfiletype, clm_startfile)

        create_namelist_infile(case,
                               "{}/user_nl_clm{}".format(caseroot, inst_string),
                               "{}/namelist".format(clmconf_dir),
                               infile_text=infile_text)

        # -----------------------------------------------------
        # call build-namelist
        # -----------------------------------------------------

        glc_opts = ""
        if comp_glc != "sglc":
            glc_smb = str(case.get_value("GLC_SMB")).lower()
            glc_opts = "-glc_present -glc_smb .{}. ".format(glc_smb)

        usecase = " "
        if clm_nml_use_case != "UNSET": usecase = "-use_case {}".format(clm_nml_use_case)

        start_ymd = run_startdate.replace("-", "")
        ignore = "-ignore_ic_year" if ("-01-01" in run_startdate or "-09-01" in run_startdate) else "-ignore_ic_date"

        sysmod =  "{}/components/clm/bld/build-namelist -infile {}/Buildconf/clmconf/namelist ".format(srcroot, caseroot)
        sysmod += " -csmdata {} -inputdata {}/Buildconf/clm.input_data_list {}".format(din_loc_root, caseroot, ignore)
        sysmod += ' -namelist " &clm_inparm  start_ymd={} {} /"'.format(start_ymd, clm_namelist_opts)
        sysmod += " {} {} -res {} {} -clm_start_type {}".format(usecase, glc_opts, resolution, clmusr, start_type)
        sysmod += " -envxml_dir {} -l_ncpl {} -lnd_frac {}/{}".format(caseroot, lnd_ncpl, lnd_domain_path, lnd_domain_file)
        sysmod += " -glc_nec {} -co2_ppmv {} -co2_type {} ".format(glc_nec, ccsm_co2_ppmv, clm_co2_type)
        sysmod += " -config {}/config_cache.xml {}".format(clmconf_dir, clm_bldnml_opts)
        if mask_grid != "reg":
            sysmod += " -mask {}".format(mask_grid)

        # TODO: clm/bld/build-namelist needs to be converted to python
        run_cmd_no_fail(sysmod, from_dir=clmconf_dir)

        # -----------------------------------------------------
        # move lnd_in to $RUNDIR
        # -----------------------------------------------------

        if os.path.isdir(rundir):
            safe_copy(os.path.join(clmconf_dir, "lnd_in"), os.path.join(rundir, "lnd_in{}".format(inst_string)))

	# Only copy drv_flds_in namelist file if one doesn't already exist
        if not os.path.exists(os.path.join(rundir, "drv_flds_in")) and os.path.exists(os.path.join(clmconf_dir, "drv_flds_in")):
            safe_copy(os.path.join(clmconf_dir, "drv_flds_in"), os.path.join(rundir, "drv_flds_in"))

###############################################################################
def _main_func():
###############################################################################
    caseroot = parse_input(sys.argv)
    with Case(caseroot) as case:
        buildnml(case, caseroot, "clm")

if __name__ == "__main__":
    _main_func()
