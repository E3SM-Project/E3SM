#!/usr/bin/env python

"""
build mosart library
"""
import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib         import parse_input
from CIME.case             import Case
from CIME.utils            import expect, run_bld_cmd_ensure_logging
from CIME.build            import get_standard_cmake_args

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################
    caseroot  = case.get_value("CASEROOT")
    srcroot   = case.get_value("SRCROOT")
    gmake_j   = case.get_value("GMAKE_J")
    gmake     = case.get_value("GMAKE")
    cmake_args = get_standard_cmake_args(case)

    #-------------------------------------------------------
    # create Filepath in bldroot, unlike most other components,
    # mosart makes it's Filepath right here.
    #-------------------------------------------------------

    filepaths = \
 """{caseroot}/SourceMods/src.mosart
{srcroot}/components/mosart/src/riverroute
{srcroot}/components/mosart/src/cpl
{srcroot}/components/mosart/src/wrm
{srcroot}/components/mosart/src/inundation
{srcroot}/components/mosart/src/cpl_share
""".format(caseroot=caseroot, srcroot=srcroot)

    with open(os.path.join(bldroot, "Filepath"), "w") as fd:
        fd.write(filepaths)

    #-------------------------------------------------------
    # create the library in libroot
    #-------------------------------------------------------

    run_bld_cmd_ensure_logging('cmake -DMODEL=mosart -DCOMPLIB=rof {cmake_args} {srcroot}/components'.format(cmake_args=cmake_args, srcroot=srcroot), logger, from_dir=bldroot)
    run_bld_cmd_ensure_logging("{} -j {}".format(gmake, gmake_j), logger, from_dir=bldroot)

###############################################################################
def _main_func():
###############################################################################
    caseroot, libroot, bldroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, libroot, case)

###############################################################################

if __name__ == "__main__":
    _main_func()
