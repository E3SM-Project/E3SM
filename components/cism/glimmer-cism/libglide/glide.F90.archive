!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                                                             
!   glide.F90.archive - part of the Glimmer Community Ice Sheet Model (Glimmer-CISM)  
!                                                              
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!   Copyright (C) 2005-2013
!   Glimmer-CISM contributors - see AUTHORS file for list of contributors
!
!   This file is part of Glimmer-CISM.
!
!   Glimmer-CISM is free software: you can redistribute it and/or modify it
!   under the terms of the Lesser GNU General Public License as published
!   by the Free Software Foundation, either version 3 of the License, or
!   (at your option) any later version.
!
!   Glimmer-CISM is distributed in the hope that it will be useful,
!   but WITHOUT ANY WARRANTY; without even the implied warranty of
!   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
!   Lesser GNU General Public License for more details.
!
!   You should have received a copy of the Lesser GNU General Public License
!   along with Glimmer-CISM. If not, see <http://www.gnu.org/licenses/>.
!
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#ifdef HAVE_CONFIG_H
#include "config.inc"
#endif

#include "glide_mask.inc"

module glide
  !*FD the top-level GLIDE module

  use glide_types
  use glide_stop
  use glide_nc_custom
  use glide_io
  use glide_lithot_io
  use glide_lithot
  use glide_profile
  use glimmer_config
  use glimmer_global

#ifdef GLC_DEBUG
    use glimmer_paramets, only: itest, jtest, thk0
#endif

  integer, private, parameter :: dummyunit=99

contains

  subroutine glide_config(model,config,fileunit)

    !*FD read glide configuration from file and print it to the log
    use glide_setup
    use isostasy
    use glimmer_ncparams
    use glimmer_config
    use glimmer_map_init
    use glimmer_filenames
    implicit none

    type(glide_global_type) :: model          !*FD model instance
    type(ConfigSection), pointer  :: config   !*FD structure holding sections of configuration file
    integer, intent(in), optional :: fileunit !*FD fileunit for reading config file 

    type(ConfigSection), pointer :: ncconfig
    integer :: unit

    unit = 99
    if (present(fileunit)) then
       unit = fileunit
    endif

    ! read configuration file
    call glide_readconfig(model,config)
    call glide_printconfig(model)

    ! Read alternate sigma levels from config file, if necessary
    call glide_read_sigma(model,config)

    ! read isostasy configuration file
    call isos_readconfig(model%isos,config)
    call isos_printconfig(model%isos)
    ! read mapping from config file
    ! **** Use of dew and dns here is an ugly fudge that
    ! **** allows the use of old [GLINT projection] config section
    ! **** for backwards compatibility. It will be deleted soon.
    ! **** (You have been warned!)
    ! **** N.B. Here, dew and dns are unscaled - i.e. real distances in m

    call glimmap_readconfig(model%projection,config, &
         model%numerics%dew, &
         model%numerics%dns)

    ! netCDF I/O
    if (trim(model%funits%ncfile).eq.'') then
       ncconfig => config
    else
       call ConfigRead(process_path(model%funits%ncfile), ncconfig, unit)
    end if
    call glimmer_nc_readparams(model,ncconfig)

  end subroutine glide_config

  subroutine glide_initialise(model)
    !*FD initialise GLIDE model instance
    use glide_setup
    use glimmer_ncio
    use glide_velo
    use glide_velo_higher
    use glide_thck
    use glide_temp
    use glissade_temp
    use glimmer_log
    use glimmer_scales
    use glide_mask
    use isostasy
    use glimmer_map_init
    use glide_ground

    ! *sfp** added
    use glam_strs2, only : glam_velo_fordsiapstr_init
    use remap_glamutils, only : horizontal_remap_init

    ! *sfp** added for summer modeling school
    use fo_upwind_advect, only : fo_upwind_advect_init

    !*mb* added 
    use glam_Basal_Proc, only : Basal_Proc_init

    implicit none
    type(glide_global_type) :: model        !*FD model instance

!lipscomb - TO DO - build glimmer_vers file or put this character elsewhere?
    character(len=100), external :: glimmer_version_char

#ifdef GLC_DEBUG
    integer :: i, j, k
#endif

    call write_log(trim(glimmer_version_char()))

    ! initialise scales
    call glimmer_init_scales
    call initnan !Initialize the NAN representation, hack to get smart compilers like gfortran to divide by zero

    ! scale parameters
    call glide_scale_params(model)
    ! set up coordinate systems
    model%general%ice_grid = coordsystem_new(0.d0, 0.d0, &
         model%numerics%dew, model%numerics%dns, &
         model%general%ewn, model%general%nsn)
    model%general%velo_grid = coordsystem_new(model%numerics%dew/2.,model%numerics%dns/2., &
         model%numerics%dew,model%numerics%dns, &
         model%general%ewn-1,model%general%nsn-1)

    ! allocate arrays
    call glide_allocarr(model)

    ! initialise bed softness to uniform parameter
    model%velocity%bed_softness = model%velowk%btrac_const

    !Initialize boundary condition fields to be NaN everywhere 
    model%geometry%marine_bc_normal = NaN
    
    ! set uniform basal heat flux 
    model%temper%bheatflx = model%paramets%geot

    ! load sigma file
    call glide_load_sigma(model,dummyunit)

    ! open all input files
    call openall_in(model)
    ! and read first time slice
    call glide_io_readall(model,model)
    ! Write projection info to log
    call glimmap_printproj(model%projection)

#ifdef GLC_DEBUG
       write(6,*) 'Opened input files'
       write(6,*) 'i, j, thck, thck(m):', itest, jtest, &
               model%geometry%thck(itest,jtest), model%geometry%thck(itest,jtest)*thk0
#endif

    ! read lithot if required !EIB! from gc2
    if (model%options%gthf.gt.0) then
       call glide_lithot_io_readall(model,model)
    end if

    ! handle relaxed/equilibrium topo
    ! Initialise isostasy first
    call init_isostasy(model)
    select case(model%options%whichrelaxed)
    case(1) ! Supplied topography is relaxed
       model%isos%relx = model%geometry%topg
    case(2) ! Supplied topography is in equilibrium
       call isos_relaxed(model)
    end select


    ! open all output files
    call openall_out(model)
    ! create glide variables
    call glide_io_createall(model)

    ! initialise glide components
    call init_velo(model)

    if (model%options%whichtemp == TEMP_REMAP_ADV) then
       call glissade_init_temp(model)
    else
       call glide_init_temp(model)
    endif

    call init_thck(model)

    call glide_initialise_backstress(model%geometry%thck,&
                                     model%climate%backstressmap,&
                                     model%climate%backstress, &
                                     model%climate%stressin, &
                                     model%climate%stressout)
    if (model%options%gthf.gt.0) then
       call glide_lithot_io_createall(model)
       call init_lithot(model)
    end if

    if (model%options%which_ho_diagnostic == HO_DIAG_PATTYN_UNSTAGGERED .or. &
        model%options%which_ho_diagnostic == HO_DIAG_PATTYN_STAGGERED) then

        call init_velo_hom_pattyn(model)

    end if

    ! *sfp** added; initialization of Payne/Price HO dynamics subroutine ... name can change once agreed on
    if (model%options%which_ho_diagnostic == HO_DIAG_PP ) then

        call glam_velo_fordsiapstr_init(model%general%ewn,    model%general%nsn,  &
                                        model%general%upn,                        &
                                        model%numerics%dew,   model%numerics%dns, &
                                        model%numerics%sigma)
    end if

    ! *sfp** added; initialization of LANL incremental remapping subroutine for thickness evolution
    if (model%options%whichevol== EVOL_INC_REMAP ) then

        if (model%options%whichtemp == TEMP_REMAP_ADV) then ! Use IR to advect temperature

           call horizontal_remap_init( model%remap_wk,    &
                                       model%numerics%dew, model%numerics%dns,  &
                                       model%general%ewn,  model%general%nsn,   &
                                       model%options%periodic_ew, model%options%periodic_ns, &
                                       model%general%upn, model%numerics%sigma )

        else  ! Use IR to transport thickness only

           call horizontal_remap_init( model%remap_wk,    &
                                       model%numerics%dew, model%numerics%dns,  &
                                       model%general%ewn,  model%general%nsn, &
                                       model%options%periodic_ew, model%options%periodic_ns)

        endif ! whichtemp

    endif 

    ! *sfp** added for summer modeling school
    if (model%options%whichevol== EVOL_FO_UPWIND ) then

        call fo_upwind_advect_init( model%general%ewn, model%general%nsn )

    endif

    ! *mb* added; initialization of basal proc. module
    if (model%options%which_bmod == BAS_PROC_FULLCALC .or. &
        model%options%which_bmod == BAS_PROC_FASTCALC) then
        
        call Basal_Proc_init (model%general%ewn, model%general%nsn,model%basalproc,     &
                              model%numerics%ntem)
    end if      

    ! initialise ice age
    ! !EIB gc2! This is a placeholder; currently the ice age is not computed.  
    ! !EIB gc2! lipscomb - to do - Compute and advect the ice age.
    ! !EIB lanl! Currently the ice age is only computed for remapping transport
    ! !EIB lanl! (whichevol = 3 or 4)
    model%geometry%age(:,:,:) = 0._dp

    if (model%options%hotstart.ne.1) then
       ! initialise Glen's flow parameter A using an isothermal temperature distribution
       call glide_temp_driver(model,0)
    end if

    ! calculate mask
    call glide_set_mask(model%numerics, model%geometry%thck, model%geometry%topg, &
                        model%general%ewn, model%general%nsn, model%climate%eus, &
                        model%geometry%thkmask, model%geometry%iarea, model%geometry%ivol)

    call calc_iareaf_iareag(model%numerics%dew,model%numerics%dns, &
                            model%geometry%iarea, model%geometry%thkmask, &
                            model%geometry%iareaf, model%geometry%iareag)

    !calculate the normal at the marine margin
    call glide_marine_margin_normal(model%geometry%thck, model%geometry%thkmask, model%geometry%marine_bc_normal)

    !EIB! old way
    ! calculate mask
    !if (model%options%hotstart.ne.1) then  ! setting the mask destroys exact restart
    !   call glide_set_mask(model)
    !end if

    ! and calculate lower and upper ice surface
    call glide_calclsrf(model%geometry%thck, model%geometry%topg, model%climate%eus,model%geometry%lsrf)
    model%geometry%usrf = model%geometry%thck + model%geometry%lsrf

    !EIB! from gc2 - keep?
    ! initialise thckwk variables; used in timeders subroutine
    model%thckwk%olds(:,:,1) = model%geometry%thck(:,:)
    model%thckwk%olds(:,:,2) = model%geometry%usrf(:,:)
    !EIB!

    ! initialise profile
#ifdef PROFILING
    call glide_prof_init(model)
#endif

    ! register the newly created model so that it can be finalised in the case
    ! of an error without needing to pass the whole thing around to every
    ! function that might cause an error
    call register_model(model)
    
#ifdef GLC_DEBUG
       write(6,*) ' '
       write(6,*) 'End of glide_init'
       i = itest
       j = jtest
       write(6,*) 'i, j, thck =', i, j, model%geometry%thck(i,j)
       write(6,300) k, model%geometry%thck(i,j)
       write(6,*) ' '
       write(6,*) 'k, temperature'
       do k = 1, model%general%upn
            write(6,300) k, model%temper%temp(k,i,j)
       enddo
  300  format(i3, Z24.20)
#endif

  end subroutine glide_initialise
  
  subroutine glide_tstep_p1(model,time)
    !*FD Performs first part of time-step of an ice model instance.
    !*FD calculate velocity and temperature
    use glimmer_global, only : rk
    use glide_thck
    use glide_velo
    use glide_setup
    use glide_temp
    use glissade_temp
    use glide_mask
    use glide_deriv, only : df_field_2d_staggered
    use glimmer_paramets, only: tim0
    use glimmer_physcon, only: scyr
    use glide_thckmask
    use glide_grids

    ! *mb* added for basal proc module  
    use glam_Basal_Proc, only : Basal_Proc_driver

    implicit none

    type(glide_global_type) :: model        !*FD model instance
    real(rk),  intent(in)   :: time         !*FD Current time in years

    ! Update internal clock
    model%numerics%time = time  
    model%temper%newtemps = .false.

    model%thckwk%oldtime = model%numerics%time - (model%numerics%dt * tim0/scyr)

#ifdef GLC_DEBUG
       write(6,*) ' '
       write(6,*) 'time =', model%numerics%time
       write(6,*) 'tinc =', model%numerics%tinc
       write(6,*) 'oldtime =', model%thckwk%oldtime
#endif

    ! ------------------------------------------------------------------------ 
    ! Calculate various derivatives...
    ! ------------------------------------------------------------------------     
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%geomderv)
#endif

    call geometry_derivs(model)
    
    !EIB! from gc2 - think this was all replaced by geometry_derivs??
    call stagvarb(model%geometry% thck, &
         model%geomderv% stagthck,&
         model%general%  ewn, &
         model%general%  nsn)

    call df_field_2d_staggered(model%geometry%usrf, &
         model%numerics%dew, model%numerics%dns, &
         model%geomderv%dusrfdew, & 
         model%geomderv%dusrfdns, &
         .false., .false.)

    call df_field_2d_staggered(model%geometry%thck, &
         model%numerics%dew, model%numerics%dns, &
         model%geomderv%dthckdew, & 
         model%geomderv%dthckdns, &
         .false., .false.)
    !EIB!
    
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%geomderv)
#endif

#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%ice_mask1)
#endif
    !EIB! call veries between lanl and gc2, this is lanl version
    !magi a hack, someone explain what whichthck=5 does
    !call glide_maskthck(0, &       
    call glide_maskthck( &       
         model%geometry% thck,      &
         model%climate%  acab,      &
         .true.,                    &
         model%numerics%thklim,     &
         model%geometry% dom,       &
         model%geometry% mask,      &
         model%geometry% totpts,    &
         model%geometry% empty)
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%ice_mask1)
#endif

    ! ------------------------------------------------------------------------ 
    ! calculate geothermal heat flux
    ! ------------------------------------------------------------------------ 
    if (model%options%gthf.gt.0) then
       call calc_lithot(model)
    end if

    ! ------------------------------------------------------------------------ 
    ! Calculate temperature evolution and Glenn's A, if necessary
    ! ------------------------------------------------------------------------ 
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%temperature)
#endif
    if ( model%numerics%tinc >  mod(model%numerics%time,model%numerics%ntem)) then

       if (model%options%whichtemp == TEMP_REMAP_ADV) then 

         ! Vert diffusion and strain heating only; no advection
         ! Remapping routine is used to advect temperature in glide_tstep_p2

         call glissade_temp_driver(model)

       else

         ! standard Glide driver, including temperature advection

         call glide_temp_driver(model, model%options%whichtemp)

       endif

       model%temper%newtemps = .true.

    end if
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%temperature)
#endif

    ! ------------------------------------------------------------------------ 
    ! Calculate basal traction factor
    ! ------------------------------------------------------------------------ 
    call calc_btrc(model,model%options%whichbtrc,model%velocity%btrc)

    ! ------------------------------------------------------------------------ 
    ! Calculate basal shear strength from Basal Proc module, if necessary
    ! ------------------------------------------------------------------------    
    if (model%options%which_bmod == BAS_PROC_FULLCALC .or. &
        model%options%which_bmod == BAS_PROC_FASTCALC) then
        call Basal_Proc_driver (model%general%ewn,model%general%nsn,model%general%upn,       &
                                model%numerics%ntem,model%velocity_hom%uvel(model%general%upn,:,:), &
                                model%velocity_hom%vvel(model%general%upn,:,:), &
                                model%options%which_bmod,model%temper%bmlt,model%basalproc)
    end if

  end subroutine glide_tstep_p1

!----------------------------------------------------------------------------- 

  !EIB! lanl version of call
  subroutine glide_tstep_p2(model,no_write)
    !*FD Performs second part of time-step of an ice model instance.
    !*FD write data and move ice
    use glide_thck
    use glide_velo
    use glide_ground
    use glide_setup
    use glide_temp
    use glide_mask
    use isostasy

    ! *sfp** driver module/subroutines for Payne/Price HO dynamics and LANL inc. remapping for dH/dt 
    ! Modeled after similar routines in "glide_thck"
    use glam, only: inc_remap_driver

    ! *sfp** added for summer modeling school
    use fo_upwind_advect, only: fo_upwind_advect_driver

    ! *sfp* added so that stress tensor is populated w/ HO stress fields
    use stress_hom, only: glide_stress

    implicit none

    type(glide_global_type) :: model        !*FD model instance
    logical,optional :: no_write

    logical nw

    ! ------------------------------------------------------------------------ 
    ! write to netCDF file
    ! ------------------------------------------------------------------------ 
    if (present(no_write)) then
       nw=no_write
    else
       nw=.false.
    end if 

    if (.not. nw) call glide_io_writeall(model,model)

    ! ------------------------------------------------------------------------ 
    ! Calculate flow evolution by various different methods
    ! ------------------------------------------------------------------------ 
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%ice_evo)
#endif

    !EIB! case number(gc2) vs name(lanl)
    select case(model%options%whichevol)
    case(EVOL_PSEUDO_DIFF) ! Use precalculated uflx, vflx -----------------------------------

       call thck_lin_evolve(model,model%temper%newtemps)

    case(EVOL_ADI) ! Use explicit leap frog method with uflx,vflx -------------------

       call stagleapthck(model,model%temper%newtemps)

    case(EVOL_DIFFUSION) ! Use non-linear calculation that incorporates velocity calc -----

       call thck_nonlin_evolve(model,model%temper%newtemps)

    case(EVOL_INC_REMAP) ! Use incremental remapping scheme for advecting ice thickness ---
                         ! (and temperature too, if whichtemp = TEMP_REMAP_ADV)

       call inc_remap_driver( model )

       call glide_stress( model )       !*sfp* added for populating stress tensor w/ HO fields

    ! *sfp** added for summer modeling school
    case(EVOL_FO_UPWIND) ! Use first order upwind scheme for mass transport

       call fo_upwind_advect_driver( model )
 
    end select
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%ice_evo)
#endif

    ! ------------------------------------------------------------------------
    ! get new mask
    ! ------------------------------------------------------------------------
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%ice_mask2)
#endif
    call glide_set_mask(model%numerics, model%geometry%thck, model%geometry%topg, &
                        model%general%ewn, model%general%nsn, model%climate%eus, &
                        model%geometry%thkmask, model%geometry%iarea, model%geometry%ivol)
    !EIB! old call
    !call glide_set_mask(model)
    
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%ice_mask2)
#endif

    !calculate the normal at the marine margin
    call glide_marine_margin_normal(model%geometry%thck, model%geometry%thkmask, model%geometry%marine_bc_normal)
    !calculate the grounding line flux after the mask is correct
    call calc_gline_flux(model%geomderv%stagthck,model%velocity%surfvel, &
    model%geometry%thkmask,model%ground%gline_flux, model%velocity%ubas, &
    model%velocity%vbas, model%numerics%dew)

    !calculate the grounding line flux after the mask is correct
    call calc_gline_flux(model%geomderv%stagthck,model%velocity%surfvel, &
    model%geometry%thkmask,model%ground%gline_flux, model%velocity%ubas, &
    model%velocity%vbas, model%numerics%dew)

    ! ------------------------------------------------------------------------ 
    ! Remove ice which is either floating, or is present below prescribed
    ! depth, depending on value of whichmarn
    ! ------------------------------------------------------------------------ 
    call glide_marinlim(model%options%whichmarn, &
         model%geometry%thck,      &
         model%isos%relx,      &
         model%geometry%topg,   &
         model%temper%flwa,   &
         model%numerics%sigma,   &
         model%geometry%thkmask,    &
         model%numerics%mlimit,     &
         model%numerics%calving_fraction, &
         model%climate%eus,         &
         model%climate%calving,  &
         model%climate%backstress, &
         model%climate%tempanmly, &
         model%numerics%dew,    &
         model%numerics%dns, &
         model%climate%backstressmap, &
         model%climate%stressout, &
         model%climate%stressin, &
         model%ground, &
         model%general%nsn, &
         model%general%ewn, &
         model%geometry%usrf)
    !EIB! old way
    !call glide_marinlim(model%options%  whichmarn, &
    !     model%geometry% thck,      &
    !     model%isos% relx,      &
    !     model%geometry%topg,   &
    !     model%geometry%thkmask,    &
    !     model%numerics%mlimit,     &
    !     model%numerics%calving_fraction, &
    !     model%climate%eus,         &
    !     model%climate%calving)

    !EIB! added
    !issues with ice shelf, calling it again fixes the mask
    call glide_set_mask(model%numerics, model%geometry%thck, model%geometry%topg, &
                        model%general%ewn, model%general%nsn, model%climate%eus, &
                        model%geometry%thkmask, model%geometry%iarea, model%geometry%ivol)

    call calc_iareaf_iareag(model%numerics%dew,model%numerics%dns, &
                            model%geometry%iarea, model%geometry%thkmask, &
                            model%geometry%iareaf, model%geometry%iareag)

! ------------------------------------------------------------------------
    ! update ice/water load if necessary
    ! ------------------------------------------------------------------------
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%isos_water)
#endif
    if (model%isos%do_isos) then
       if (model%numerics%time.ge.model%isos%next_calc) then
          model%isos%next_calc = model%isos%next_calc + model%isos%period
          call isos_icewaterload(model)
          model%isos%new_load = .true.
       end if
    end if
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%isos_water)
#endif
    
    ! basal shear stress calculations
    call calc_basal_shear(model)

  end subroutine glide_tstep_p2

  !EIB! call difference: lanl p2(model, no_write), p3(model)
  !EIB!                  gc2  p2(model), p3(model, no_write)
  !EIB! should both p2 and p3 be consitent?
  subroutine glide_tstep_p3(model, no_write)
    !*FD Performs third part of time-step of an ice model instance:
    !*FD calculate isostatic adjustment and upper and lower ice surface
    use isostasy
    use glide_setup
    use glide_velo, only: gridwvel
    use glide_thck, only: timeders    

    implicit none
    type(glide_global_type) :: model        !*FD model instance
    
    logical, optional, intent(in) :: no_write
    logical nw
#ifdef GLC_DEBUG
    integer :: i, j, k, upn 
       upn = model%general%upn

       i = itest
       j = jtest
       write(6,*) ' '
       write(6,*) 'Starting tstep_p3, i, j, thck =', i, j, model%geometry%thck(i,j)
#endif

    ! ------------------------------------------------------------------------ 
    ! Calculate isostasy
    ! ------------------------------------------------------------------------ 
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%isos)
#endif
    if (model%isos%do_isos) then
       call isos_isostasy(model)
    end if
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%isos)
#endif

    ! ------------------------------------------------------------------------
    ! calculate upper and lower ice surface
    ! ------------------------------------------------------------------------
    call glide_calclsrf(model%geometry%thck, model%geometry%topg,  &
                        model%climate%eus,   model%geometry%lsrf)
    model%geometry%usrf = max(0.d0,model%geometry%thck + model%geometry%lsrf)

    !EIB! from gc2, not sure if it needs to be here, comment out for now, just in case
!EIB!   ! Calculate time-derivatives of thickness and upper surface elevation ------------
!EIB!
!EIB!       call timeders(model%thckwk,   &
!EIB!            model%geometry%thck,     &
!EIB!            model%geomderv%dthckdtm, &
!EIB!            model%geometry%mask,     &
!EIB!            model%numerics%time,     &
!EIB!            1)
!EIB!
!EIB!       call timeders(model%thckwk,   &
!EIB!            model%geometry%usrf,     &
!EIB!            model%geomderv%dusrfdtm, &
!EIB!            model%geometry%mask,     &
!EIB!            model%numerics%time,     &
!EIB!            2)
!EIB!
!EIB!       ! Calculate the vertical velocity of the grid ------------------------------------
!EIB!
!EIB!       call gridwvel(model%numerics%sigma,  &
!EIB!            model%numerics%thklim, &
!EIB!            model%velocity%uvel,   &
!EIB!            model%velocity%vvel,   &
!EIB!            model%geomderv,        &
!EIB!            model%geometry%thck,   &
!EIB!            model%velocity%wgrd)
!EIB!
!EIB!#ifdef GLC_DEBUG
!EIB!       i = itest
!EIB!       j = jtest
!EIB!       write(6,*) ' '
!EIB!       write(6,*) 'Before restart write, i, j, thck =', i, j, model%geometry%thck(i,j)
!EIB!       write(6,300) k, model%geometry%thck(i,j)
!EIB!       write(6,*) ' '
!EIB!       write(6,*) 'k, temperature'
!EIB!       do k = 1, upn
!EIB!            write(6,300) k, model%temper%temp(k,i,j)
!EIB!       enddo
!EIB!  300  format(i3, Z24.20)
!EIB!#endif
!EIB!
!EIB!    ! ------------------------------------------------------------------------ 
!EIB!    ! write to netCDF file
!EIB!    ! ------------------------------------------------------------------------ 
!EIB!
!EIB!    if (present(no_write)) then
!EIB!       nw=no_write
!EIB!    else
!EIB!       nw=.false.
!EIB!    end if
!EIB!
!EIB!    if (.not. nw) then
!EIB!       call glide_io_writeall(model,model)
!EIB!       if (model%options%gthf.gt.0) then
!EIB!          call glide_lithot_io_writeall(model,model)
!EIB!       end if
!EIB!    end if
!EIB!

    ! increment time counter
    model%numerics%timecounter = model%numerics%timecounter + 1

  end subroutine glide_tstep_p3

  !-------------------------------------------------------------------
!EIB! not ready for restarts yet
!EIB!  subroutine glide_write_mod_rst(rfile)
!EIB!
!EIB!    use glimmer_log
!EIB!    use glimmer_restart_common
!EIB!
!EIB!#ifdef RESTARTS
!EIB!    use glide_types
!EIB!    use isostasy_types
!EIB!#endif
!EIB!
!EIB!    type(restart_file) :: rfile      !*FD Open restart file 
!EIB!
!EIB!#ifdef RESTARTS
!EIB!    call glide_types_modrsw(rfile)
!EIB!    call isostasy_types_modrsw(rfile)
!EIB!#else
!EIB!    call write_log('No restart code available - rebuild GLIMMER with --enable-restarts',GM_FATAL)
!EIB!#endif
!EIB!
!EIB!  end subroutine glide_write_mod_rst
!EIB!
!EIB!  !-------------------------------------------------------------------
!EIB!
!EIB!  subroutine glide_read_mod_rst(rfile)
!EIB!
!EIB!    use glimmer_log
!EIB!    use glimmer_restart_common
!EIB!
!EIB!#ifdef RESTARTS
!EIB!    use glide_types
!EIB!    use isostasy_types
!EIB!#endif
!EIB!
!EIB!    type(restart_file) :: rfile      !*FD Open restart file 
!EIB!
!EIB!#ifdef RESTARTS
!EIB!    call glide_types_modrsr(rfile)
!EIB!    call isostasy_types_modrsr(rfile)
!EIB!#else
!EIB!    call write_log('No restart code available - rebuild GLIMMER with --enable-restarts',GM_FATAL)
!EIB!#endif
!EIB!
!EIB!  end subroutine glide_read_mod_rst
!EIB!
!EIB!  !-------------------------------------------------------------------
!EIB!
!EIB!  subroutine glide_write_restart(model,rfile)
!EIB!
!EIB!    use glimmer_log
!EIB!    use glimmer_restart
!EIB!    use glimmer_restart_common
!EIB!    implicit none
!EIB!
!EIB!    type(glide_global_type) :: model !*FD model instance
!EIB!    type(restart_file) :: rfile      !*FD Open restart file     
!EIB!
!EIB!#ifdef RESTARTS
!EIB!    call glimmer_write_mod_rst(rfile)
!EIB!    call glide_write_mod_rst(rfile)
!EIB!    call rsw_glide_global_type(rfile,model)
!EIB!#else
!EIB!    call write_log('No restart code available - rebuild GLIMMER with --enable-restarts',GM_FATAL)
!EIB!#endif
!EIB!
!EIB!  end subroutine glide_write_restart
!EIB!
!EIB!  !-------------------------------------------------------------------
!EIB!
!EIB!  subroutine glide_read_restart(model,rfile,prefix)
!EIB!
!EIB!    use glimmer_log
!EIB!    use glimmer_restart
!EIB!    use glimmer_restart_common
!EIB!    use glimmer_ncdf
!EIB!    use glimmer_ncio
!EIB!    implicit none
!EIB!
!EIB!    type(glide_global_type) :: model !*FD model instance
!EIB!    type(restart_file) :: rfile      !*FD Open restart file 
!EIB!    character(*),optional,intent(in) :: prefix !*FD prefix for new output files
!EIB!
!EIB!    character(40) :: pf
!EIB!
!EIB!    if (present(prefix)) then
!EIB!       pf = prefix
!EIB!    else
!EIB!       pf = 'RESTART_'
!EIB!    end if
!EIB!
!EIB!#ifdef RESTARTS
!EIB!    call glimmer_read_mod_rst(rfile)
!EIB!    call glide_read_mod_rst(rfile)
!EIB!    call rsr_glide_global_type(rfile,model)
!EIB!    call nc_repair_outpoint(model%funits%out_first)
!EIB!    call nc_repair_inpoint(model%funits%in_first)
!EIB!    call nc_prefix_outfiles(model%funits%out_first,trim(pf))
!EIB!    call openall_out(model)
!EIB!    call glide_io_createall(model)
!EIB!    call glide_nc_fillall(model)
!EIB!#else
!EIB!    call write_log('No restart code available - rebuild GLIMMER with --enable-restarts',GM_FATAL)
!EIB!#endif
!EIB!
!EIB!  end subroutine glide_read_restart

end module glide
