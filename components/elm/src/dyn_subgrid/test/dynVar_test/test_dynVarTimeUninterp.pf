module test_dynVarTimeUninterp

  ! Tests of dyn_var_time_uninterp

  use pfunit_mod
  use shr_kind_mod, only : r8 => shr_kind_r8
  use dynVarTimeUninterpMod, only : dyn_var_time_uninterp_type
  use test_dynVarShared
  use dynFileMod, only : dyn_file_type
  use ncdio_pio, only : ncd_get_read_times, ncd_reset_read_times

  implicit none
  save

  real(r8), parameter :: tol = 1.e-13_r8

contains

  @Test
  subroutine test_get_current_data_1d_noReads()
    ! Test get_current_data_1d with no reads after initialization
    
    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_uninterp_type) :: var
    real(r8) :: data(3)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_uninterp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    call var%get_current_data(data)
    @assertEqual([4.0_r8, 5.0_r8, 6.0_r8], data)

    ! Make sure that the above get_current_data call didn't trigger i/o:
    @assertFalse(any(ncd_get_read_times(dyn_file, 'foo_1d')))

  end subroutine test_get_current_data_1d_noReads


  @Test
  subroutine test_get_current_data_1d_noReads_update()
    ! Test get_current_data_1d with no reads after initialization, although it has an
    ! set_current_year call that shouldn't do anything
    
    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_uninterp_type) :: var
    real(r8) :: data(3)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_uninterp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    ! make sure that a call to set_current_year with an unchanged year doesn't affect things at all
    call dyn_file%time_info%set_current_year(12)

    call var%get_current_data(data)
    @assertEqual([4.0_r8, 5.0_r8, 6.0_r8], data)

    ! Make sure that the above get_current_data call didn't trigger i/o:
    @assertFalse(any(ncd_get_read_times(dyn_file, 'foo_1d')))

  end subroutine test_get_current_data_1d_noReads_update


  @Test
  subroutine test_get_current_data_1d_noReads_conversion()
    ! Test get_current_data_1d with no reads after initialization, with a conversion
    ! factor
    
    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_uninterp_type) :: var
    real(r8) :: data(3)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_uninterp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=2.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))
    
    call var%get_current_data(data)
    @assertEqual([2.0_r8, 2.5_r8, 3.0_r8], data, tolerance=tol)

  end subroutine test_get_current_data_1d_noReads_conversion


  @Test
  subroutine test_get_current_data_1d_doRead()
    ! Test get_current_data_1d with an extra read after initialization
    
    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_uninterp_type) :: var
    real(r8) :: data(3)
    logical, allocatable :: read_times(:)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_uninterp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    ! advance to the next year, which should force a read
    call dyn_file%time_info%set_current_year(13)

    call var%get_current_data(data)
    @assertEqual([7.0_r8, 8.0_r8, 9.0_r8], data)

    ! Make sure that the get_current_data call DID trigger i/o in this case:
    read_times = ncd_get_read_times(dyn_file, 'foo_1d')
    @assertTrue(read_times(3))
    @assertFalse(any(read_times([1,2,4])))

  end subroutine test_get_current_data_1d_doRead


  @Test
  subroutine test_get_current_data_2d()
    ! Test get_current_data_2d

    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_uninterp_type) :: var
    real(r8) :: data(2,3)
    real(r8) :: expected(2,3)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_uninterp_type( &
         dyn_file=dyn_file, &
         varname='foo_2d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &   ! setting this to false to avoid needing to set up the test data carefully
         data_shape = shape(data))

    call var%get_current_data(data)
    expected = reshape([7._r8,  8._r8,  9._r8, 10._r8, 11._r8, 12._r8], [2,3])
    @assertEqual(expected, data)

  end subroutine test_get_current_data_2d

end module test_dynVarTimeUninterp
