#!/usr/bin/env python

"""
build clm library
"""
import sys, os, time, filecmp, shutil

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib         import parse_input
from CIME.case             import Case
from CIME.utils            import run_cmd, expect
from CIME.build            import get_standard_makefile_args

logger = logging.getLogger(__name__)

###############################################################################
def _main_func():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)

    case = Case(caseroot)

    casebuild = case.get_value("CASEBUILD")
    casetools = case.get_value("CASETOOLS")
    gmake_j   = case.get_value("GMAKE_J")
    gmake     = case.get_value("GMAKE")
    mach      = case.get_value("MACH")

    #-------------------------------------------------------
    # create Filepath in bldroot
    #-------------------------------------------------------

    filesrc = os.path.join(casebuild, "clmconf", "Filepath")
    filedst = os.path.join(bldroot, "Filepath_tmp")
    shutil.copy(filesrc,filedst)

    filedst     = os.path.join(bldroot,"Filepath")
    filedst_tmp = os.path.join(bldroot,"Filepath_tmp")
    if os.path.isfile(filedst):
        if not filecmp.cmp(filedst_tmp, filedst):
            shutil.move(filedst_tmp, filedst)
    else:
        shutil.move(filedst_tmp, filedst)

    #-------------------------------------------------------
    # create the library in libroot
    #-------------------------------------------------------

    # Note that casebuild/clmconf/CCSM_cppdefs is created
    # by the call to clm's bld/configure in clm's cime_config/buildnml

    cppdefs_file = os.path.join(casebuild, "clmconf", "CCSM_cppdefs")
    user_cppdefs = ""
    with open(cppdefs_file, 'r') as f:
        cppdefs = f.readline()
        if cppdefs:
            user_cppdefs = cppdefs.rstrip()

    clm_config_opts = case.get_value("CLM_CONFIG_OPTS")
    complib = os.path.join(libroot,"libclm.a")
    if "clm4_0" in clm_config_opts:
        complib = os.path.join(libroot,"liblnd.a")
    makefile = os.path.join(casetools, "Makefile")
    macfile  = os.path.join(caseroot, "Macros.%s" % mach)
    make_args = get_standard_makefile_args(case)

    if user_cppdefs:
        cmd = "%s complib -j %d MODEL=clm COMPLIB=%s -f %s %s MACFILE=%s USER_CPPDEFS='%s'" \
            % (gmake, gmake_j, complib, makefile, make_args, macfile, user_cppdefs )
    else:
        cmd = "%s complib -j %d MODEL=clm COMPLIB=%s -f %s %s MACFILE=%s " \
            % (gmake, gmake_j, complib, makefile, make_args, macfile )
    rc, out, err = run_cmd(cmd)
    logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n"%(cmd,out,err))
    expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))

###############################################################################

if __name__ == "__main__":
    _main_func()

