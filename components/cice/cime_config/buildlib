#!/usr/bin/env python

"""
build cice library
"""
import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib         import parse_input
from CIME.case             import Case
from CIME.utils            import expect, run_bld_cmd_ensure_logging, safe_copy
from CIME.build            import get_standard_cmake_args

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################

    casebuild    = case.get_value("CASEBUILD")
    srcroot      = case.get_value("SRCROOT")
    gmake_j      = case.get_value("GMAKE_J")
    gmake        = case.get_value("GMAKE")
    cice_blckx   = case.get_value("CICE_BLCKX")
    cice_blcky   = case.get_value("CICE_BLCKY")
    cice_mxblcks = case.get_value("CICE_MXBLCKS")
    cppdefs      = case.get_value("CICE_CPPDEFS")
    cmake_args = get_standard_cmake_args(case)

    #-------------------------------------------------------
    # Create Filepath in $CASEBUILD/ciceconf
    #-------------------------------------------------------

    filepath_src = os.path.join(casebuild, "ciceconf", "Filepath")
    expect(os.path.exists(filepath_src), "Missing {}".format(filepath_src))
    safe_copy(filepath_src, bldroot)

    #-------------------------------------------------------
    # compute all cppdefs, unlike other components, ignores CCSM_cppdefs file
    #-------------------------------------------------------

    cppdefs += " -DBLCKX={} -DBLCKY={} -DMXBLCKS={}".format(cice_blckx, cice_blcky, cice_mxblcks)

    #-------------------------------------------------------
    # Build the library
    #-------------------------------------------------------

    run_bld_cmd_ensure_logging('cmake -DMODEL=cice -DCOMPLIB=ice -DUSER_CPPDEFS="{cppdefs}" {cmake_args} {srcroot}/components'.format(cppdefs=cppdefs, cmake_args=cmake_args, srcroot=srcroot), logger, from_dir=bldroot)
    run_bld_cmd_ensure_logging("{} -j {}".format(gmake, gmake_j), logger, from_dir=bldroot)

###############################################################################
def _main_func():
###############################################################################
    caseroot, libroot, bldroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, libroot, case)

###############################################################################

if __name__ == "__main__":
    _main_func()
