# Utility to create a test that compares two nc files
# Mandatory keyword arguments
#  - TEST_NAME: the name to be given to the test
#  - SRC_FILE: the name of the first nc file
#  - TGT_FILE: the name of the second nc file
# Optional keyword arguments
#  - LABELS: labels to attach to the created tests
#  - FIXTURES_REQUIRED: list of fixtures required
function(CompareNCFiles)
  # Parse keyword arguments
  set (options)
  set (args1v TEST_NAME SRC_FILE TGT_FILE)
  set (argsMv LABELS FIXTURES_REQUIRED)

  cmake_parse_arguments(PARSE "${options}" "${args1v}" "${argsMv}" ${ARGN})
  CheckMacroArgs(CompareNCFilesFamily PARSE "${options}" "${args1v}" "${argsMv}")

  # Sanity checks
  if (NOT PARSE_TEST_NAME)
    message ("Error! CompareNCFilesPair requires the keyword argument TEST_NAME")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_SRC_FILE)
    message ("Error! CompareNCFilesPair requires the keyword argument SRC_FILE")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_TGT_FILE)
    message ("Error! CompareNCFilesPair requires the keyword argument TGT_FILE")
    message (FATAL_ERROR "Aborting...")
  endif()

  add_test (
    NAME ${PARSE_TEST_NAME}
    COMMAND cmake -P ${CMAKE_BINARY_DIR}/bin/CprncTest.cmake ${PARSE_SRC_FILE} ${PARSE_TGT_FILE}
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

  # Set test properties, if needed
  if (PARSE_LABELS)
    set_tests_properties(${PARSE_TEST_NAME} PROPERTIES LABELS "${PARSE_LABELS}")
  endif()

  # Set test fixtures, if needed
  if (PARSE_FIXTURES_REQUIRED)
    set_tests_properties(${PARSE_TEST_NAME} PROPERTIES FIXTURES_REQUIRED "${PARSE_FIXTURES_REQUIRED}")
  endif()
endfunction()

# This function is a more complex version of the one above: it creates tests
# to compare a set of files, which differ in their name by a simple substring.
# For instance, files generated with a different choice of a parameter

# Mandatory keyword arguments
#  - TEST_META_NAME: the base name to be given to the tests generated by this macro
#  - FILE_META_NAME: the name of the files
#  - MAGIC_STRING  : the string that will be replaced with MAGIC_VALUES entries
#  - MAGIC_VALUES  : the values to be used to replace ${MAGIC_STRING}
# Optional keyword arguments
#  - LABELS: labels to attach to the created tests
#  - FIXTURES_REQUIRED: list of fixtures required
# Note:
#  - TEST_META_NAME and FILE_META_NAME *MUST* contain the MAGIC_STRING
#  - FIXTURES_REQUIRED *can* contain the MAGIC_STRING (but doesn't have to)
function (CompareNCFilesFamily)
  # Parse keyword arguments
  set (options)
  set (args1v TEST_META_NAME FILE_META_NAME MAGIC_STRING)
  set (argsMv MAGIC_VALUES LABELS FIXTURES_REQUIRED)

  cmake_parse_arguments(PARSE "${options}" "${args1v}" "${argsMv}" ${ARGN})
  CheckMacroArgs(CompareNCFilesFamily PARSE "${options}" "${args1v}" "${argsMv}")

  # Sanity checks
  if (NOT PARSE_TEST_META_NAME)
    message ("Error! CompareNCFilesFamily requires the keyword argument TEST_META_NAME")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_FILE_META_NAME)
    message ("Error! CompareNCFilesFamily requires the keyword argument FILE_META_NAME")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_MAGIC_STRING)
    message ("Error! CompareNCFilesFamily requires the keyword argument MAGIC_STRING")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_MAGIC_VALUES)
    message ("Error! CompareNCFilesFamily requires the keyword argument MAGIC_VALUES")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_TEST_META_NAME MATCHES ${PARSE_MAGIC_STRING})
    message ("Error! MAGIC_STRING not contained in TEST_META_NAME.")
    message (" MAGIC_STRING: ${PARSE_MAGIC_STRING}")
    message (" TEST_META_NAME: ${PARSE_TEST_META_NAME}")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_FILE_META_NAME MATCHES ${PARSE_MAGIC_STRING})
    message ("Error! MAGIC_STRING not contained in FILE_META_NAME.")
    message (" MAGIC_STRING: ${PARSE_MAGIC_STRING}")
    message (" FILE_META_NAME: ${PARSE_FILE_META_NAME}")
    message (FATAL_ERROR "Aborting...")
  endif()

  # Ensure cprnc is built
  include (BuildCprnc)
  BuildCprnc()

  # Remove first entry of magic values. Compare all other entries against this
  list (POP_FRONT PARSE_MAGIC_VALUES first)
  string (REPLACE "${PARSE_MAGIC_STRING}" "${first}" TGT_FILE ${PARSE_FILE_META_NAME})

  # FIXTURES_REQUIRED *can* also contain the magic string
  foreach (item IN LISTS PARSE_MAGIC_VALUES)
    # Expand the magic string in src file
    string (REPLACE ${PARSE_MAGIC_STRING} ${item} SRC_FILE ${PARSE_FILE_META_NAME})

    # Create the test. Also the test base name may contain the magic string
    string (REPLACE ${PARSE_MAGIC_STRING} ${item} TEST_NAME ${PARSE_TEST_META_NAME})

    add_test (
      NAME ${TEST_NAME}
      COMMAND cmake -P ${CMAKE_BINARY_DIR}/bin/CprncTest.cmake ${SRC_FILE} ${TGT_FILE}
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

    # Set test properties, if needed
    if (PARSE_LABELS)
      set_tests_properties(${TEST_NAME} PROPERTIES LABELS "${PARSE_LABELS}")
    endif()

    # Set test fixtures, if needed
    if (PARSE_FIXTURES_REQUIRED)
      set (TMP_LIST ${PARSE_FIXTURES_REQUIRED})
      list (TRANSFORM TMP_LIST REPLACE "${PARSE_MAGIC_STRING}" ${item})

      set_tests_properties(${TEST_NAME} PROPERTIES
        FIXTURES_REQUIRED "${TMP_LIST}")
    endif()
  endforeach()
endfunction (CompareNCFilesFamily)

# A version of the above tailored for PEM-like comparisons, where the family of NC files
# corresponds to runs using different number of MPI ranks
function (CompareNCFilesFamilyMpi)
  # Parse keyword arguments
  set (options)
  set (args1v TEST_BASE_NAME FILE_META_NAME)
  set (argsMv MPI_RANKS LABELS META_FIXTURES_REQUIRED)
  cmake_parse_arguments(PARSE "${options}" "${args1v}" "${argsMv}" ${ARGN})
  CheckMacroArgs(CompareNCFilesFamily PARSE "${options}" "${args1v}" "${argsMv}")

  if (NOT PARSE_TEST_BASE_NAME)
    message ("Error! CompareNCFilesFamilyMpi requires the keyword argument TEST_BASE_NAME")
    message (FATAL_ERROR "Aborting...")
  endif()

  # Grab the args for the MPI_RANKS range specs. This follows the same convention of CreateUnitTest:
  #  - 1 value: start==end
  #  - 2 values: <start> <end>
  #  - 3 values: <start> <end> <increment>
  list (LENGTH PARSE_MPI_RANKS NUM_MPI_RANK_ARGS)

  if (NUM_MPI_RANK_ARGS EQUAL 2)
    list (GET PARSE_MPI_RANKS 0 BEG)
    list (GET PARSE_MPI_RANKS 1 END)
    set (INC 1)
  elseif(NUM_MPI_RANK_ARGS EQUAL 3)
    list (GET PARSE_MPI_RANKS 0 BEG)
    list (GET PARSE_MPI_RANKS 1 END)
    list (GET PARSE_MPI_RANKS 2 INC)
  else()
    message ("CompareNCFilesFamilyMpi requires 2 or 3 values for the keyword argument MPI_RANKS")
    message ("  Input values: ${PARSE_MPI_RANKS}")
    message (FATAL_ERROR "Aborting...")
  endif()

  # Create the range
  CreateRange(MpiRanks ${BEG} ${END} ${INC})

  # The input META_FIXTURES_REQUIRED is a required argument, which *MUST* contain the "MPIRANKS" string.
  # We assume for each rank N, there is a test with FIXTURE_SETUP set to that string (with MPIRANKS=N).
  if (NOT PARSE_META_FIXTURES_REQUIRED)
    message ("Missing value for the mandatory META_FIXTURES_REQUIRED keyword argument.")
    message (FATAL_ERROR "Aborting...")
  endif()
  if (NOT PARSE_META_FIXTURES_REQUIRED MATCHES "MPIRANKS")
    message ("Error! MPIRANKS string not contained in META_FIXTURES_REQUIRED.")
    message (" META_FIXTURES_REQUIRED: ${META_FIXTURES_REQUIRED}")
    message (FATAL_ERROR "Aborting...")
  endif()

  # Each comparison is between rank=BEG and rank=N, so we need two fixtures, one of which
  # has a predefined value for MPIRANKS.
  string (REPLACE "MPIRANKS" ${BEG} REQUIRED_FIXTURES "${PARSE_META_FIXTURES_REQUIRED}")
  list (APPEND REQUIRED_FIXTURES "${PARSE_META_FIXTURES_REQUIRED}")

  # Call the function above
  CompareNCFilesFamily(
    TEST_META_NAME ${PARSE_TEST_BASE_NAME}_npMPIRANKS_vs_np${BEG}
    FILE_META_NAME ${PARSE_FILE_META_NAME}
    MAGIC_STRING "MPIRANKS"
    MAGIC_VALUES ${MpiRanks}
    LABELS ${PARSE_LABELS} PEM
    FIXTURES_REQUIRED ${REQUIRED_FIXTURES}
  )
endfunction()
