#! /usr/bin/env perl
use strict;
use File::Compare;

if ($#ARGV == -1) {
    die " ERROR pop.buildlib: must specify a caseroot input argument";
}
my ($CASEROOT) = @ARGV;
chdir "${CASEROOT}";

my $CASEBUILD			= `./xmlquery CASEBUILD			-value`;
my $SRCROOT			= `./xmlquery SRCROOT			-value`;
my $LIBROOT			= `./xmlquery LIBROOT			-value`;
my $OBJROOT			= `./xmlquery OBJROOT			-value`;
my $CASETOOLS			= `./xmlquery CASETOOLS			-value`;
my $OCN_GRID			= `./xmlquery OCN_GRID			-value`;
my $OCN_TRACER_MODULES		= `./xmlquery OCN_TRACER_MODULES	-value`;
my $GMAKE_J			= `./xmlquery GMAKE_J			-value`;
my $GMAKE			= `./xmlquery GMAKE			-value`;

if (! -d "$OBJROOT/ocn/obj" ) {
    my $sysmod = "mkdir -p $OBJROOT/ocn/obj";    
    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
}
if (! -d "$OBJROOT/ocn/source" ) {
    my $sysmod =  "mkdir -p $OBJROOT/ocn/source";
    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
}
if (! -d "$OBJROOT/ocn/input" ) { 
    my $sysmod = "mkdir -p $OBJROOT/ocn/input";
    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
}

chdir "${OBJROOT}/ocn/source";

print " -----------------------------------------------------------------\n";
print " Copy the necessary files into $OBJROOT/ocn/source \n";
print " -----------------------------------------------------------------\n";

my $sysmod = "cp -fp $SRCROOT/components/pop/source/*.F90  .";
system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";

my $sysmod = "cp -fp $SRCROOT/components/pop/mpi/*.F90  .";
system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";

my $sysmod = "cp -fp $SRCROOT/components/pop/drivers/cpl/*.F90 .";
system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";

# Two files require special attention because they get renamed when copied
# from either SourceMods/src.pop or input_templates/:
# ${OCN_GRID}_domain_size.F90       -> domain_size.F90
# ${OCN_GRID}_POP_DomainSizeMod.F90 -> POP_DomainSizeMod.F90
# (The latter is "needed during LANL merge transition")
#
# For these files:
# 1) Make sure SourceMods does not contain copies of the same file both
#    with and without the ${OCN_GRID}_ preface.

my $my_path = "$CASEROOT/SourceMods/src.pop";

if ((-f "${my_path}/domain_size.F90") && (-f "${my_path}/${OCN_GRID}_domain_size.F90")) {
    die "ERROR: you can not have both domain_size.F90 and ${OCN_GRID}_domain_size.F90 in SourceMods/src.pop/";
}
if ((-f "${my_path}/POP_DomainSizeMod.F90") && (-f "${my_path}/${OCN_GRID}_POP_DomainSizeMod.F90")) {
    die "ERROR: you can not have both POP_DomainSizeMod.F90 and ${OCN_GRID}_POP_DomainSizeMod.F90 in SourceMods/src.pop/"
}

my $POP_FOUND_d_s = 0;
my $POP_FOUND_POP_DSM = 0;

# 1) Copy (with name-change) from input templates/ if they exist

if (-f  "$SRCROOT/components/pop/input_templates/${OCN_GRID}_domain_size.F90" ) {
    my $sysmod = "cp -fp $SRCROOT/components/pop/input_templates/${OCN_GRID}_domain_size.F90 domain_size.F90";
    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
    $POP_FOUND_d_s = 1;
}
if (-f "$SRCROOT/components/pop/input_templates/${OCN_GRID}_POP_DomainSizeMod.F90") {
    my $sysmod = "cp -fp $SRCROOT/components/pop/input_templates/${OCN_GRID}_POP_DomainSizeMod.F90 POP_DomainSizeMod.F90";
    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
    $POP_FOUND_POP_DSM = 1;
}

# 2) Copy everything from SourceMods over
# If domain_size.F90 or POP_DomainSizeMod.F90 exist, they should overwrite 
# anything copied from from input_templates/

if (-d "$my_path" ) {
    my $sysmod = "cp -fp $my_path/*.F90 .";
    system($sysmod) == 0 or warn "WARNING: pop.buidexe $sysmod failed: $?\n";
}
if (-f  "${my_path}/domain_size.F90" ) {
    $POP_FOUND_d_s = 1;
}
if (-f "${my_path}/POP_DomainSizeMod.F90") {
    $POP_FOUND_POP_DSM = 1;
}

# 3) If SourceMods/ contains ${OCN_GRID}_domain_size.F90 or
#    ${OCN_GRID}_POP_DomainSizeMod.F90, those files will now exist in the
#    current directory and need to be renamed

if (-f  "${OCN_GRID}_domain_size.F90" ) {
    my $sysmod = "mv -f ${OCN_GRID}_domain_size.F90 domain_size.F90";
    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
    $POP_FOUND_d_s = 1;
}
if (-f "${OCN_GRID}_POP_DomainSizeMod.F90") {
    my $sysmod = "mv -f ${OCN_GRID}_POP_DomainSizeMod.F90 POP_DomainSizeMod.F90";
    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
    $POP_FOUND_POP_DSM = 1;
}

# 4) Make sure both domain_size.F90 and POP_DomainSizeMod.F90 exist for the
#    specified grid

if (${POP_FOUND_d_s} == 0) {
    die "ERROR: you need either ${OCN_GRID}_domain_size.F90 or domain_size.F90";
}
if (${POP_FOUND_POP_DSM} == 0) {
    die "ERROR: you need either ${OCN_GRID}_POP_DomainSizeMod.F90 or POP_DomainSizeMod.F90";
}

print " ------------------------------------------------------------------------- \n";
print " Checking for any auxilliary ocean-component models before building pop   \n";
print " For now - only looking for moby component \n";
print " ------------------------------------------------------------------------- \n";

foreach my $comp ($OCN_TRACER_MODULES) {
    if ("$comp" =~ 'moby') {
	print " ------------------------------------------------------------------------- \n";
	print "  Building moby \n";
	print " ------------------------------------------------------------------------- \n";

	chdir "$CASEBUILD";
	if (! -f "moby.buildlib") {
	    my $sysmod = "cp $SRCROOT/components/pop/aux/moby/pop/bld/moby.buildlib.csh .";
	    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
	}
	my $sysmod = "./moby.buildlib";
	system($sysmod) == 0 or die "ERROR: pop.buildlib $sysmod failed: $?\n";
    }
}

#-------------------------------------------------------------- 
#  force gmake to recompile if any of the cppdefs are different 
#-------------------------------------------------------------- 
my $recompile = 'FALSE';
if (-e "$OBJROOT/ocn/obj/POP_cppdefs") {
    if (compare("$OBJROOT/ocn/obj/POP_cppdefs.new", "$OBJROOT/ocn/obj/POP_cppdefs") != 0) {
	$recompile = 'TRUE'; 
    }
    # NOTE - the following remove statements are what force pop to recompile if
    # the cppdefs are different
    print "recompile is $recompile \n";
    if ($recompile eq 'TRUE') {
	my $sysmod = "rm -f $OBJROOT/ocn/obj/*.o";
	system($sysmod) == 0 or die "ERROR pop.buildlib: $sysmod failed: $?\n";
    }
}
my $sysmod = "cp -f $OBJROOT/ocn/obj/POP_cppdefs.new $OBJROOT/ocn/obj/POP_cppdefs";
system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";

chdir $CASEROOT;
my $cppdefs = `./xmlquery POP_CPPDEFS -value`;
chomp($cppdefs);

print " ----------------------------------------------------------------- \n";
print "  Build pop library \n";
print " ----------------------------------------------------------------- \n";

chdir "${OBJROOT}/ocn/obj";
open(file,">Filepath") or die "Could not open file Filepath to write";
print file "$OBJROOT/ocn/source \n";
close(file);

chdir "${OBJROOT}/ocn/obj";
my $sysmod = "$GMAKE complib -j $GMAKE_J MODEL=pop COMPLIB=$LIBROOT/libocn.a USER_CPPDEFS=\"$cppdefs\" -f $CASETOOLS/Makefile"; 
system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";

print " \n";
print " ---------------------------------------------------------------------------- \n";
print "  Note that f90 files may not exist on all machines \n";
print " ---------------------------------------------------------------------------- \n";
    
my $f90_dir = "$OBJROOT/ocn/source/f90";
if (! -d  "$f90_dir" ) {
    my $sysmod = "mkdir -p $f90_dir";
    system($sysmod) == 0 or die "ERROR: pop.buidexe $sysmod failed: $?\n";
}
my $sysmod = "mv -f *.f90 $f90_dir";

if (! -f "$LIBROOT/libocn.a") {
    die "ERROR: pop library not available"
}

print "  \n";
print " ------------------------------------------------------------------------- \n";
print "  Successful completion of the pop executable building process \n";
print " ------------------------------------------------------------------------- \n";

exit(0);
