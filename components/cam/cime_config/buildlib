#! /usr/bin/env python

import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.utils import expect, run_bld_cmd_ensure_logging, safe_copy
from CIME.build import get_standard_cmake_args
from CIME.case import Case
from CIME.buildlib import parse_input

logger = logging.getLogger(__name__)

###############################################################################
def buildlib(bldroot, installpath, case):
###############################################################################
    casebuild  = case.get_value("CASEBUILD")
    srcroot    = case.get_value("SRCROOT")
    gmake_j    = case.get_value("GMAKE_J")
    gmake      = case.get_value("GMAKE")
    cmake_args = get_standard_cmake_args(case)

    filepath_src = os.path.join(casebuild, "camconf", "Filepath")
    expect(os.path.exists(filepath_src), "Missing {}".format(filepath_src))
    safe_copy(filepath_src, bldroot)

    with open(os.path.join(casebuild, "camconf", "CCSM_cppdefs"), "r") as fd:
        camdefs = fd.read().strip()

    run_bld_cmd_ensure_logging('cmake -DMODEL=cam -DCOMPLIB=atm -DUSER_CPPDEFS="{camdefs}" {cmake_args} {srcroot}/components'.format(camdefs=camdefs, cmake_args=cmake_args, srcroot=srcroot), logger, from_dir=bldroot)
    run_bld_cmd_ensure_logging("{} -j {}".format(gmake, gmake_j), logger, from_dir=bldroot)

###############################################################################
def _main(argv, documentation):
###############################################################################
    caseroot, libroot, bldroot = parse_input(sys.argv)
    with Case(caseroot, read_only=False) as case:
        buildlib(bldroot, libroot, case)

if (__name__ == "__main__"):
    _main(sys.argv, __doc__)
