! Copyright (c) 2013,  Los Alamos National Security, LLC (LANS)
! and the University Corporation for Atmospheric Research (UCAR).
!
! Unless noted otherwise source code is licensed under the BSD license.
! Additional copyright and license information can be found in the LICENSE file
! distributed with this code, or at http://mpas-dev.github.com/license.html
!
!|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
!
!  ocn_time_integration_rk4
!
!> \brief MPAS ocean RK4 Time integration scheme
!> \author Mark Petersen, Doug Jacobsen, Todd Ringler
!> \date   September 2011
!> \details
!>  This module contains the RK4 time integration routine.
!
!-----------------------------------------------------------------------

module ocn_time_integration_rk4

   use mpas_derived_types
   use mpas_pool_routines
   use mpas_constants
   use mpas_dmpar
   use mpas_threading
   use mpas_vector_reconstruction
   use mpas_spline_interpolation
   use mpas_timer

   use ocn_constants
   use ocn_tendency
   use ocn_diagnostics
   use ocn_diagnostics_variables
   use ocn_gm
   use ocn_two_equation_model

   use ocn_compute_nonhydrostatic_pressure
   use ocn_equation_of_state
   use ocn_vmix
   use ocn_time_average_coupled
   use ocn_wetting_drying

   use ocn_effective_density_in_land_ice
   use ocn_transport_tests

   implicit none
   private
   save

   !--------------------------------------------------------------------
   !
   ! Public parameters
   !
   !--------------------------------------------------------------------

   !--------------------------------------------------------------------
   !
   ! Public member functions
   !
   !--------------------------------------------------------------------

   public :: ocn_time_integrator_rk4

   contains

!|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
!
!  ocn_time_integrator_rk4
!
!> \brief MPAS ocean RK4 Time integration scheme
!> \author Mark Petersen, Doug Jacobsen, Todd Ringler
!> \date   September 2011
!> \details
!>  This routine integrates one timestep (dt) using an RK4 time integrator.
!
!-----------------------------------------------------------------------

   subroutine ocn_time_integrator_rk4(domain, dt)!{{{
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   ! Advance model state forward in time by the specified time step using
   !   4th order Runge-Kutta
   !
   ! Input: domain - current model state in time level 1 (e.g., time_levs(1)state%h(:,:))
   !                 plus mesh meta-data
   ! Output: domain - upon exit, time level 2 (e.g., time_levs(2)%state%h(:,:)) contains
   !                  model state advanced forward in time by dt seconds
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      implicit none

      type (domain_type), intent(inout) :: domain !< Input/Output: domain information
      real (kind=RKIND), intent(in) :: dt !< Input: timestep

      integer :: iCell, iEdge, k, i, err
      type (block_type), pointer :: block

      type (mpas_pool_type), pointer :: tendPool
      type (mpas_pool_type), pointer :: tracersTendPool
      type (mpas_pool_type), pointer :: statePool
      type (mpas_pool_type), pointer :: tracersPool
      type (mpas_pool_type), pointer :: meshPool
      type (mpas_pool_type), pointer :: diagnosticsPool
      type (mpas_pool_type), pointer :: provisStatePool
      type (mpas_pool_type), pointer :: provisTracersPool
      type (mpas_pool_type), pointer :: verticalMeshPool
      type (mpas_pool_type), pointer :: forcingPool
      type (mpas_pool_type), pointer :: scratchPool
      type (mpas_pool_type), pointer :: swForcingPool

      integer :: rk_step

      type (dm_info) :: dminfo
      type (mpas_pool_type), pointer :: nextProvisPool, prevProvisPool

      real (kind=RKIND), dimension(4) :: rk_weights, rk_substep_weights

      real (kind=RKIND) :: coef
      real (kind=RKIND), dimension(:,:), pointer :: &
        vertViscTopOfEdge, vertDiffTopOfCell

      ! Dimensions
      integer, pointer :: nCells, nEdges, nVertLevels, num_tracers

      ! Config options
      logical, pointer :: config_prescribe_velocity, config_prescribe_thickness
      logical, pointer :: config_filter_btr_mode, config_use_freq_filtered_thickness
      logical, pointer :: config_use_GM
      logical, pointer :: config_use_cvmix_kpp
      logical, pointer :: config_use_tracerGroup
      logical, pointer :: config_disable_thick_all_tend
      logical, pointer :: config_disable_vel_all_tend
      logical, pointer :: config_disable_tr_all_tend
      real (kind=RKIND), pointer :: config_mom_del4
      real (kind=RKIND), pointer :: config_drying_min_cell_height
      logical, pointer :: config_use_wetting_drying
      logical, pointer :: config_verify_not_dry
      logical, pointer :: config_prevent_drying
      logical, pointer :: config_zero_drying_velocity
      logical, pointer :: config_enable_nonhydrostatic_mode
      logical, pointer :: config_use_two_equation_turbulence_model
      logical, pointer :: config_enable_vertMomentum_disable_nonHydro
      character (len=StrKIND), pointer :: config_land_ice_flux_mode

      ! State indices
      integer, pointer :: indexTemperature
      integer, pointer :: indexSalinity

      ! Diagnostics Indices

      ! Mesh array pointers
      integer, dimension(:), pointer :: minLevelCell, maxLevelCell, maxLevelEdgeTop
      real (kind=RKIND), dimension(:), pointer :: bottomDepth

      ! Provis Array Pointers
      real (kind=RKIND), dimension(:,:), pointer :: normalVelocityProvis, layerThicknessProvis
      real (kind=RKIND), dimension(:,:), pointer :: highFreqThicknessProvis
      real (kind=RKIND), dimension(:,:), pointer :: lowFreqDivergenceProvis
      real (kind=RKIND), dimension(:,:), pointer :: verticalVelocityProvis
      real (kind=RKIND), dimension(:,:,:), pointer :: tracersGroupProvis
      real (kind=RKIND), dimension(:,:), pointer :: tkeProvis
      real (kind=RKIND), dimension(:,:), pointer :: glsPsiProvis

      ! Tend Array Pointers
      real (kind=RKIND), dimension(:,:), pointer :: highFreqThicknessTend, lowFreqDivergenceTend, normalVelocityTend, &
                                                    layerThicknessTend, verticalVelocityTend
      real (kind=RKIND), dimension(:,:,:), pointer :: tracersGroupTend

      ! State Array Pointers
      real (kind=RKIND), dimension(:,:), pointer :: normalVelocityCur, normalVelocityNew
      real (kind=RKIND), dimension(:,:), pointer :: verticalVelocityCur, verticalVelocityNew
      real (kind=RKIND), dimension(:,:), pointer :: tkeNew, tkeCur, glsPsiNew, glsPsiCur
      real (kind=RKIND), dimension(:,:), pointer :: layerThicknessCur, layerThicknessNew
      real (kind=RKIND), dimension(:,:), pointer :: highFreqThicknessCur, highFreqThicknessNew
      real (kind=RKIND), dimension(:,:), pointer :: lowFreqDivergenceCur, lowFreqDivergenceNew
      real (kind=RKIND), dimension(:,:), pointer :: nonhydrostaticPressure, nonhydrostaticPressureOld

      real (kind=RKIND), dimension(:), pointer :: sshCur, sshNew

      real (kind=RKIND), dimension(:,:,:), pointer :: tracerGroup, tracersCur, tracersNew

      ! Diagnostics Field Pointers
      type (field1DReal), pointer :: boundaryLayerDepthField, effectiveDensityField
      type (field2DReal), pointer :: normalizedRelativeVorticityEdgeField, divergenceField, relativeVorticityField

      ! State/Tend Field Pointers
      type (field2DReal), pointer :: normalVelocityField, layerThicknessField
      type (field3DReal), pointer :: tracersGroupField

      ! Tracer Group Iteartion
      type (mpas_pool_iterator_type) :: groupItr
      character (len=StrKIND) :: modifiedGroupName
      character (len=StrKIND) :: configName

      ! Tidal boundary condition
      logical, pointer :: config_use_tidal_forcing
      character (len=StrKIND), pointer :: config_tidal_forcing_type
      real (kind=RKIND), dimension(:), pointer :: tidalInputMask, tidalBCValue
      real (kind=RKIND), dimension(:,:), pointer :: restingThickness
      real (kind=RKIND) :: totalDepth

      ! Get config options
      call mpas_pool_get_config(domain % configs, 'config_mom_del4', config_mom_del4)
      call mpas_pool_get_config(domain % configs, 'config_filter_btr_mode', config_filter_btr_mode)
      call mpas_pool_get_config(domain % configs, 'config_prescribe_velocity', config_prescribe_velocity)
      call mpas_pool_get_config(domain % configs, 'config_prescribe_thickness', config_prescribe_thickness)
      call mpas_pool_get_config(domain % configs, 'config_use_freq_filtered_thickness', config_use_freq_filtered_thickness)
      call mpas_pool_get_config(domain % configs, 'config_use_GM', config_use_GM)
      call mpas_pool_get_config(domain % configs, 'config_use_cvmix_kpp', config_use_cvmix_kpp)
      call mpas_pool_get_config(domain % configs, 'config_land_ice_flux_mode', config_land_ice_flux_mode)
      call mpas_pool_get_config(domain % configs, 'config_disable_vel_all_tend', config_disable_vel_all_tend)
      call mpas_pool_get_config(domain % configs, 'config_disable_thick_all_tend', config_disable_thick_all_tend)
      call mpas_pool_get_config(domain % configs, 'config_disable_tr_all_tend', config_disable_tr_all_tend)
      call mpas_pool_get_config(domain % configs, 'config_use_wetting_drying', config_use_wetting_drying)
      call mpas_pool_get_config(domain % configs, 'config_prevent_drying', config_prevent_drying)
      call mpas_pool_get_config(domain % configs, 'config_verify_not_dry', config_verify_not_dry)
      call mpas_pool_get_config(domain % configs, 'config_drying_min_cell_height', config_drying_min_cell_height)
      call mpas_pool_get_config(domain % configs, 'config_zero_drying_velocity', config_zero_drying_velocity)
      call mpas_pool_get_config(domain % configs, 'config_use_tidal_forcing', config_use_tidal_forcing)
      call mpas_pool_get_config(domain % configs, 'config_tidal_forcing_type', config_tidal_forcing_type)
      call mpas_pool_get_config(domain % configs, 'config_enable_nonhydrostatic_mode', config_enable_nonhydrostatic_mode)
      call mpas_pool_get_config(domain % configs, 'config_use_two_equation_turbulence_model', config_use_two_equation_turbulence_model)
      call mpas_pool_get_config(domain % configs, 'config_enable_vertMomentum_disable_nonHydro', config_enable_vertMomentum_disable_nonHydro)

      !
      ! Initialize time_levs(2) with state at current time
      ! Initialize first RK state
      ! Couple tracers time_levs(2) with layerThickness in time-levels
      ! Initialize RK weights
      !
      block => domain % blocklist
      do while (associated(block))
         call mpas_pool_get_subpool(block % structs, 'state', statePool)
         call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)
         call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
         call mpas_pool_get_subpool(block % structs, 'diagnostics', diagnosticsPool)

         call mpas_pool_create_pool(provisStatePool)

         call mpas_pool_clone_pool(statePool, provisStatePool, 1)
         call mpas_pool_add_subpool(block % structs, 'provis_state', provisStatePool)

         call mpas_pool_get_dimension(block % dimensions, 'nCells', nCells)
         call mpas_pool_get_dimension(block % dimensions, 'nEdges', nEdges)

         call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
         call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityNew, 2)
         call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
         call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessNew, 2)

         if(config_enable_nonhydrostatic_mode) then
            call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocityCur, 1)
            call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocityNew, 2)
         end if

         if(config_use_two_equation_turbulence_model) then
            call mpas_pool_get_array(statePool, 'tke', tkeNew, 2)
            call mpas_pool_get_array(statePool, 'tke', tkeCur, 1)
            call mpas_pool_get_array(statePool, 'glsPsi', glsPsiNew, 2)
            call mpas_pool_get_array(statePool, 'glsPsi', glsPsiCur, 1)
         end if

         call mpas_pool_get_array(statePool, 'highFreqThickness', highFreqThicknessCur, 1)
         call mpas_pool_get_array(statePool, 'highFreqThickness', highFreqThicknessNew, 2)
         call mpas_pool_get_array(statePool, 'lowFreqDivergence', lowFreqDivergenceCur, 1)
         call mpas_pool_get_array(statePool, 'lowFreqDivergence', lowFreqDivergenceNew, 2)

         call mpas_pool_get_array(meshPool, 'maxLevelCell', maxLevelCell)
         call mpas_pool_get_array(meshPool, 'maxLevelEdgeTop', maxLevelEdgeTop)

         ! Lower k-loop limit of 1 rather than minLevel* needed in *New = *Cur
         ! assignments below are needed to maintain bit-for-bit results

         !$omp parallel
         !$omp do schedule(runtime) private(k)
         do iEdge = 1, nEdges
            do k = 1, maxLevelEdgeTop(iEdge)
               normalVelocityNew(k, iEdge) = normalVelocityCur(k, iEdge)
            end do
         end do
         !$omp end do

         !$omp do schedule(runtime) private(k)
         do iCell = 1, nCells
            do k = 1, maxLevelCell(iCell)
               layerThicknessNew(k, iCell) = layerThicknessCur(k, iCell)
            end do
         end do
         !$omp end do
         !$omp end parallel

         if(config_enable_nonhydrostatic_mode) then
           !$omp parallel
           !$omp do schedule(runtime) private(k)
           do iCell = 1, nCells
              do k = 1, maxLevelCell(iCell)
                 verticalVelocityNew(k,iCell) = verticalVelocityCur(k, iCell)
              end do
           end do
           !$omp end do
           !$omp end parallel
         end if

         if(config_use_two_equation_turbulence_model) then
            !$omp parallel
            !$omp do schedule(runtime) private(k)
            do iCell = 1, nCells
               do k = 1, maxLevelCell(iCell)
                  tkeNew(k,iCell) = tkeCur(k,iCell)
               end do
            end do
            !$omp end do
            !$omp end parallel

            if(.not. config_LES_mode) then
               !$omp parallel
               !$omp do schedule(runtime) private(k)
               do iCell = 1, nCells
                  do k = 1, maxLevelCell(iCell)
                     glsPsiNew(k,iCell) = glsPsiCur(k,iCell)
                  end do
               end do
               !$omp end do
               !$omp end parallel
            end if
         end if

         call mpas_pool_begin_iteration(tracersPool)
         do while ( mpas_pool_get_next_member(tracersPool, groupItr) )

            if ( groupItr % memberType == MPAS_POOL_FIELD ) then

               call mpas_pool_get_array(tracersPool, trim(groupItr % memberName), tracersCur, 1)
               call mpas_pool_get_array(tracersPool, trim(groupItr % memberName), tracersNew, 2)

               if ( associated(tracersCur) .and. associated(tracersNew) ) then
                  !$omp parallel
                  !$omp do schedule(runtime) private(k)
                  do iCell = 1, nCells  ! couple tracers to thickness
                     do k = 1, maxLevelCell(iCell)
                        tracersNew(:, k, iCell) = tracersCur(:, k, iCell) * layerThicknessCur(k, iCell)
                     end do
                  end do
                  !$omp end do
                  !$omp end parallel
               end if
            end if
         end do

         if (associated(highFreqThicknessCur)) then
              !$omp parallel
              !$omp do schedule(runtime)
              do iCell = 1, nCells
                 highFreqThicknessNew(:, iCell) = highFreqThicknessCur(:, iCell)
              end do
              !$omp end do
              !$omp end parallel
         end if

         if (associated(lowFreqDivergenceCur)) then
              !$omp parallel
              !$omp do schedule(runtime)
              do iCell = 1, nCells
                 lowFreqDivergenceNew(:, iCell) = lowFreqDivergenceCur(:, iCell)
              end do
              !$omp end do
              !$omp end parallel
         end if

         block => block % next
      end do

      block => domain % blocklist
      do while(associated(block))
         if (associated(block % prev)) then
            call mpas_pool_get_subpool(block % prev % structs, 'provis_state', prevProvisPool)
         else
            nullify(prevProvisPool)
         end if

         if (associated(block % next)) then
            call mpas_pool_get_subpool(block % next % structs, 'provis_state', nextProvisPool)
         else
            nullify(nextProvisPool)
         end if

         call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)

         if (associated(prevProvisPool) .and. associated(nextProvisPool)) then
            call mpas_pool_link_pools(provisStatePool, prevProvisPool, nextProvisPool)
         else if (associated(prevProvisPool)) then
            call mpas_pool_link_pools(provisStatePool, prevProvisPool)
         else if (associated(nextProvisPool)) then
            call mpas_pool_link_pools(provisStatePool, nextPool=nextProvisPool)
         else
            call mpas_pool_link_pools(provisStatePool)
         end if

         call mpas_pool_link_parinfo(block, provisStatePool)

         block => block % next
      end do

      ! Fourth-order Runge-Kutta, solving dy/dt = f(t,y) is typically written as follows
      ! where h = delta t is the large time step.  Here f(t,y) is the right hand side,
      ! called the tendencies in the code below.
      ! k_1 = h f(t_n        , y_n)
      ! k_2 = h f(t_n + 1/2 h, y_n + 1/2 k_1)
      ! k_3 = h f(t_n + 1/2 h, y_n + 1/2 k_2)
      ! k_4 = h f(t_n +     h, y_n +     k_3)
      ! y_{n+1} = y_n + 1/6 k_1 + 1/3 k_2 + 1/3 k_3 + 1/6 k_4

      ! in index notation:
      ! k_{j+1} = h f(t_n + a_j h, y_n + a_j k_j)
      ! y_{n+1} = y_n + sum ( b_j k_j )

      ! The coefficients of k_j are b_j = (1/6, 1/3, 1/3, 1/6) and are
      ! initialized here as delta t * b_j:

      rk_weights(1) = dt/6.
      rk_weights(2) = dt/3.
      rk_weights(3) = dt/3.
      rk_weights(4) = dt/6.

      ! The a_j coefficients of h in the computation of k_j are typically written (0, 1/2, 1/2, 1).
      ! However, in the algorithm below we pre-compute the state for the tendency one iteration early.
      ! That is, on j=1 (rk_step=1, below) we pre-compute y_n + 1/2 k_1 and save it in provis_state.
      ! Then we compute 1/6 k_1 and add it to state % time_levs(2).
      ! That is why the coefficients of h are one index early in the following, i.e.
      ! a = (1/2, 1/2, 1)

      rk_substep_weights(1) = dt/2.
      rk_substep_weights(2) = dt/2.
      rk_substep_weights(3) = dt
      rk_substep_weights(4) = dt ! a_4 only used for ALE step, otherwise it is skipped.

      call mpas_timer_start("RK4-main loop")

      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      ! BEGIN RK loop
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      do rk_step = 1, 4

        if (config_disable_thick_all_tend .and. config_disable_vel_all_tend .and. config_disable_tr_all_tend) then
          exit ! don't compute in loop meant to update velocity, thickness, and tracers
        end if

        if (config_transport_tests_flow_id > 0) then
          ! This is a transport test. Write advection velocity from prescribed
          ! flow field.
          call ocn_transport_test_velocity(meshPool, daysSinceStartOfSim, &
            rk_substep_weights(rk_step), normalVelocityNew)
        endif


        ! Update halos for diagnostic variables.
        if (config_use_cvmix_kpp) then
           call mpas_timer_start("RK4-boundary layer depth halo update")
           call mpas_dmpar_field_halo_exch(domain, 'boundaryLayerDepth')
           call mpas_timer_stop("RK4-boundary layer depth halo update")
        end if


        call mpas_timer_start("RK4-diagnostic halo update")


        call mpas_dmpar_field_halo_exch(domain, 'normalizedRelativeVorticityEdge')
        if (config_mom_del4 > 0.0_RKIND) then
           call mpas_dmpar_field_halo_exch(domain, 'divergence')
           call mpas_dmpar_field_halo_exch(domain, 'relativeVorticity')
        end if
        call mpas_timer_stop("RK4-diagnostic halo update")

        ! Compute tendencies for high frequency thickness
        ! In RK4 notation, we are computing the right hand side f(t,y),
        ! which is the same as k_j / h.

        if (config_use_freq_filtered_thickness) then
           call mpas_timer_start("RK4-tendency computations")

           block => domain % blocklist
           do while (associated(block))
              call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
              call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
              call mpas_pool_get_subpool(block % structs, 'state', statePool)
              call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)
              call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)

              call ocn_tend_freq_filtered_thickness(tendPool, provisStatePool, 1)
              block => block % next
           end do

           call mpas_timer_stop("RK4-tendency computations")

           call mpas_timer_start("RK4-prognostic halo update")

           call mpas_dmpar_field_halo_exch(domain, 'tendHighFreqThickness')
           call mpas_dmpar_field_halo_exch(domain, 'tendLowFreqDivergence')

           call mpas_timer_stop("RK4-prognostic halo update")


           ! Compute next substep state for high frequency thickness.
           ! In RK4 notation, we are computing y_n + a_j k_j.
           block => domain % blocklist
           do while (associated(block))
              call mpas_pool_get_subpool(block % structs, 'state', statePool)
              call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)
              call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
              call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)

              call mpas_pool_get_array(statePool, 'highFreqThickness', highFreqThicknessCur, 1)
              call mpas_pool_get_array(provisStatePool, 'highFreqThickness', highFreqThicknessProvis, 1)
              call mpas_pool_get_array(tendPool, 'highFreqThickness', highFreqThicknessTend)

              call mpas_pool_get_dimension(block % dimensions, 'nCells', nCells)

              !$omp parallel
              !$omp do schedule(runtime)
              do iCell = 1, nCells
                 highFreqThicknessProvis(:, iCell) = highFreqThicknessCur(:, iCell) + rk_substep_weights(rk_step) &
                    * highFreqThicknessTend(:, iCell)
              end do
              !$omp end do
              !$omp end parallel
              block => block % next
           end do

        endif

        ! require that cells don't dry out
        if (config_use_wetting_drying) then
             call mpas_timer_start("RK4-prevent drying")

             ! compute wetting velocity to prevent drying of cell (sets up start of next iterate to not dry)
             if (config_prevent_drying) then
               block => domain % blocklist
                 do while (associated(block))
                   call ocn_prevent_drying_rk4(block, dt, rk_substep_weights(rk_step), config_zero_drying_velocity, err)
                   block => block % next
                 end do
               ! exchange fields for parallelization
               call mpas_pool_get_field(statePool, 'normalVelocity', normalVelocityField, 1)
               call mpas_dmpar_exch_halo_field(normalVelocityField)
               call mpas_dmpar_exch_halo_field(wettingVelocityField)
             end if

             call mpas_timer_stop("RK4-prevent drying")
        end if

        !FIXME - LVR - ALE is not working with non hydrostatic, for now implement switch to disable
        ! Compute tendencies for velocity, thickness, and tracers.
        ! In RK4 notation, we are computing the right hand side f(t,y),
        ! which is the same as k_j / h.
        call mpas_timer_start("RK4 vel/thick tendency computations")
        block => domain % blocklist
        do while (associated(block))
           call ocn_time_integrator_rk4_compute_vel_tends( block, dt, rk_substep_weights(rk_step), err )

           if(.not. config_disable_ALE) then
           call ocn_time_integrator_rk4_compute_thick_tends( block, dt, rk_substep_weights(rk_step), err )
         endif
           block => block % next
        end do
        call mpas_timer_stop("RK4 vel/thick tendency computations")

        if (config_enable_nonhydrostatic_mode) then
           call mpas_timer_start("RK4 vvel tendency computations")
           block => domain % blocklist
           do while (associated(block))
              call ocn_time_integrator_rk4_compute_vvel_tends( block, dt, rk_substep_weights(rk_step), err )
              block => block % next
           end do
           call mpas_timer_stop("RK4 vvel tendency computations")
        end if
        if (config_use_two_equation_turbulence_model) then
           call mpas_timer_start("RK4 tke psi tendency computations")
           block => domain % blocklist
           do while (associated(block))
             call ocn_time_integrator_rk4_compute_tke_psi_tends( block, dt, rk_substep_weights(rk_step), err )
             block => block % next
           end do
           call mpas_timer_stop("RK4 tke psi tendency computations")
        end if
        ! Update halos for prognostic variables.

        call mpas_timer_start("RK4 vel/thick prognostic halo update")

        call mpas_dmpar_field_halo_exch(domain, 'tendNormalVelocity')
        call mpas_dmpar_field_halo_exch(domain, 'tendLayerThickness')
        call mpas_dmpar_field_halo_exch(domain, 'tendVerticalVelocity')
        call mpas_dmpar_field_halo_exch(domain, 'tendTKE')
        call mpas_dmpar_field_halo_exch(domain, 'tendglsPsi')

        call mpas_timer_stop("RK4 vel/thick prognostic halo update")

        call mpas_timer_start("RK4 tracer tendency computations")

        block => domain % blocklist
        do while (associated(block))
           call ocn_time_integrator_rk4_compute_tracer_tends( block, dt, rk_substep_weights(rk_step), err )
           block => block % next
        end do

        call mpas_timer_stop("RK4 tracer tendency computations")

        call mpas_timer_start("RK4 tracer prognostic halo update")

        call mpas_pool_get_subpool(domain % blocklist % structs, 'tend', tendPool)
        call mpas_pool_get_subpool(tendPool, 'tracersTend', tracersTendPool)

        call mpas_pool_begin_iteration(tracersTendPool)
        do while ( mpas_pool_get_next_member(tracersTendPool, groupItr) )
           if ( groupItr % memberType == MPAS_POOL_FIELD ) then
              call mpas_dmpar_field_halo_exch(domain, trim(groupItr % memberName))
           end if
        end do

        call mpas_timer_stop("RK4 tracer prognostic halo update")

        ! Compute next substep state for velocity, thickness, and tracers.
        ! In RK4 notation, we are computing y_n + a_j k_j.

        call mpas_timer_start("RK4-update diagnostic variables")

        if (rk_step < 4) then
           block => domain % blocklist
           do while (associated(block))
              call ocn_time_integrator_rk4_diagnostic_update(block, dt, rk_substep_weights(rk_step), err)
              block => block % next
           end do
        end if

        call mpas_timer_stop("RK4-update diagnostic variables")

        ! Accumulate update.
        ! In RK4 notation, we are computing b_j k_j and adding it to an accumulating sum so that we have
        !    y_{n+1} = y_n + sum ( b_j k_j )
        ! after the fourth iteration.

        call mpas_timer_start("RK4-accumulate update")

        block => domain % blocklist
        do while (associated(block))
           call ocn_time_integrator_rk4_accumulate_update(block, rk_weights(rk_step), err)

           block => block % next
        end do

        call mpas_timer_stop("RK4-accumulate update")

      end do
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
      ! END RK loop
      !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

      ! verify that cells are not dry at conclusion of time step
      if (config_use_wetting_drying) then
        call mpas_timer_start("RK4- check wet cells")

        ! ensure existing layerThickness is valid
        if (config_verify_not_dry) then
          block => domain % blocklist
            do while (associated(block))
              call ocn_wetting_drying_verify(block, config_drying_min_cell_height, err)
              block => block % next
            end do
        end if

        call mpas_timer_stop("RK4- check wet cells")
      end if

      call mpas_timer_stop("RK4-main loop")

      !
      !  A little clean up at the end: rescale tracer fields and compute diagnostics for new state
      !
      call mpas_timer_start("RK4-cleanup phase")
      ! Rescale tracers
      block => domain % blocklist
      do while(associated(block))
        dminfo = domain % dminfo
        call ocn_time_integrator_rk4_cleanup(block, dt, dminfo, err)

        block => block % next
      end do

      if (config_use_two_equation_turbulence_model) then
         call mpas_pool_get_array(statePool, 'tke', tkeNew, 2)
         call mpas_pool_get_array(statePool, 'glsPsi', glsPsiNew, 2)
         call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessNew, 2)
         call ocn_compute_two_equation_diff(tkeNew, glsPsiNew, layerThicknessNew, dt, err)
      end if
      call mpas_timer_start("RK4-implicit vert mix")
      ! Update halo on u and tracers, which were just updated for implicit vertical mixing.  If not done,
      ! this leads to lack of volume conservation.  It is required because halo updates in RK4 are only
      ! conducted on tendencies, not on the velocity and tracer fields.  So this update is required to
      ! communicate the change due to implicit vertical mixing across the boundary.
      call mpas_timer_start("RK4-implicit vert mix halos")

      call mpas_pool_get_subpool(domain % blocklist % structs, 'state', statePool)
      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)

      call mpas_dmpar_field_halo_exch(domain, 'normalVelocity', timeLevel=2)
      call mpas_dmpar_field_halo_exch(domain, 'verticalVelocity', timeLevel=2)
      call mpas_dmpar_field_halo_exch(domain, 'tke', timeLevel=2)
      call mpas_dmpar_field_halo_exch(domain, 'glsPsi', timeLevel=2)
      call mpas_dmpar_field_halo_exch(domain, 'layerThickness', timeLevel=2)

      call mpas_pool_begin_iteration(tracersPool)
      do while ( mpas_pool_get_next_member(tracersPool, groupItr) )
         if ( groupItr % memberType == MPAS_POOL_FIELD ) then
            call mpas_dmpar_field_halo_exch(domain, groupItr % memberName, timeLevel=2)
         end if
      end do

      call mpas_timer_stop("RK4-implicit vert mix halos")

      if (config_use_two_equation_turbulence_model) then
         call mpas_timer_start("Two equation model diff compute")
         block => domain % blocklist
         do while(associated(block))
            call mpas_pool_get_subpool(block % structs, 'state', statePool)
            call mpas_pool_get_array(statePool, 'tke', tkeNew, 2)
            call mpas_pool_get_array(statePool, 'glsPsi', glsPsiNew, 2)
            call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessNew, 2)
            call ocn_compute_two_equation_diff(tkeNew, glsPsiNew, layerThicknessNew, dt, err)
            block => block % next
         end do
         call mpas_timer_stop("Two equation model diff compute")
      end if

      call mpas_timer_stop("RK4-implicit vert mix")

      block => domain % blocklist
      do while (associated(block))
         call mpas_pool_get_subpool(block % structs, 'state', statePool)
         call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)
         call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)
         call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
         call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)
         call mpas_pool_get_subpool(block % structs, 'verticalMesh', verticalMeshPool)

         call mpas_pool_get_dimension(meshPool, 'nCells', nCells)
         call mpas_pool_get_dimension(meshPool, 'nEdges', nEdges)
         call mpas_pool_get_array(meshPool, 'bottomDepth', bottomDepth)
         call mpas_pool_get_array(meshPool, 'minLevelCell', minLevelCell)
         call mpas_pool_get_array(meshPool, 'maxLevelCell', maxLevelCell)

         call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
         call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityNew, 2)
         call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
         call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessNew, 2)

         call mpas_pool_get_array(verticalMeshPool, 'restingThickness', restingThickness)
         call mpas_pool_get_array(forcingPool, 'tidalInputMask', tidalInputMask)
         call mpas_pool_get_array(forcingPool, 'tidalBCValue', tidalBCValue)

      if (config_enable_nonhydrostatic_mode) then

         call mpas_pool_get_array(statePool, 'nonhydrostaticPressure', nonhydrostaticPressure, 2)
         call mpas_pool_get_array(statePool, 'nonhydrostaticPressure', nonhydrostaticPressureOld, 1)

         call mpas_timer_start('RK4 NH pressure tend halo pressure')
         call mpas_dmpar_field_halo_exch(domain, 'nonhydrostaticPressure', timeLevel=2)
         call mpas_dmpar_field_halo_exch(domain, 'nonhydrostaticPressure', timeLevel=1)
         call mpas_dmpar_field_halo_exch(domain, 'nhPressureCorrection')
         call mpas_timer_stop('RK4 NH pressure tend halo pressure')

            call ocn_nonhydrostatic_pressure_update_velocity(normalVelocityNew, verticalVelocityNew, &
                 layerThicknessNew, layerThickEdge, nonhydrostaticPressure, nonhydrostaticPressureOld, &
                 nhPressureCorrection, dt)
      end if
         if (config_prescribe_velocity) then
            !$omp parallel
            !$omp do schedule(runtime)
            do iEdge = 1, nEdges
               normalVelocityNew(:, iEdge) = normalVelocityCur(:, iEdge)
            end do
            !$omp end do
            !$omp end parallel

            if (config_enable_nonhydrostatic_mode) then
               !$omp parallel
               !$omp do schedule(runtime)
               do iCell = 1, nCells
                  verticalVelocityNew(:, iCell) = verticalVelocityCur(:, iCell)
               end do
               !$omp end do
               !$omp end parallel
            end if
         end if

         if (config_prescribe_thickness) then
            !$omp parallel
            !$omp do schedule(runtime)
            do iCell = 1, nCells
               layerThicknessNew(:, iCell) = layerThicknessCur(:, iCell)
            end do
            !$omp end do
            !$omp end parallel
         end if

         ! direct application of tidal boundary condition
         if (config_use_tidal_forcing .and. trim(config_tidal_forcing_type) == 'direct') then
           do iCell=1, nCells
             ! artificially assumes boolean mask for now, could generalize to tappered sponge layer
             if (tidalInputMask(iCell) == 1.0_RKIND) then
               ! compute total depth for relative thickness contribution
               totalDepth = 0.0_RKIND
               do k = minLevelCell(iCell), maxLevelCell(iCell)
                 totalDepth = totalDepth + restingThickness(k,iCell)
               end do

               ! only modify layer thicknesses on tidal boundary
               do k = minLevelCell(iCell), maxLevelCell(iCell)
                 layerThicknessNew(k, iCell) = tidalInputMask(iCell)*(tidalBCValue(iCell) + bottomDepth(iCell))*(restingThickness(k,iCell)/totalDepth)
                 !(1.0_RKIND - tidalInputMask(iCell))*layerThicknessNew(k, iCell)  ! generalized tappered assumption code
               end do
             end if
           end do
         end if

         call ocn_diagnostic_solve(dt, statePool, forcingPool, meshPool, scratchPool, tracersPool, 2)

         ! Update the effective desnity in land ice if we're coupling to land ice
         call ocn_effective_density_in_land_ice_update(meshPool, forcingPool, statePool, err)

         ! ------------------------------------------------------------------
         ! Accumulating various parameterizations of the transport velocity
         ! ------------------------------------------------------------------
         !$omp parallel
         !$omp do schedule(runtime)
         do iEdge = 1, nEdges
            normalTransportVelocity(:, iEdge) = normalVelocityNew(:, iEdge)
         end do
         !$omp end do
         !$omp end parallel

         if (config_use_GM) then
            !$omp parallel
            !$omp do schedule(runtime)
            do iEdge = 1, nEdges
               normalTransportVelocity(:, iEdge) = normalTransportVelocity(:, iEdge) + normalGMBolusVelocity(:, iEdge)
            end do
            !$omp end do
            !$omp end parallel
         end if
         ! ------------------------------------------------------------------
         ! End: Accumulating various parameterizations of the transport velocity
         ! ------------------------------------------------------------------

         call mpas_reconstruct(meshPool,  normalVelocityNew, &
                          velocityX, velocityY, velocityZ,   &
                          velocityZonal, velocityMeridional, &
                          includeHalos = .true.)

         call mpas_reconstruct(meshPool, gradSSH,          &
                          gradSSHX, gradSSHY, gradSSHZ,    &
                          gradSSHZonal, gradSSHMeridional, &
                          includeHalos = .true.)

         !$omp parallel
         !$omp do schedule(runtime)
         do iCell = 1, nCells
            surfaceVelocity(indexSurfaceVelocityZonal, iCell) = velocityZonal(minLevelCell(iCell), iCell)
            surfaceVelocity(indexSurfaceVelocityMeridional, iCell) = velocityMeridional(minLevelCell(iCell), iCell)

            SSHGradient(indexSSHGradientZonal, iCell) = gradSSHZonal(iCell)
            SSHGradient(indexSSHGradientMeridional, iCell) = gradSSHMeridional(iCell)
         end do
         !$omp end do
         !$omp end parallel

         call ocn_time_average_coupled_accumulate(statePool, forcingPool, 2)

         if (config_use_GM) then
            call ocn_reconstruct_gm_vectors(meshPool)
         end if

         block => block % next
      end do

      if (trim(config_land_ice_flux_mode) == 'coupled') then
         call mpas_timer_start("RK4-effective density halo")
         call mpas_pool_get_subpool(domain % blocklist % structs, 'state', statePool)
         call mpas_pool_get_field(statePool, 'effectiveDensityInLandIce', effectiveDensityField, 2)
         call mpas_dmpar_exch_halo_field(effectiveDensityField)
         call mpas_timer_stop("RK4-effective density halo")
      end if

      call mpas_timer_stop("RK4-cleanup phase")

      block => domain % blocklist
      do while(associated(block))
         call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)

         call mpas_pool_destroy_pool(provisStatePool)

         call mpas_pool_remove_subpool(block % structs, 'provis_state')
         block => block % next
      end do

   end subroutine ocn_time_integrator_rk4!}}}

   subroutine ocn_time_integrator_rk4_compute_vel_tends(block, dt, &
     rkSubstepWeight, err)!{{{

      type (block_type), intent(in) :: block
      real (kind=RKIND), intent(in) :: dt
      real (kind=RKIND), intent(in) :: rkSubstepWeight
      integer, intent(out) :: err

      type (mpas_pool_type), pointer :: meshPool, verticalMeshPool
      type (mpas_pool_type), pointer :: statePool, forcingPool
      type (mpas_pool_type), pointer :: scratchPool, tendPool, provisStatePool
      type (mpas_pool_type), pointer :: tracersPool

      real (kind=RKIND), dimension(:), pointer :: sshCur
      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessCur, normalVelocityCur
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocity
      real (kind=RKIND), dimension(:, :), pointer ::  normalVelocityProvis, highFreqThicknessProvis

      logical, pointer :: config_filter_btr_mode

      err = 0

      call mpas_pool_get_config(block % configs, 'config_filter_btr_mode', config_filter_btr_mode)

      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
      call mpas_pool_get_subpool(block % structs, 'verticalMesh', verticalMeshPool)
      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)
      call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)
      call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
      call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)

      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)

      call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
      call mpas_pool_get_array(statePool, 'ssh', sshCur, 1)
      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
      call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocity, 1)

      call mpas_pool_get_array(provisStatePool, 'normalVelocity', normalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'highFreqThickness', highFreqThicknessProvis, 1)

      ! advection of u uses u, while advection of layerThickness and tracers use normalTransportVelocity.
      if (associated(highFreqThicknessProvis)) then
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur,layerThickEdge, normalVelocityProvis, &
            verticalVelocity, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err, highFreqThicknessProvis)
      else
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur,layerThickEdge, normalVelocityProvis, &
            verticalVelocity, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err)
      endif

      call ocn_tend_vel(tendPool, provisStatePool, forcingPool, 1, dt)

   end subroutine ocn_time_integrator_rk4_compute_vel_tends!}}}

   subroutine ocn_time_integrator_rk4_compute_vvel_tends(block, dt, &
     rkSubstepWeight, err)

      type (block_type), intent(in) :: block
      real (kind=RKIND), intent(in) :: dt
      real (kind=RKIND), intent(in) :: rkSubstepWeight
      integer, intent(out) :: err

      type (mpas_pool_type), pointer :: meshPool, verticalMeshPool
      type (mpas_pool_type), pointer :: statePool, forcingPool
      type (mpas_pool_type), pointer :: scratchPool, tendPool, provisStatePool
      type (mpas_pool_type), pointer :: tracersPool

      real (kind=RKIND), dimension(:), pointer :: sshCur
      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessCur, normalVelocityCur
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocityCur
      real (kind=RKIND), dimension(:, :), pointer ::  normalVelocityProvis, highFreqThicknessProvis
      real (kind=RKIND), dimension(:, :), pointer ::  verticalVelocityProvis

      integer :: iEdge
      integer, pointer :: nEdges
      logical, pointer :: config_filter_btr_mode

      err = 0

      call mpas_pool_get_config(block % configs, 'config_filter_btr_mode', config_filter_btr_mode)

      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
      call mpas_pool_get_subpool(block % structs, 'verticalMesh', verticalMeshPool)
      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)
      call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)
      call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
      call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)

      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)

      call mpas_pool_get_dimension(block % dimensions, 'nEdges', nEdges)
      call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
      call mpas_pool_get_array(statePool, 'ssh', sshCur, 1)
      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
      call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocityCur, 1)

      call mpas_pool_get_array(provisStatePool, 'verticalVelocity', verticalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'normalVelocity', normalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'highFreqThickness', highFreqThicknessProvis, 1)

      ! advection of u uses u, while advection of layerThickness and tracers use normalTransportVelocity.
      if (associated(highFreqThicknessProvis)) then
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur,layerThickEdge, normalVelocityProvis, &
            verticalVelocityProvis, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err, highFreqThicknessProvis)
      else
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur,layerThickEdge, normalVelocityProvis, &
            verticalVelocityProvis, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err)
      endif

      call ocn_tend_vvel(tendPool, provisStatePool, forcingPool, meshPool, 1, dt)

   end subroutine ocn_time_integrator_rk4_compute_vvel_tends

   subroutine ocn_time_integrator_rk4_compute_thick_tends(block, dt, rkSubstepWeight, err)!{{{
      type (block_type), intent(in) :: block
      real (kind=RKIND), intent(in) :: dt
      real (kind=RKIND), intent(in) :: rkSubstepWeight
      integer, intent(out) :: err

      type (mpas_pool_type), pointer :: meshPool, verticalMeshPool
      type (mpas_pool_type), pointer :: statePool, forcingPool
      type (mpas_pool_type), pointer :: scratchPool, tendPool, provisStatePool
      type (mpas_pool_type), pointer :: tracersPool

      real (kind=RKIND), dimension(:), pointer :: sshCur
      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessCur, normalVelocityCur
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocity
      real (kind=RKIND), dimension(:, :), pointer ::  normalVelocityProvis, highFreqThicknessProvis
      real (kind=RKIND), dimension(:, :), pointer ::  verticalVelocityProvis

      integer :: iEdge
      integer, pointer :: nEdges
      logical, pointer :: config_filter_btr_mode

      err = 0

      call mpas_pool_get_config(block % configs, 'config_filter_btr_mode', config_filter_btr_mode)

      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
      call mpas_pool_get_subpool(block % structs, 'verticalMesh', verticalMeshPool)
      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)
      call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)
      call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
      call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)

      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)

      call mpas_pool_get_dimension(block % dimensions, 'nEdges', nEdges)
      call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
      call mpas_pool_get_array(statePool, 'ssh', sshCur, 1)
      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
      call mpas_pool_get_array(provisStatePool, 'verticalVelocity', verticalVelocity, 1)

      call mpas_pool_get_array(provisStatePool, 'normalVelocity', normalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'highFreqThickness', highFreqThicknessProvis, 1)

      if (config_use_GM) then
            !$omp parallel
            !$omp do schedule(runtime)
            do iEdge = 1, nEdges
               normalTransportVelocity(:, iEdge) = normalVelocityProvis(:, iEdge) + normalGMBolusVelocity(:, iEdge)
            end do
            !$omp end do
            !$omp end parallel
         end if

      ! advection of u uses u, while advection of layerThickness and tracers use normalTransportVelocity.
      if (associated(highFreqThicknessProvis)) then
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur, layerThickEdge, normalTransportVelocity, &
            verticalVelocity, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err, highFreqThicknessProvis)
      else
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur, layerThickEdge, normalTransportVelocity, &
            verticalVelocity, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err)
      endif

      call ocn_tend_thick(tendPool, forcingPool, meshPool)


   end subroutine ocn_time_integrator_rk4_compute_thick_tends!}}}

   subroutine ocn_time_integrator_rk4_compute_tracer_tends(block, dt, rkSubstepWeight, err)!{{{
      type (block_type), intent(in) :: block
      real (kind=RKIND), intent(in) :: dt
      real (kind=RKIND), intent(in) :: rkSubstepWeight
      integer, intent(out) :: err

      type (mpas_pool_type), pointer :: meshPool, verticalMeshPool
      type (mpas_pool_type), pointer :: statePool, forcingPool
      type (mpas_pool_type), pointer :: scratchPool, tendPool, provisStatePool
      type (mpas_pool_type), pointer :: swForcingPool, tracersPool

      real (kind=RKIND), dimension(:), pointer :: sshCur
      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessCur, normalVelocityCur
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocity
      real (kind=RKIND), dimension(:, :), pointer ::  normalVelocityProvis, highFreqThicknessProvis

      logical, pointer :: config_filter_btr_mode

      integer :: iEdge
      integer, pointer :: nEdges
      err = 0

      call mpas_pool_get_config(block % configs, 'config_filter_btr_mode', config_filter_btr_mode)

      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
      call mpas_pool_get_subpool(block % structs, 'verticalMesh', verticalMeshPool)
      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)
      call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)
      call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
      call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)
      call mpas_pool_get_subpool(block % structs, 'shortwave', swForcingPool)

      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)

      call mpas_pool_get_dimension(block % dimensions, 'nEdges', nEdges)
      call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
      call mpas_pool_get_array(statePool, 'ssh', sshCur, 1)
      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)

      call mpas_pool_get_array(provisStatePool, 'normalVelocity', normalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'highFreqThickness', highFreqThicknessProvis, 1)

      if (config_use_GM) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iEdge = 1, nEdges
            normalTransportVelocity(:, iEdge) = normalVelocityProvis(:, iEdge) + normalGMBolusVelocity(:,iEdge)
         end do
         !$omp end do
         !$omp end parallel
      end if

      ! advection of u uses u, while advection of layerThickness and tracers use normalTransportVelocity.
      if (associated(highFreqThicknessProvis)) then
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur, layerThickEdge, normalTransportVelocity, &
            verticalVelocity, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err, highFreqThicknessProvis)
      else
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur, layerThickEdge, normalTransportVelocity, &
            verticalVelocity, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err)
      endif

      if (config_filter_btr_mode) then
          call ocn_filter_btr_mode_tend_vel(tendPool, provisStatePool, meshPool, 1)
      endif

      call ocn_tend_tracer(tendPool, provisStatePool, forcingPool, meshPool, swForcingPool, &
                           dt, activeTracersOnlyIn=.false., timeLevelIn=1)

   end subroutine ocn_time_integrator_rk4_compute_tracer_tends!}}}

   subroutine ocn_time_integrator_rk4_compute_tke_psi_tends(block, dt, &
     rkSubstepWeight, err)

      type (block_type), intent(in) :: block
      real (kind=RKIND), intent(in) :: dt
      real (kind=RKIND), intent(in) :: rkSubstepWeight
      integer, intent(out) :: err

      type (mpas_pool_type), pointer :: meshPool, verticalMeshPool
      type (mpas_pool_type), pointer :: statePool, forcingPool
      type (mpas_pool_type), pointer :: scratchPool, tendPool, provisStatePool
      type (mpas_pool_type), pointer :: tracersPool

      real (kind=RKIND), dimension(:), pointer :: sshCur
      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessCur, verticalVelocityCur
      real (kind=RKIND), dimension(:, :), pointer :: normalTransportVelocity, normalVelocityCur
      real (kind=RKIND), dimension(:, :), pointer :: normalVelocityProvis
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocityProvis, highFreqThicknessProvis
      real (kind=RKIND), dimension(:, :), pointer :: tendTKE, tendglsPsi, tkeNew, glsPsiNew
      real (kind=RKIND), dimension(:, :, :), pointer :: activeTracersNew

      logical, pointer :: config_filter_btr_mode

      err = 0

      call mpas_pool_get_config(block % configs, 'config_filter_btr_mode', config_filter_btr_mode)

      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
      call mpas_pool_get_subpool(block % structs, 'verticalMesh', verticalMeshPool)
      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)
      call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)
      call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
      call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)

      call mpas_pool_get_subpool(provisStatePool, 'tracers', tracersPool)

      call mpas_pool_get_array(tracersPool, 'activeTracers', activeTracersNew, 1)
      call mpas_pool_get_array(provisStatePool, 'tke', tkeNew, 1)
      call mpas_pool_get_array(provisStatePool, 'glsPsi', glsPsiNew, 1)
      call mpas_pool_get_array(tendPool, 'tendTKE', tendTKE)
      call mpas_pool_get_array(tendPool, 'tendglsPsi', tendglsPsi)

      call mpas_pool_get_array(provisStatePool, 'layerThickness', layerThicknessCur, 1)
      call mpas_pool_get_array(statePool, 'ssh', sshCur, 1)
      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
      call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocityCur, 1)

      call mpas_pool_get_array(provisStatePool, 'verticalVelocity', verticalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'normalVelocity', normalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'highFreqThickness', highFreqThicknessProvis, 1)

      ! advection of u uses u, while advection of layerThickness and tracers use normalTransportVelocity.
      if (associated(highFreqThicknessProvis)) then
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur,layerThickEdge, normalVelocityProvis, &
            verticalVelocityProvis, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err, highFreqThicknessProvis)
      else
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur,layerThickEdge, normalVelocityProvis, &
            verticalVelocityProvis, sshCur, rkSubstepWeight, &
            vertAleTransportTop, nhPressureCorrection, err)
      endif

      !this may be needed, but perhaps being a timestep behind is no problem
      call mpas_reconstruct(meshPool,  normalVelocityProvis, &
                            velocityX, velocityY, velocityZ,   &
                            velocityZonal, velocityMeridional, &
                            includeHalos = .true.)
!halo exchange??

      call ocn_compute_KPP_input_fields(statePool, forcingPool, meshPool, 2)
      call ocn_compute_two_equation_tendency(tendTKE, tendglsPsi, tkeNew, glsPsiNew, velocityZonal,&
                                     velocityMeridional, normalVelocityProvis, verticalVelocityProvis, &
                                     layerThicknessCur, activeTracersNew, dt, err)

   end subroutine ocn_time_integrator_rk4_compute_tke_psi_tends

   subroutine ocn_time_integrator_rk4_compute_tends(block, dt, rkWeight, err)!{{{
      type (block_type), intent(in) :: block
      real (kind=RKIND), intent(in) :: dt
      real (kind=RKIND), intent(in) :: rkWeight
      integer, intent(out) :: err

      type (mpas_pool_type), pointer :: meshPool, verticalMeshPool
      type (mpas_pool_type), pointer :: statePool, forcingPool
      type (mpas_pool_type), pointer :: scratchPool, tendPool, provisStatePool
      type (mpas_pool_type), pointer :: swForcingPool, tracersPool

      real (kind=RKIND), dimension(:), pointer :: sshCur
      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessCur, normalVelocityCur
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocity
      real (kind=RKIND), dimension(:, :), pointer ::  normalVelocityProvis, highFreqThicknessProvis

      logical, pointer :: config_filter_btr_mode

      err = 0

      call mpas_pool_get_config(block % configs, 'config_filter_btr_mode', config_filter_btr_mode)

      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
      call mpas_pool_get_subpool(block % structs, 'verticalMesh', verticalMeshPool)
      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)
      call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)
      call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
      call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)
      call mpas_pool_get_subpool(block % structs, 'shortwave', swForcingPool)

      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)

      call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
      call mpas_pool_get_array(statePool, 'ssh', sshCur, 1)
      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
      call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocity, 1)

      call mpas_pool_get_array(provisStatePool, 'normalVelocity', normalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'highFreqThickness', highFreqThicknessProvis, 1)

      ! advection of u uses u, while advection of layerThickness and tracers use normalTransportVelocity.
      if (associated(highFreqThicknessProvis)) then
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur,layerThickEdge, normalVelocityProvis, &
            verticalVelocity, sshCur, rkWeight, &
            vertAleTransportTop, nhPressureCorrection, err, highFreqThicknessProvis)
      else
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur,layerThickEdge, normalVelocityProvis, &
            verticalVelocity, sshCur, rkWeight, &
            vertAleTransportTop, nhPressureCorrection, err)
      endif

      call ocn_tend_vel(tendPool, provisStatePool, forcingPool, 1, dt)

      if (associated(highFreqThicknessProvis)) then
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur, layerThickEdge, normalTransportVelocity, &
            verticalVelocity, sshCur, rkWeight, &
            vertAleTransportTop, nhPressureCorrection, err, highFreqThicknessProvis)
      else
         call ocn_vert_transport_velocity_top(meshPool, verticalMeshPool, &
            layerThicknessCur, layerThickEdge, normalTransportVelocity, &
            verticalVelocity, sshCur, rkWeight, &
            vertAleTransportTop, nhPressureCorrection, err)
      endif

      call ocn_tend_thick(tendPool, forcingPool, meshPool)

      if (config_filter_btr_mode) then
          call ocn_filter_btr_mode_tend_vel(tendPool, provisStatePool, meshPool, 1)
      endif

      call ocn_tend_tracer(tendPool, provisStatePool, forcingPool, meshPool, swForcingPool, &
                           dt, activeTracersOnlyIn=.false., timeLevelIn=1)

   end subroutine ocn_time_integrator_rk4_compute_tends!}}}

   subroutine ocn_time_integrator_rk4_diagnostic_update(block, dt, rkSubstepWeight, err)!{{{
      type (block_type), intent(in) :: block
      real (kind=RKIND), intent(in) :: dt
      real (kind=RKIND), intent(in) :: rkSubstepWeight
      integer, intent(out) :: err

      logical, pointer :: config_prescribe_velocity, config_prescribe_thickness, config_use_GM

      integer, pointer :: nCells, nEdges
      integer :: iCell, iEdge, k

      type (mpas_pool_type), pointer :: statePool, tendPool, meshPool, scratchPool
      type (mpas_pool_type), pointer :: provisStatePool, forcingPool
      type (mpas_pool_type), pointer :: tracersPool, tracersTendPool, provisTracersPool

      real (kind=RKIND), dimension(:, :), pointer :: normalVelocityCur, normalVelocityProvis, normalVelocityTend
      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessCur, layerThicknessProvis, layerThicknessTend
      real (kind=RKIND), dimension(:, :), pointer :: lowFreqDivergenceCur, lowFreqDivergenceProvis, lowFreqDivergenceTend
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocityCur, verticalVelocityTend
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocityProvis

      real (kind=RKIND), dimension(:, :, :), pointer :: tracersGroupCur, tracersGroupProvis, tracersGroupTend

      integer, dimension(:), pointer :: minLevelCell, maxLevelCell, maxLevelEdgeTop

      logical, pointer :: config_use_tracerGroup
      type (mpas_pool_iterator_type) :: groupItr
      character (len=StrKIND) :: modifiedGroupName
      character (len=StrKIND) :: configName

      err = 0

      call mpas_pool_get_config(block % configs, 'config_prescribe_velocity', config_prescribe_velocity)
      call mpas_pool_get_config(block % configs, 'config_prescribe_thickness', config_prescribe_thickness)
      call mpas_pool_get_config(block % configs, 'config_use_GM', config_use_GM)

      call mpas_pool_get_dimension(block % dimensions, 'nCells', nCells)
      call mpas_pool_get_dimension(block % dimensions, 'nEdges', nEdges)

      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
      call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)
      call mpas_pool_get_subpool(block % structs, 'provis_state', provisStatePool)
      call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)

      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)
      call mpas_pool_get_subpool(tendPool, 'tracersTend', tracersTendPool)

      call mpas_pool_get_subpool(provisStatePool, 'tracers', provisTracersPool)

      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
      call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
      call mpas_pool_get_array(statePool, 'lowFreqDivergence', lowFreqDivergenceCur, 1)

      call mpas_pool_get_array(provisStatePool, 'normalVelocity', normalVelocityProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'layerThickness', layerThicknessProvis, 1)
      call mpas_pool_get_array(provisStatePool, 'lowFreqDivergence', lowFreqDivergenceProvis, 1)

      call mpas_pool_get_array(tendPool, 'normalVelocity', normalVelocityTend)
      call mpas_pool_get_array(tendPool, 'layerThickness', layerThicknessTend)
      call mpas_pool_get_array(tendPool, 'lowFreqDivergence', lowFreqDivergenceTend)

      call mpas_pool_get_array(meshPool, 'minLevelCell', minLevelCell)
      call mpas_pool_get_array(meshPool, 'maxLevelCell', maxLevelCell)
      call mpas_pool_get_array(meshPool, 'maxLevelEdgeTop', maxLevelEdgeTop)

      if(config_enable_nonhydrostatic_mode) then
         call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocityCur, 1)
         call mpas_pool_get_array(tendPool, 'verticalVelocityTend', verticalVelocityTend)
         call mpas_pool_get_array(provisStatePool, 'verticalVelocity', verticalVelocityProvis, 1)
      end if

      !$omp parallel
      !$omp do schedule(runtime) private(k)
      do iEdge = 1, nEdges
         do k = 1, maxLevelEdgeTop(iEdge)
            normalVelocityProvis(k, iEdge) = normalVelocityCur(k, iEdge) + rkSubstepWeight &
                                           * normalVelocityTend(k, iEdge)
            normalVelocityProvis(k, iEdge) = normalVelocityProvis(k, iEdge) * (1.0_RKIND - wettingVelocity(k, iEdge))
         end do
      end do
      !$omp end do

      !$omp do schedule(runtime) private(k)
      do iCell = 1, nCells
         do k = 1, maxLevelCell(iCell)
            layerThicknessProvis(k, iCell) = layerThicknessCur(k, iCell) + rkSubstepWeight &
                                           * layerThicknessTend(k, iCell)
         end do
      end do
      !$omp end do
      !$omp end parallel

      if (config_enable_nonhydrostatic_mode) then
         !$omp parallel
         !$omp do schedule(runtime) private(k)
         do iCell = 1, nCells
            do k = 1, maxLevelCell(iCell)
               verticalVelocityProvis(k, iCell) = verticalVelocityCur(k, iCell) + rkSubstepWeight &
                                                * verticalVelocityTend(k, iCell)
            end do
         end do
         !$omp end do
         !$omp end parallel
      end if

      call mpas_pool_begin_iteration(tracersPool)
      do while ( mpas_pool_get_next_member(tracersPool, groupItr) )
         if ( groupItr % memberType == MPAS_POOL_FIELD ) then
            configName = 'config_use_' // trim(groupItr % memberName)
            call mpas_pool_get_config(block % configs, configName, config_use_tracerGroup)

            if ( config_use_tracerGroup ) then
               call mpas_pool_get_array(tracersPool, groupItr % memberName, tracersGroupCur, 1)
               call mpas_pool_get_array(provisTracersPool, groupItr % memberName, tracersGroupProvis, 1)

               modifiedGroupName = trim(groupItr % memberName) // 'Tend'
               call mpas_pool_get_array(tracersTendPool, modifiedGroupName, tracersGroupTend)
               if ( associated(tracersGroupProvis) .and. associated(tracersGroupCur) .and. associated(tracersGroupTend) ) then
                  !$omp parallel
                  !$omp do schedule(runtime) private(k)
                  do iCell = 1, nCells
                     do k = 1, maxLevelCell(iCell)
                        tracersGroupProvis(:, k, iCell) = ( layerThicknessCur(k, iCell) * tracersGroupCur(:, k, iCell)  &
                                                 + rkSubstepWeight * tracersGroupTend(:, k, iCell) &
                                                   ) / layerThicknessProvis(k, iCell)
                     end do

                  end do
                  !$omp end do
                  !$omp end parallel
               end if
            end if
         end if
      end do

      if (associated(lowFreqDivergenceCur)) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iCell = 1, nCells
            lowFreqDivergenceProvis(:, iCell) = lowFreqDivergenceCur(:, iCell) + rkSubstepWeight &
                                              * lowFreqDivergenceTend(:, iCell)
         end do
         !$omp end do
         !$omp end parallel
      end if

      if (config_prescribe_velocity) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iEdge = 1, nEdges
            normalVelocityProvis(:, iEdge) = normalVelocityCur(:, iEdge)
         end do
         !$omp end do
         !$omp end parallel

         if (config_enable_nonhydrostatic_mode) then
            !$omp parallel
            !$omp do schedule(runtime)
            do iCell = 1, nCells
               verticalVelocityProvis(:,iCell) = verticalVelocityCur(:, iCell)
            end do
            !$omp end do
            !$omp end parallel
        end if

      end if

      if (config_prescribe_thickness) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iCell = 1, nCells
            layerThicknessProvis(:, iCell) = layerThicknessCur(:, iCell)
         end do
         !$omp end do
         !$omp end parallel
      end if

      call ocn_diagnostic_solve(dt, provisStatePool, forcingPool, meshPool, scratchPool, tracersPool, 1)

      ! ------------------------------------------------------------------
      ! Accumulating various parametrizations of the transport velocity
      ! ------------------------------------------------------------------
      !$omp parallel
      !$omp do schedule(runtime)
      do iEdge = 1, nEdges
         normalTransportVelocity(:, iEdge) = normalVelocityProvis(:, iEdge)
      end do
      !$omp end do
      !$omp end parallel

      if (config_use_GM) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iEdge = 1, nEdges
            normalTransportVelocity(:, iEdge) = normalTransportVelocity(:, iEdge) + normalGMBolusVelocity(:,iEdge)
         end do
         !$omp end do
         !$omp end parallel
      end if
      ! ------------------------------------------------------------------
      ! End: Accumulating various parametrizations of the transport velocity
      ! ------------------------------------------------------------------

   end subroutine ocn_time_integrator_rk4_diagnostic_update!}}}

   subroutine ocn_time_integrator_rk4_accumulate_update(block, rkWeight, err)!{{{
      type (block_type), intent(in) :: block
      real (kind=RKIND), intent(in) :: rkWeight
      integer, intent(out) :: err

      integer, pointer :: nCells, nEdges
      integer :: iCell, iEdge, k

      type (mpas_pool_type), pointer :: statePool, tendPool, meshPool
      type (mpas_pool_type), pointer :: tracersPool, tracersTendPool

      real (kind=RKIND), dimension(:, :), pointer :: normalVelocityNew, normalVelocityTend
      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessNew, layerThicknessTend
      real (kind=RKIND), dimension(:, :), pointer :: highFreqThicknessNew, highFreqThicknessTend
      real (kind=RKIND), dimension(:, :), pointer :: lowFreqDivergenceNew, lowFreqDivergenceTend
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocityNew, tkeNew, glsPsiNew
      real (kind=RKIND), dimension(:, :), pointer :: tendTKE, tendglsPsi
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocityTend

      real (kind=RKIND), dimension(:, :, :), pointer :: tracersGroupNew, tracersGroupTend

      integer, dimension(:), pointer :: minLevelCell, maxLevelCell

      logical, pointer :: config_use_tracerGroup
      type (mpas_pool_iterator_type) :: groupItr
      character (len=StrKIND) :: modifiedGroupName
      character (len=StrKIND) :: configName

      err = 0

      call mpas_pool_get_dimension(block % dimensions, 'nCells', nCells)
      call mpas_pool_get_dimension(block % dimensions, 'nEdges', nEdges)

      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'tend', tendPool)
      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)

      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)
      call mpas_pool_get_subpool(tendPool, 'tracersTend', tracersTendPool)

      !call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityCur, 1)
      !call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessCur, 1)
      !call mpas_pool_get_array(statePool, 'highFreqThickness', highFreqThicknessCur, 1)
      !call mpas_pool_get_array(statePool, 'lowFreqDivergence', lowFreqDivergenceCur, 1)

      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityNew, 2)
      call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessNew, 2)
      call mpas_pool_get_array(statePool, 'highFreqThickness', highFreqThicknessNew, 2)
      call mpas_pool_get_array(statePool, 'lowFreqDivergence', lowFreqDivergenceNew, 2)

      call mpas_pool_get_array(tendPool, 'normalVelocity', normalVelocityTend)
      call mpas_pool_get_array(tendPool, 'layerThickness', layerThicknessTend)

      if (config_enable_nonhydrostatic_mode) then
         call mpas_pool_get_array(tendPool, 'verticalVelocityTend', verticalVelocityTend)
         call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocityNew, 2)
      end if

      if (config_use_two_equation_turbulence_model) then
         call mpas_pool_get_array(statePool, 'tke', tkeNew, 2)
         call mpas_pool_get_array(statePool, 'glsPsi', glsPsiNew, 2)
         call mpas_pool_get_array(tendPool, 'tendTKE', tendTKE)
         call mpas_pool_get_array(tendPool, 'tendglsPsi', tendglsPsi)
      end if

      call mpas_pool_get_array(tendPool, 'highFreqThickness', highFreqThicknessTend)
      call mpas_pool_get_array(tendPool, 'lowFreqDivergence', lowFreqDivergenceTend)

      call mpas_pool_get_array(meshPool, 'minLevelCell', minLevelCell)
      call mpas_pool_get_array(meshPool, 'maxLevelCell', maxLevelCell)

      !$omp parallel
      !$omp do schedule(runtime) private(k)
      do iCell = 1, nCells
         do k = minLevelCell(iCell), maxLevelCell(iCell)
            layerThicknessNew(k, iCell) = layerThicknessNew(k, iCell) + rkWeight * layerThicknessTend(k, iCell)
         end do
      end do
      !$omp end do

      !$omp do schedule(runtime)
      do iEdge = 1, nEdges
         normalVelocityNew(:, iEdge) = normalVelocityNew(:, iEdge) + rkWeight * normalVelocityTend(:, iEdge)
         normalVelocityNew(:, iEdge) = normalVelocityNew(:, iEdge) * (1.0_RKIND - wettingVelocity(:, iEdge))
      end do
      !$omp end do
      !$omp end parallel

      if (config_enable_nonhydrostatic_mode) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iCell = 1, nCells
            verticalVelocityNew(:, iCell) = verticalVelocityNew(:, iCell) + rkWeight * verticalVelocityTend(:, iCell)
         end do
         !$omp end do
         !$omp end parallel
      end if

      if (config_use_two_equation_turbulence_model) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iCell = 1, nCells
            tkeNew(:, iCell) = max(tkeNew(:, iCell) + rkWeight * tendTKE(:, iCell),0.0_RKIND)
         end do
         !$omp end do
         !$omp end parallel

         if(config_LES_mode) then
            !$omp parallel
            !$omp do schedule(runtime)
            do iCell = 1, nCells
               glsPsiNew(:, iCell) = max(glsPsiNew(:, iCell) + rkWeight * tendglsPsi(:, iCell),0.0_RKIND)
            end do
            !$omp end do 
            !$omp end parallel
         end if
      end if

      call mpas_pool_begin_iteration(tracersPool)
      do while ( mpas_pool_get_next_member(tracersPool, groupItr) )
         if ( groupItr % memberType == MPAS_POOL_FIELD ) then
            configName = 'config_use_' // trim(groupItr % memberName)
            call mpas_pool_get_config(block % configs, configName, config_use_tracerGroup)

            if ( config_use_tracerGroup ) then
               call mpas_pool_get_array(tracersPool, groupItr % memberName, tracersGroupNew, 2)

               modifiedGroupName = trim(groupItr % memberName) // 'Tend'
               call mpas_pool_get_array(tracersTendPool, modifiedGroupName, tracersGroupTend)
               if ( associated(tracersGroupNew) .and. associated(tracersGroupTend) ) then
                  !$omp parallel
                  !$omp do schedule(runtime) private(k)
                  do iCell = 1, nCells
                     do k = minLevelCell(iCell), maxLevelCell(iCell)
                        tracersGroupNew(:, k, iCell) = tracersGroupNew(:, k, iCell) + rkWeight &
                                                * tracersGroupTend(:, k, iCell)
                     end do
                  end do
                  !$omp end do
                  !$omp end parallel
               end if
            end if
         end if
      end do

      if (associated(highFreqThicknessNew)) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iCell = 1, nCells
            highFreqThicknessNew(:, iCell) = highFreqThicknessNew(:, iCell) + rkWeight * highFreqThicknessTend(:, iCell)
         end do
         !$omp end do
         !$omp end parallel
      end if

      if (associated(lowFreqDivergenceNew)) then
         !$omp parallel
         !$omp do schedule(runtime)
         do iCell = 1, nCells
            lowFreqDivergenceNew(:, iCell) = lowFreqDivergenceNew(:, iCell) + rkWeight * lowFreqDivergenceTend(:, iCell)
         end do
         !$omp end do
         !$omp end parallel
      end if

   end subroutine ocn_time_integrator_rk4_accumulate_update!}}}

   subroutine ocn_time_integrator_rk4_cleanup(block, dt, dminfo, err)!{{{
      type (block_type), intent(in) :: block
      type (dm_info), intent(in) :: dminfo
      real (kind=RKIND), intent(in) :: dt
      integer, intent(out) :: err

      integer, pointer :: nCells, nEdges, indexTemperature, indexSalinity
      integer :: iCell, iEdge, k

      type (mpas_pool_type), pointer :: statePool, meshPool, forcingPool
      type (mpas_pool_type), pointer :: scratchPool
      type (mpas_pool_type), pointer :: tracersPool

      real (kind=RKIND), dimension(:, :), pointer :: layerThicknessNew, normalVelocityNew
      real (kind=RKIND), dimension(:, :), pointer :: verticalVelocityNew
      real (kind=RKIND), dimension(:, :), pointer :: nonhydrostaticPressure
      real (kind=RKIND), dimension(:, :, :), pointer :: tracersGroupNew

      integer, dimension(:), pointer :: minLevelCell, maxLevelCell

      logical, pointer :: config_use_tracerGroup
      type (mpas_pool_iterator_type) :: groupItr
      character (len=StrKIND) :: modifiedGroupName
      character (len=StrKIND) :: configName

      logical, pointer :: config_use_GM

      err = 0

      call mpas_pool_get_config(block % configs, 'config_use_GM', config_use_GM)

      call mpas_pool_get_dimension(block % dimensions, 'nCells', nCells)
      call mpas_pool_get_dimension(block % dimensions, 'nEdges', nEdges)

      call mpas_pool_get_subpool(block % structs, 'state', statePool)
      call mpas_pool_get_subpool(block % structs, 'mesh', meshPool)
      call mpas_pool_get_subpool(block % structs, 'forcing', forcingPool)
      call mpas_pool_get_subpool(block % structs, 'scratch', scratchPool)

      call mpas_pool_get_subpool(statePool, 'tracers', tracersPool)

      call mpas_pool_get_array(statePool, 'layerThickness', layerThicknessNew, 2)
      call mpas_pool_get_array(statePool, 'normalVelocity', normalVelocityNew, 2)

      call mpas_pool_get_dimension(tracersPool, 'index_temperature', indexTemperature)
      call mpas_pool_get_dimension(tracersPool, 'index_salinity', indexSalinity)

      call mpas_pool_get_array(meshPool, 'minLevelCell', minLevelCell)
      call mpas_pool_get_array(meshPool, 'maxLevelCell', maxLevelCell)

      if (config_enable_nonhydrostatic_mode) then
         call mpas_pool_get_array(statePool, 'verticalVelocity', verticalVelocityNew, 2)
      end if

      call mpas_pool_begin_iteration(tracersPool)
      do while ( mpas_pool_get_next_member(tracersPool, groupItr) )
         if ( groupItr % memberType == MPAS_POOL_FIELD ) then
            call mpas_pool_get_array(tracersPool, groupItr % memberName, tracersGroupNew, 2)
            if ( associated(tracersGroupNew) ) then
               !$omp parallel
               !$omp do schedule(runtime) private(k)
               do iCell = 1, nCells
                 do k = minLevelCell(iCell), maxLevelCell(iCell)
                   tracersGroupNew(:, k, iCell) = tracersGroupNew(:, k, iCell) / layerThicknessNew(k, iCell)
                 end do
               end do
               !$omp end do
               !$omp end parallel
            end if
         end if
      end do

      call ocn_diagnostic_solve(dt, statePool, forcingPool, meshPool, scratchPool, tracersPool, 2)

      call ocn_vmix_implicit(dt, meshPool, statePool, forcingPool, scratchPool, err, 2)

      if (config_enable_nonhydrostatic_mode .and. .not. config_enable_vertMomentum_disable_nonHydro) then
         call ocn_nonhydrostatic_pressure_tend(normalVelocityNew, verticalVelocityNew, layerThicknessNew, &
              layerThickEdge, nhPressureCorrection, dminfo % comm, dt)
      end if

   end subroutine ocn_time_integrator_rk4_cleanup!}}}

end module ocn_time_integration_rk4

! vim: foldmethod=marker
