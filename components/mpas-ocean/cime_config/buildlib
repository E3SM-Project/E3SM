#! /usr/bin/env perl
use strict;
use File::Compare;

my $component = "mpas-ocean";
my $component_dir = "ocn";
my $component_driver = "ocean_cesm_driver";
my $core = "ocean";
my $esm = "ACME";

if ($#ARGV == -1) {
    die " ERROR $component buildlib: must specify a caseroot input argument";
}

my ($CASEROOT) = @ARGV;
chdir "${CASEROOT}";

my $SRCROOT     = `./xmlquery SRCROOT     -value`;
my $OBJROOT     = `./xmlquery OBJROOT      -value`;
my $CASEBUILD   = `./xmlquery CASEBUILD    -value`;
my $CASETOOLS   = `./xmlquery CASETOOLS    -value`;
my $OBJROOT     = `./xmlquery OBJROOT	    -value`;
my $LIBROOT     = `./xmlquery LIBROOT	    -value`;
my $GMAKE_J     = `./xmlquery GMAKE_J	    -value`;
my $GMAKE       = `./xmlquery GMAKE	    -value`;
my $MACH        = `./xmlquery MACH         -value`;

#---------------------------------------------------------------------------
# Copy MPAS-O source
#---------------------------------------------------------------------------

mkdir "$OBJROOT/$component_dir";
mkdir "$OBJROOT/$component_dir/source";
my $srccpy = "cp -fpR $SRCROOT/components/mpas-source/src/Makefile* $OBJROOT/$component_dir/source/.";
system($srccpy) == 0 or die "ERROR: $component buildlib $srccpy failed: $?\n";
my $srccpy = "cp -fpR $SRCROOT/components/mpas-source/src/core_ocean $OBJROOT/$component_dir/source/.";
system($srccpy) == 0 or die "ERROR: $component buildlib $srccpy failed: $?\n";
my $srccpy = "cp -fpR $SRCROOT/components/mpas-source/src/external $OBJROOT/$component_dir/source/.";
system($srccpy) == 0 or die "ERROR: $component buildlib $srccpy failed: $?\n";
my $srccpy = "cp -fpR $SRCROOT/components/mpas-source/src/operators $OBJROOT/$component_dir/source/.";
system($srccpy) == 0 or die "ERROR: $component buildlib $srccpy failed: $?\n";
my $srccpy = "cp -fpR $SRCROOT/components/mpas-source/src/framework $OBJROOT/$component_dir/source/.";
system($srccpy) == 0 or die "ERROR: $component buildlib $srccpy failed: $?\n";
my $srccpy = "cp -fpR $SRCROOT/components/mpas-source/src/tools $OBJROOT/$component_dir/source/.";
system($srccpy) == 0 or die "ERROR: $component buildlib $srccpy failed: $?\n";

my $drvcpy = "cp -fpR $SRCROOT/components/$component/driver ${OBJROOT}/$component_dir/source/$component_driver";
system($drvcpy) == 0 or die "ERROR: $component buildlib $drvcpy failed: $?\n";

my $root_path = "$OBJROOT/$component_dir/source";

my $bldcmd = "cd $root_path; make all CORE=$core ESM=$esm DRIVER=$component_driver GEN_F90=true";
$bldcmd .= ' ROOT_DIR="';
$bldcmd .= "$root_path";
$bldcmd .= '"';

if ( $MACH eq "edison" ) {
	$bldcmd .= ' TOOL_TARGET_ARCH="-target-cpu=sandybridge"';
} elsif ( $MACH eq "titan" ) {
	$bldcmd .= ' TOOL_TARGET_ARCH="-target-cpu=istanbul"';
}
if (defined $ENV{MPAS_TOOL_DIR}) {
	$bldcmd .= " MPAS_TOOL_DIR=$ENV{MPAS_TOOL_DIR}";
}

system($bldcmd) == 0 or die "ERROR: $component buildlib $bldcmd failed: $?\n";

my $cpyobjs = "find $root_path -name *.mod -exec cp -p {} $OBJROOT/$component_dir/obj/. \\\;";

system($cpyobjs) == 0 or die "ERROR: $component buildlib $cpyobjs failed: $?\n";

my $cpylib = "cp -p $root_path/lib$component_dir.a ${LIBROOT}/lib$component_dir.a";

system($cpylib) == 0 or die "ERROR: $component buildlib $cpylib failed: $?\n";
