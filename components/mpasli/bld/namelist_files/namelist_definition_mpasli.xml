<?xml version="1.0"?>

<namelist_definition>

<!-- Each namelist variable is defined in an <entry> element.  The
     content of the element is the documentation of how the variable is
     used.  Other aspects of the variable's definition are expressed as
     attributes of the <entry> element.  Note that it is an XML requirement
     that the attribute values are enclosed in quotes.  The attributes are:

     id
          The variable's name.  *** N.B. *** The name must be lower case.
          The module convert all namelist variable names to lower case
          since Fortran is case insensitive.

     type
          An abbreviation of the fortran declaration for the variable.
	  Valid declarations are:

		  char*n
		  integer
		  logical
		  real

	  Any of these types may be followed by a comma separated list of
	  integers enclosed in parenthesis to indicate an array.

	  The current namelist validation code only distinquishes between
	  string and non-string types.

     input_pathname
          Only include this attribute to indicate that the variable
          contains the pathname of an input dataset that resides in the
          CESM inputdata directory tree.

	  The recognized values are "abs" to indicate that an absolute
          pathname is required, or "rel:var_name" to indicate that the
          pathname is relative and that the namelist variable "var_name"
          contains the absolute root directory.

     category
          A category assigned for organizing the documentation.

     group
          The namelist group that the variable is declared in.

     valid_values
          This is an optional attribute that is mainly useful for variables
          that have only a small number of allowed values.
                                                                        -->
<!-- &time_management -->

<entry id="config_do_restart" type="logical"
	category="time_management" group="time_management" >
Determines if the initial conditions should be read from a restart file, or an input file.

Default: Set internally in the glc_comp_mct.F driver.
</entry>

<entry id="config_Restart_timestamp_name" type="char*512"
	category="time_management" group="time_management" >
Path to the filename for restart timestamps to be read and written from.

Default: rpointer.glc
</entry>

<entry id="config_start_time" type="char*512"
	category="time_management" group="time_management" >
Timestamp describing the initial time of the simulation. If it is set to 'file', the initial time is read from restart_timestamp.

Default: Set internally in the glc_comp_mct.F driver to be consistent with the coupler.
</entry>

<entry id="config_stop_time" type="char*512"
	category="time_management" group="time_management" >
Timestamp descriping the final time of the simulation. If it is set to 'none' the final time is determined from config_start_time and config_run_duration.

Default: Set internally in the glc_comp_mct.F driver to be consistent with the coupler.
</entry>

<entry id="config_run_duration" type="char*512"
	category="time_management" group="time_management" >
Timestamp describing the length of the simulation. If it is set to 'none' the duration is determined from config_start_time and config_stop_time. config_run_duration overrides inconsistent values of config_stop_time.

Default: Set internally in the glc_comp_mct.F driver to be consistent with the coupler.
</entry>

<entry id="config_calendar_type" type="char*256"
	category="time_management" group="time_management" valid_values="gregorian,gregorian_noleap" >
Selection of the type of calendar that should be used in the simulation.

Valid Values: 'gregorian', 'gregorian_noleap'
Default: gregorian_noleap
</entry>

<!-- &io -->

<entry id="config_stats_interval" type="integer"
	category="io" group="io">
Integer specifying interval (number of timesteps) for writing global/local statistics. If set to 0, then statistics are not written (except perhaps at startup, as determined by 'config_write_stats_on_startup').

Default: 0
</entry>

<entry id="config_write_stats_on_startup" type="logical"
	category="io" group="io" >
Logical flag determining if statistics should be written prior to the first time step.

Valid values: .true. or .false.
Default: .true.
</entry>

<entry id="config_stats_cell_ID" type="integer"
	category="io" group="io" >
Global ID for the cell selected for local statistics/diagnostics.

Valid values: Any positive integer value greater than 0 and less than or equal to the number of cells in the grid.
Default: 1
</entry>

<entry id="config_write_output_on_startup" type="logical"
	category="io" group="io" >
Logical flag determining if output should be written prior to the first time step.

Valid values: .true. or .false.
Default: .true.
</entry>

<entry id="config_pio_num_iotasks" type="integer"
	category="io" group="io" >
Integer specifying how many IO tasks should be used within the PIO library. A value of 0 causes all MPI tasks to also be IO tasks. IO tasks are requried to write contiguous blocks of data to a file.

Valid values: Any positive integer value greater than or equal to 0.
Default: 0
</entry>

<entry id="config_pio_stride" type="integer"
	category="io" group="io" >
Integer specifying the stride of each IO task.

Valid values: Any positive integer value greater than 0.
Default: 1
</entry>

<entry id="config_year_digits" type="integer"
	category="io" group="io" >
Integer specifying the number of digits used to represent the year in time strings.

Valid values: Any positive integer value greater than 0.
Default: 4
</entry>

<!-- &time_integration -->

<entry id="config_dt" type="char*512"
	category="time_integration" group="time_integration" >
Length of model time-step.

Valid values: Any time stamp in 'YYYY-MM-DD_hh:mm:ss' format. Items can be removed from the left if they are unused.
Default: Set by CESM scripts based on glc grid.
</entry>

<entry id="config_time_integration" type="char*512"
	category="time_integration" group="time_integration" 
	valid_values="forward_euler" >
Time integration method.

Valid values: 'forward_euler'
Default: 'forward_euler'
</entry>

<!-- &decomposition -->

<entry id="config_num_halos" type="integer"
	category="decomposition" group="decomposition" >
Determines the number of halo cells extending from a blocks owned cells (Called the 0-Halo). The default of 3 is the minimum that can be used with monotonic advection.

Valid values: Any positive integer value.
Default: 3
</entry>

<entry id="config_block_decomp_file_prefix" type="char*512"
	category="decomposition" group="decomposition" >
Defines the prefix for the block decomposition file. Can include a path. The number of blocks is appended to the end of the prefix at run-time.

Valid values: Any path/prefix to a block decomposition file.
Default: 'block.graph.info.part.'
</entry>

<entry id="config_number_of_blocks" type="integer"
	category="decomposition" group="decomposition" >
Determines the number of blocks a simulation should be run with. If it is set to 0, the number of blocks is the same as the number of MPI tasks at run-time.

Valid values: Any integer greater than or equal to 0.
Default: 0
</entry>

<entry id="config_explicit_proc_decomp" type="logical"
	category="decomposition" group="decomposition" >
Determines if an explicit processor decomposition should be used. This is only useful if multiple blocks per processor are used.

Valid values: .true. or .false.
Default: .false.
</entry>

<entry id="config_proc_decomp_file_prefix" type="char*512"
	category="decomposition" group="decomposition" >
Defines the prefix for the processor decomposition file. This file is only read if config_explicit_proc_decomp is .true. The number of processors is appended to the end of the prefix at run-time.

Valid values: Any path/prefix to a processor decomposition file.
Default: 'proc.graph.info.part'
</entry>


<!-- &debug -->

<entry id="config_print_thickness_advection_info" type="logical"
	category="debug" group="debug" >
If true, prints additional information about thickness advection to log file.

Valid values: .true. or .false.
Default: .false.
</entry>

<entry id="config_always_compute_fem_grid" type="logical"
	category="debug" group="debug" >
If true, always compute finite-element grid information for external dycores rather than only doing so when the ice extent changes.

Valid values: .true. or .false.
Default: .false.
</entry>

<!-- &velocity_solver -->

<entry id="config_velocity_solver" type="char*512"
	category="velocity_solver" group="velocity_solver"
	valid_values="sia,L1L2,FO,Stokes,none" >
Selection of the method for solving ice velocity. 'L1L2', 'FO', and 'Stokes' require compiling with external dycores. 'none' skips the calculation of velocity so the velocity field will be 0 or set to a field read from an input file.

Valid values: 'sia', 'L1L2', 'FO', 'Stokes', 'none'
Default: 'sia'
</entry>

<entry id="config_sia_tangent_slope_calculation" type="char*512"
	category="velocity_solver" group="velocity_solver"
	valid_values="from_vertex_barycentric,from_vertex_barycentric_kiteareas,from_normal_slope" >
Selection of the method for calculating the tangent component of surface slope at edges needed by the SIA velocity solver.
'from_vertex_barycentric' interpolates upperSurface values from cell centers to vertices using the barycentric interpolation routine in operators (mpas_cells_to_points_using_baryweights) and then calculates the slope between vertices.  It works for obtuse triangles, but will not work correctly across the edges of periodic meshes.
'from_vertex_barycentric_kiteareas' interpolates upperSurface values from cell centers to vertices using barycentric interpolation based on kiterea values and then calculates the slope between vertices.  It will work across the edges of periodic meshes, but will not work correctly for obtuse triangles.
'from_normal_slope' uses the vector operator mpas_tangential_vector_1d to calculate the tangent slopes from the normal slopes on the edges of the adjacent cells.  It will work for any mesh configuration, but is the least accurate method.

Valid values: 'from_vertex_barycentric', 'from_vertex_barycentric_kiteareas', 'from_normal_slope'
Default: 'from_vertex_barycentric'
</entry>

<entry id="config_flowParamA_calculation" type="char*512"
	category="velocity_solver" group="velocity_solver"
	valid_values="constant,PB1982,CP2010" >
Selection of the method for calculating the flow law parameter A.  If 'constant' is selected, the value is set to config_default_flowParamA.  The other options are calculated from the temperature field.

Valid values: 'constant', 'PB1982', 'CP2010'
Default: 'CP2010'
</entry>

<entry id="config_do_velocity_reconstruction_for_external_dycore" type="logical"
	category="velocity_solver" group="velocity_solver">
By default, external, higher-order dycores return the uReconstructX and uReconstructY fields (which are the native locations of their FEM solution).  If this option is set to .true., uReconstructX and uReconstructY will be calculated by MPAS using framework's vector reconstruction routines based on the values of normalVelocity supplied by the external dycore.  This provides a way to test the calculation of normalVelocity in the interface.

Valid values: .true. or .false.
Default: .false.
</entry>

<!-- &advection -->

<entry id="config_thickness_advection" type="char*512"
	category="advection" group="advection"
	valid_values="fo,none" >
Selection of the method for advecting thickness.

Valid values: 'fo', 'none'
Default: 'fo'
</entry>

<entry id="config_tracer_advection" type="char*512"
	category="advection" group="advection"
	valid_values="none" >
Selection of the method for advecting tracers.

Valid values: 'none'
Default: 'none'
</entry>

<!-- &physical_parameters -->

<entry id="config_ice_density" type="real"
	category="physical_parameters" group="physical_parameters">
ice density to use, units="kg m^{-3}"

Default: '910.0'
</entry>

<entry id="config_ocean_density" type="real"
	category="physical_parameters" group="physical_parameters">
ocean density to use for calculating floatation, units="kg m^{-3}"

Default: '1028.0'
</entry>

<entry id="config_sea_level" type="real"
	category="physical_parameters" group="physical_parameters">
sea level to use for calculating floatation, units="m above datum"

Default: '0.0'
</entry>

<entry id="config_default_flowParamA" type="real"
	category="physical_parameters" group="physical_parameters">
Defines the default value of the flow law parameter A to be used if it is not being calculated from ice temperature, units="s^{-1} Pa^{-n}"

Default: '3.1709792e-24'
</entry>

<entry id="config_enhancementFactor" type="real"
	category="physical_parameters" group="physical_parameters">
multiplier on the flow parameter A

Default: '1.0'
</entry>

<entry id="config_flowLawExponent" type="real"
	category="physical_parameters" group="physical_parameters">
Defines the value of the Glen flow law exponent, n

Default: '3.0'
</entry>

<entry id="config_dynamic_thickness" type="real"
	category="physical_parameters" group="physical_parameters">
Defines the ice thickness below which dynamics are not calculated, units="m of ice"

Default: '10.0'
</entry>

</namelist_definition>

