{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Energy Exascale Earth System Model (E3SM)","text":"<p>E3SM is a state-of-the-art fully coupled model of the Earth's climate including important biogeochemical and cryospheric processes. It is intended to address the most challenging and demanding climate-change research problems and Department of Energy mission needs while efficiently using DOE Leadership Computing Facilities.</p> <p>Note</p> <p>This is the future home for all documentation specific to E3SM and its components. Until complete, some documentation will be found at the project's Confluence wiki</p>"},{"location":"#e3sm-basics","title":"E3SM Basics","text":"<ul> <li>Installation</li> <li>User Guide</li> <li>Development</li> </ul>"},{"location":"#component-models","title":"Component Models","text":"<ul> <li>EAM</li> <li>EAMxx \u2014 not yet supported.</li> <li>ELM</li> <li>MOSART</li> <li>MPAS-Ocean</li> <li>MPAS-seaice</li> <li>Omega \u2014 not yet supported.</li> </ul>"},{"location":"#tools","title":"Tools","text":"<ul> <li>generate_domain_files</li> </ul> <p>Please see Developing Docs to learn about how to contribute to the documentation.</p>"},{"location":"installation/","title":"Installation Guide","text":"<p>E3SM is not available as a pre-compiled binary.  You install E3SM by cloning the source code using git and building the executable on your local platform after making some choices on model configuration (addressed in the User Guide).</p> <p>It is recommended that you install E3SM on a supported platform. (See Hardware/Software Configuration)</p> <p>The E3SM Project can not assist with installation on an un-supported platform but can point you in the right direction. If you wish to port E3SM to your machine, first check that the target machine has the software prerequisites detailed in Hardware/Software Configuration.</p> <p>E3SM uses the CIME Case Control System (CCS) and a machine must be described to the CCS in order to build and run E3SM.  See the CIME Porting Guide.</p> <p>Once you are on a supported machine, clone the source code by following the first steps (2-4 and 6) in the Development Getting Started Guide.</p> <p>To start configuration cases and building the model, see the User Guide</p>"},{"location":"EAM/","title":"The E3SM Atmosphere Model (EAM)","text":"<p>EAM is the state-of-the-art atmospheric component of the E3SM model that uses a Spectral Element Dynamical Core and a suite of parameterizations to represent a range of atmospheric processes, which are described in the Technical Guide (see below). Its nominal resolution is roughly 100km in the horizontal, with a model time step of 1800 seconds, and runs with 80 layers in the vertical (model top of 60km).</p> <ul> <li>The EAM User Guide explains how to control EAM when its running within E3SM.</li> <li>The EAM Developer Guide explains EAM data structures and how to write new code.</li> <li>The EAM Technical Guide explains the science behind EAM's code</li> </ul>"},{"location":"EAM/dev-guide/","title":"EAM Developer Guide","text":"<p>coming soon.</p>"},{"location":"EAM/tech-guide/","title":"EAM Technical Guide","text":"<p>This Technical Guide describes the physics of version 3 of the E3SM Atmospheric Model</p>"},{"location":"EAM/tech-guide/#dynamics-and-physics","title":"Dynamics and Physics","text":"<ul> <li> <p>HOMME: Dynamical core.</p> </li> <li> <p>Atmospheric-Grid: Grid used with dynamical core</p> </li> <li> <p>P3: Stratiform cloud microphysics scheme.</p> </li> <li> <p>CLUBB: Parameterization of subgrid-scale turbulence and clouds.</p> </li> <li> <p>Zhang-McFarlane: Deep convection parameterization.</p> </li> <li> <p>RRTMG: Parameterization of radiation.</p> </li> <li> <p>ORODRAG: Parameterization of orographic drag</p> </li> <li> <p>MAM: Primary parameterization schemes used to represent aerosols.</p> </li> <li> <p>VBS: Parameterization of secondary organic aerosols.</p> </li> <li> <p>Dust: Parameterization of dust emissions.</p> </li> <li> <p>OCEANFILMS: Parameterization of sea soray irganic aerosol emissions.</p> </li> <li> <p>chemUCI + Linoz v3: Interactive atmospheric chemistry packages.</p> </li> </ul>"},{"location":"EAM/tech-guide/#diagnostic-outputs","title":"Diagnostic outputs","text":"<ul> <li> <p>COSP: Scheme that allows the model to output satellite simulator output.</p> </li> <li> <p>ARM Diags: Diagnostic package that allows the model output to be compared against ARM measurements.</p> </li> </ul>"},{"location":"EAM/tech-guide/armdiags/","title":"ARM diagnostics","text":""},{"location":"EAM/tech-guide/armdiags/#overview","title":"Overview","text":"<p>The ARM data-oriented metrics and diagnostics package (ARM Diags) was developed to facilitate the use of ARM data in climate model evaluation and model intercomparison (Zhang et al., 2020)<sup>1</sup>. It includes ARM data sets, compiled from multiple ARM data products, and a Python-based analysis toolkit for computation ad visualization. It also includes simulation data from models participating the CMIP, which allows climate-modeling groups to compare a new, candidate version of their model to existing CMIP models. The ARM Diags has been applied in several model evaluation studies to help address a range of issues in climate models (Zheng et al., 2023;<sup>2</sup> Emmenegger et al., 2022;<sup>3</sup> Zhang et al., 2018<sup>4</sup>). The Majority of ARM Diags sets are ported into E3SM Diags (Zhang et al., 2022)<sup>5</sup> for routine evaluation of the model.</p>"},{"location":"EAM/tech-guide/armdiags/#to-enable-the-use-of-arm-diags","title":"To enable the use of ARM Diags","text":"<p>To enable using ARM Diags for a simulation, often, a new tape that output at high-frequency over limited-area (nearest grid box to supported ARM site) needs to be included in the namelist file, an example as follows:</p> <pre><code>fincl7 = 'PS','Q','T','Z3','CLOUD','CONCLD','CLDICE',\n   'CLDLIQ','FREQR','REI','REL','PRECT','TMQ','PRECC',\n   'TREFHT','QREFHT','OMEGA','CLDTOT','LHFLX','SHFLX',\n   'FLDS','FSDS','FLNS','FSNS','FLNSC','FSDSC','FSNSC',\n   'AODVIS','AODABS','LS_FLXPRC','LS_FLXSNW',\n   'LS_REFFRAIN','ZMFLXPRC','ZMFLXSNW','CCN1','CCN2',\n   'CCN3','CCN4','CCN5','num_a1','num_a2','num_a3',\n   'num_a4','so4_a1','so4_a2','so4_a3','AREL','TGCLDLWP',\n   'AQRAIN','ANRAIN','FREQR','PRECL','RELHUM'\nfincl7lonlat='262.5e_36.6n','203.4e_71.3n','147.4e_2.0s',\n   '166.9e_0.5s','130.9e_12.4s','331.97e_39.09n'\n</code></pre> <p>Note that in this example fincl7 should set to write output at hourly (<code>nhtfrq = -1</code>). And here additional variables are included for ARM simulator analysis. The ARM site information is shown below:</p> <pre><code>    \"sgpc1\": [\"97.5W 36.4N Oklahoma ARM\"],\n\n    \"nsac1\": [\"156.6W 71.3N Barrow ARM\"],\n\n    \"twpc1\": [\"147.4E 2.1S Manus ARM\"],\n\n    \"twpc2\": [\"166.9E 0.5S Nauru ARM\"],\n\n    \"twpc3\": [\"130.9E 12.4S Darwin ARM\"],\n\n    \"enac1\": [\"28.0E 39.1N Graciosa Island ARM\"], \n</code></pre>"},{"location":"EAM/tech-guide/armdiags/#diagnostics-and-metrics-currently-implemented-in-the-arm-diags","title":"Diagnostics and metrics currently implemented in the ARM Diags","text":"Statistical Metrics Variables Time sampling Line plots and Taylor diagrams for annual cycle variability of each variable Precipitation, column water vapor, surface energy budget components, near-surface temperature and specific humidity, surface pressure, total cloud fraction, and aerosol optical depth. Monthly mean Contour and vertical profiles of annual cycle and diurnal cycle of cloud fraction Vertical profiles of cloud fraction Hourly mean Line and harmonic dial plots of diurnal cycle of precipitation Surface precipitation rate Hourly mean Probability density function (PDF) plots of precipitation rate Surface precipitation rate Hourly mean CCN Annual Cycles CCN number concentrations at 0.1%, 0.2%, 0.5% and 1.0% supersaturation levels Hourly mean Aerosol Annual Cycles Total aerosol number concentration Hourly mean Aerosol Chemical Annual Cycles Organic, sulfate, nitrate, ammonium, chloride mass concentration Hourly mean Process-oriented metrics Variables Time sampling Convection Onset 1. Surface precipitation rate   2. Column Precipitable Water Vapor Hourly mean Aerosol-CCN Activation 1. Total aerosol number concentration   2. CCN number concentrations at different supersaturation levels (0.1%, 0.2%, 0.5% and 1.0) Hourly mean <ol> <li> <p>C. Zhang, S. Xie, C. Tao, S. Tang, T. Emmenegger, J. D. Neelin, K. A. Schiro, W. Lin, and Z. Shaheen. The ARM Data-Oriented Metrics and Diagnostics Package for Climate Models: A New Tool for Evaluating Climate Models with Field Data. Bulletin of the American Meteorological Society, 101(10):E1619\u2013E1627, October 2020. URL: https://journals.ametsoc.org/view/journals/bams/101/10/bamsD190282.xml (visited on 2024-03-29), doi:10.1175/BAMS-D-19-0282.1.\u00a0\u21a9</p> </li> <li> <p>Xiaojian Zheng, Cheng Tao, Chengzhu Zhang, Shaocheng Xie, Yuying Zhang, Baike Xi, and Xiquan Dong. Assessment of CMIP5 and CMIP6 AMIP Simulated Clouds and Surface Shortwave Radiation Using ARM Observations over Different Climate Regions. Journal of Climate, 36(24):8475\u20138495, November 2023. URL: https://journals.ametsoc.org/view/journals/clim/36/24/JCLI-D-23-0247.1.xml (visited on 2024-03-29), doi:10.1175/JCLI-D-23-0247.1.\u00a0\u21a9</p> </li> <li> <p>Todd Emmenegger, Yi-Hung Kuo, Shaocheng Xie, Chengzhu Zhang, Cheng Tao, and J. David Neelin. Evaluating Tropical Precipitation Relations in CMIP6 Models with ARM Data. Journal of Climate, 35(19):6343\u20136360, October 2022. URL: https://journals.ametsoc.org/view/journals/clim/35/19/JCLI-D-21-0386.1.xml (visited on 2024-03-29), doi:10.1175/JCLI-D-21-0386.1.\u00a0\u21a9</p> </li> <li> <p>Chengzhu Zhang, Shaocheng Xie, Stephen A. Klein, Hsi\u2010yen Ma, Shuaiqi Tang, Kwinten Van Weverberg, Cyril J. Morcrette, and Jon Petch. CAUSES: Diagnosis of the Summertime Warm Bias in CMIP5 Climate Models at the ARM Southern Great Plains Site. Journal of Geophysical Research: Atmospheres, 123(6):2968\u20132992, March 2018. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1002/2017JD027200 (visited on 2024-03-29), doi:10.1002/2017JD027200.\u00a0\u21a9</p> </li> <li> <p>Chengzhu Zhang, Jean-Christophe Golaz, Ryan Forsyth, Tom Vo, Shaocheng Xie, Zeshawn Shaheen, Gerald L. Potter, Xylar S. Asay-Davis, Charles S. Zender, Wuyin Lin, Chih-Chieh Chen, Chris R. Terai, Salil Mahajan, Tian Zhou, Karthik Balaguru, Qi Tang, Cheng Tao, Yuying Zhang, Todd Emmenegger, Susannah Burrows, and Paul A. Ullrich. The E3SM Diagnostics Package (E3SM Diags v2.7): a Python-based diagnostics package for Earth system model evaluation. Geoscientific Model Development, 15(24):9031\u20139056, December 2022. URL: https://gmd.copernicus.org/articles/15/9031/2022/ (visited on 2024-03-29), doi:10.5194/gmd-15-9031-2022.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/atmosphere-grid-overview/","title":"Atmosphere Grid Overview","text":"<p>The E3SM atmosphere component uses a cube-sphere grid, partly to avoid the convergence of latitude lines at the poles. The grid is constructed by subdividing each cube face into NxN elements and then projecting these to a spherical geometry.</p>"},{"location":"EAM/tech-guide/atmosphere-grid-overview/#the-np4-gll-grid","title":"The np4 GLL Grid","text":"<p>The atmospheric dycore is based on the spectral element (SE) method using the Gauss-Lobatto-Legendre (GLL) quadrature aproach. An irregular grid of 4x4 GLL nodes (i.e. np4) is used to represent the model state within each element of the cube-sphere grid. The illustration below indicates the GLL nodes of the ne4np4 grid with green dots, while the elements are outlined in blue. Notice the irregular spacing of the GLL nodes, which causes them to cluster at the element corners.</p> <p>While the atmosphere history output is primarily on the physics grid (see below), it is possible to output on the np4 grid. The input topography and initial condition data must be on the np4 grid. When mapping between SE and FV grids TempestRemap should be used. SE GLL data does not naturally represent as FV type cell averages, and thus mapping tools which only work with cell centered data (ESMF, SCRIP) should be avoided.  </p> <p>For a np4 grid with N elements per cube edge the total number of unique GLL nodes can be calculated as: <code>N*(np-1)^2 + 2</code></p> <p></p>"},{"location":"EAM/tech-guide/atmosphere-grid-overview/#the-pg2-physgrid","title":"The pg2 \"physgrid\"","text":"<p>Starting in v2, physics calculations and history output in E3SM use a quasi-equal area finite volume (FV) grid, rather the GLL nodes of the spectral element grid. This FV grid is constructed byt dividing each spectral element of the cube-sphere into a grid of 2x2 subcells, referred to as \"pg2\" or \"physgrid\" (shown below). Finer divisions of the spectral element are possible, such as 3x3, but these grids do not seem to have any notable advantages (see Hannah et al. 2021). Quantities on the physgrid should be considered cell average values over each FV cell, rather than nodal values.</p> <p>For a pg2 grid with N elements per cube edge the total number of physics columns can be calculated as: <code>ncol = N*N*6*(2*2)</code></p> <p></p>"},{"location":"EAM/tech-guide/chemUCIlinozv3/","title":"chemUCI and Linoz","text":""},{"location":"EAM/tech-guide/chemUCIlinozv3/#overview","title":"Overview","text":"<p>Atmospheric interactive chemistry is handled by chemUCI (in the troposphere) and Linoz v3 (in the stratosphere). chemUCI consists of 28 advected tracers for the O3-CH4-HOx-NOx-NMVOCs chemistry. Compared to E3SMv2, the E3SMv3 linearized stratospheric chemistry scheme (Linoz v3) expends the interactive species to include O3, N2O, NOy, and CH4. The boundary between stratosphere and troposphere adopts the e90 tropopause algorithm.</p>"},{"location":"EAM/tech-guide/chemUCIlinozv3/#namelist-parameters","title":"Namelist parameters","text":"<p>chemUCI and Linoz Namelist Parameters</p>"},{"location":"EAM/tech-guide/clubb/","title":"Cloud Layers Unified By Binormals","text":""},{"location":"EAM/tech-guide/clubb/#overview","title":"Overview","text":"<p>The Cloud Layers Unified By Binormals (CLUBB) parameterization is a parameterization of subgrid-scale turbulence and clouds.<sup>1</sup><sup>2</sup><sup>3</sup><sup>4</sup> It prognoses turbulent fluxes of heat, moisture, and momentum, and it diagnoses the liquid cloud fraction and liquid water mixing ratio.  To do so, it prognoses higher-order turbulence moments and closes those prognostic equations by use of an assumed double-Gaussian shape of the subgrid probability density function.  CLUBB operates throughout the troposphere, but it contributes especially to the planetary boundary layer and low-cloud regimes, including stratocumulus and shallow cumulus regimes.  </p>"},{"location":"EAM/tech-guide/clubb/#namelist-parameters","title":"Namelist parameters","text":"<p>CLUBB Namelist Parameters</p> <ol> <li> <p>Vincent E. Larson. CLUBB-SILHS: A parameterization of subgrid variability in the atmosphere. March 2022. arXiv:1711.03675 [physics]. URL: http://arxiv.org/abs/1711.03675 (visited on 2024-03-29), doi:10.48550/arXiv.1711.03675.\u00a0\u21a9</p> </li> <li> <p>Peter A. Bogenschutz, Andrew Gettelman, Cecile Hannay, Vincent E. Larson, Richard B. Neale, Cheryl Craig, and Chih-Chieh Chen. The path to CAM6: coupled simulations with CAM5.4 and CAM5.5. Geoscientific Model Development, 11(1):235\u2013255, January 2018. URL: https://gmd.copernicus.org/articles/11/235/2018/ (visited on 2024-03-29), doi:10.5194/gmd-11-235-2018.\u00a0\u21a9</p> </li> <li> <p>Vincent E. Larson and Jean-Christophe Golaz. Using Probability Density Functions to Derive Consistent Closure Relationships among Higher-Order Moments. Monthly Weather Review, 133(4):1023\u20131042, April 2005. URL: https://journals.ametsoc.org/view/journals/mwre/133/4/mwr2902.1.xml (visited on 2024-03-29), doi:10.1175/MWR2902.1.\u00a0\u21a9</p> </li> <li> <p>Jean-Christophe Golaz, Vincent E. Larson, and William R. Cotton. A PDF-Based Model for Boundary Layer Clouds. Part I: Method and Model Description. Journal of the Atmospheric Sciences, 59(24):3540\u20133551, December 2002. URL: https://journals.ametsoc.org/view/journals/atsc/59/24/1520-0469_2002_059_3540_apbmfb_2.0.co_2.xml (visited on 2024-03-29), doi:10.1175/1520-0469(2002)059&lt;3540:APBMFB&gt;2.0.CO;2.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/cosp/","title":"Cloud Feedback Model Intercomparison Project (CFMIP) Observation Simulator Package","text":""},{"location":"EAM/tech-guide/cosp/#overview","title":"Overview","text":"<p>The Cloud Feedback Model Intercomparison Project (CFMIP) Observation Simulator Package (COSP; Bodas-Salcedo et al., 2011;<sup>1</sup> Swales et al., 2018;<sup>2</sup> Zhang et al., 2019;<sup>3</sup> Zhang et al., 2024<sup>4</sup>) was developed to improve the consistency between model clouds and satellite observations. COSP contains several independent satellite simulators for better comparing model clouds with satellite measurements collected by the International Satellite Cloud Climatology Project (ISCCP), the Moderate Resolution Imaging Spectroradiometer (MODIS), the Multi-angle Imaging SpectroRadiometer (MISR), Cloud-Aerosol Lidar and Infrared Pathfinder Satellite Observation (CALIPSO), and CloudSat. The use of satellite simulators will not only make a fairer comparison between model clouds and satellite data but also allow a more in-depth analysis of clouds. For example, clouds can be assessed in terms of their optical properties and vertical location, which dictate their radiative effects.</p>"},{"location":"EAM/tech-guide/cosp/#namelist-parameters","title":"Namelist parameters","text":"<p>COSP Namelist Parameters</p>"},{"location":"EAM/tech-guide/cosp/#to-turn-on-cosp-outputs","title":"To turn on COSP outputs","text":"<p>Run (add to the run script) the following command before running <code>./case.setup</code></p> <p><code>./xmlchange --id CAM_CONFIG_OPTS --append --val='-cosp'</code></p> Related Outputs Description <code>FISCCP1_COSP</code> Grid-box fraction covered by each ISCCP D level cloud type <code>CLMODIS</code> MODIS Cloud Area Fraction <code>CLD_MISR</code> Cloud Fraction from MISR Simulator <code>CLDTOT_CAL</code> Calipso Total Cloud Fraction <code>CLDHGH_CAL</code> Calipso High-level Cloud Fraction <code>CLDMED_CAL</code> Calipso Mid-level Cloud Fraction <code>CLDLOW_CAL</code> Calipso Low-level Cloud Fraction <code>CLD_CAL_TMPLIQ</code> Calipso Liquid Cloud Fraction as a function of temperature <code>CLD_CAL_TMPICE</code> Calipso Ice Cloud Fraction as a function of temperature <ol> <li> <p>A. Bodas-Salcedo, M. J. Webb, S. Bony, H. Chepfer, J.-L. Dufresne, S. A. Klein, Y. Zhang, R. Marchand, J. M. Haynes, R. Pincus, and V. O. John. COSP: Satellite simulation software for model assessment. Bulletin of the American Meteorological Society, 92(8):1023\u20131043, August 2011. URL: https://journals.ametsoc.org/doi/10.1175/2011BAMS2856.1 (visited on 2024-03-29), doi:10.1175/2011BAMS2856.1.\u00a0\u21a9</p> </li> <li> <p>Dustin J. Swales, Robert Pincus, and Alejandro Bodas-Salcedo. The Cloud Feedback Model Intercomparison Project Observational Simulator Package: Version 2. Geoscientific Model Development, 11(1):77\u201381, January 2018. URL: https://gmd.copernicus.org/articles/11/77/2018/ (visited on 2024-03-29), doi:10.5194/gmd-11-77-2018.\u00a0\u21a9</p> </li> <li> <p>Yuying Zhang, Shaocheng Xie, Wuyin Lin, Stephen A. Klein, Mark Zelinka, Po\u2010Lun Ma, Philip J. Rasch, Yun Qian, Qi Tang, and Hsi\u2010Yen Ma. Evaluation of Clouds in Version 1 of the E3SM Atmosphere Model With Satellite Simulators. Journal of Advances in Modeling Earth Systems, 11(5):1253\u20131268, May 2019. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2018MS001562 (visited on 2024-03-29), doi:10.1029/2018MS001562.\u00a0\u21a9</p> </li> <li> <p>Yuying Zhang, Shaocheng Xie, Yi Qin, Wuyin Lin, Jean-Christophe Golaz, Xue Zheng, Po-Lun Ma, Yun Qian, Qi Tang, Christopher R. Terai, and Meng Zhang. Understanding changes in cloud simulations from E3SM version 1 to version 2. Geoscientific Model Development, 17(1):169\u2013189, January 2024. URL: https://gmd.copernicus.org/articles/17/169/2024/ (visited on 2024-03-29), doi:10.5194/gmd-17-169-2024.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/dust/","title":"Dust aerosol","text":""},{"location":"EAM/tech-guide/dust/#overview","title":"Overview","text":"<p>Dust-related processes are represented in the E3SM atmosphere and land model components. In E3SMv3, dust deposition will also be coupled with the sea ice and ocean biogeochemistry in the ocean model. Total emission fluxes of dust particles are calculated at each model time step. A new dust emission scheme following Kok et al. (2014)<sup>1</sup> is implemented to E3SMv3, replacing the Zender scheme (Zender et al., 2003)<sup>2</sup> in E3SMv1 and v2 as the default option. The new dust emission scheme includes a time-varying soil erodibility factor for dust mobilization, and includes dust sources in high latitudes (e.g., &gt;60 degree N). A manuscript by Feng et al. is in prep to document the performance of the new emission scheme on dust life cycle and radiative effects in E3SMv3. Dust aerosol is represented in the accumulation and coarse aerosol modes of the MAM4 module following emission. Other dust properties such as optical properties and size distribution at emission are documented in Feng et al. (2022).<sup>3</sup></p>"},{"location":"EAM/tech-guide/dust/#namelist-parameters","title":"Namelist parameters","text":"<p>Dust Namelist Parameters</p> <ol> <li> <p>J. F. Kok, N. M. Mahowald, G. Fratini, J. A. Gillies, M. Ishizuka, J. F. Leys, M. Mikami, M.-S. Park, S.-U. Park, R. S. Van Pelt, and T. M. Zobeck. An improved dust emission model \u2013 Part 1: Model description and comparison against measurements. Atmospheric Chemistry and Physics, 14(23):13023\u201313041, December 2014. URL: https://acp.copernicus.org/articles/14/13023/2014/ (visited on 2024-03-29), doi:10.5194/acp-14-13023-2014.\u00a0\u21a9</p> </li> <li> <p>Charles S. Zender, Huisheng Bian, and David Newman. Mineral Dust Entrainment and Deposition (DEAD) model: Description and 1990s dust climatology. Journal of Geophysical Research: Atmospheres, 108(D14):2002JD002775, July 2003. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2002JD002775 (visited on 2024-03-29), doi:10.1029/2002JD002775.\u00a0\u21a9</p> </li> <li> <p>Y. Feng, H. Wang, P. J. Rasch, K. Zhang, W. Lin, Q. Tang, S. Xie, D. S. Hamilton, N. Mahowald, and H. Yu. Global Dust Cycle and Direct Radiative Effect in E3SM Version 1: Impact of Increasing Model Resolution. Journal of Advances in Modeling Earth Systems, 14(7):e2021MS002909, July 2022. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2021MS002909 (visited on 2024-03-29), doi:10.1029/2021MS002909.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/homme/","title":"High-Order Methods Modeling Environment","text":""},{"location":"EAM/tech-guide/homme/#overview","title":"Overview","text":"<p>EAM uses the a dynamical core (dycore) from the High Order Method Modeling Environment (HOMME).<sup>1</sup><sup>2</sup><sup>3</sup> The EAM dycore solves the atmospheric primitive equations governing the evolution of velocity, density, pressure and temperature, as well as the transport of water species and related hydrometers, aerosols and other atmospheric constituents.  The governing equations are written in a vertically lagrangian terrain following mass coordinate.  They are discretized with second order finite differences in the radial direction and spectral finite elements in the horizontal (surface of the sphere) directions, and advanced in time with a 3rd order accurate 5 stage Runge-Kutta method.  Dissipation is added through the use of monotoncity contraints on some advectiion terms, explicitly added hyperviscosity, and a Laplacian-based sponge layer in the first few layers at the model top.  The transported species  makes use of an efficient interpolatory semi-Lagrangian method.  EAMv3 uses 80 layers in the vertical.  The use of the spectral finite element method allows EAMv3 to run on fully unstructured grids, including the cubed-sphere grid (SE Atmosphere Grid Overview (EAM &amp; CAM)) which provides quasi-uniform resolution over the globe, and regionally refined meshes (RRM) which enhance horizontal resolution in regions of interest (Library of Regionally-Refined Model (RRM) Grids).</p>"},{"location":"EAM/tech-guide/homme/#namelist-parameters","title":"Namelist parameters","text":"<p>Many dynamical core parameters can not be changed independently.  For example, increasing the hyperviscosity coefficient may require reducing the hyperviscosity timestep.   Dycore timesteps are tuned for each resolution and the defaults are close to the CFL stability limit. For complete details, as well as their interactions, see EAM's HOMME dycore.</p> <p>HOMME Namelist Parameters</p> <ol> <li> <p>Mark A. Taylor and Aim\u00e9 Fournier. A compatible and conservative spectral element method on unstructured grids. Journal of Computational Physics, 229(17):5879\u20135895, August 2010. URL: https://linkinghub.elsevier.com/retrieve/pii/S0021999110001841 (visited on 2024-03-29), doi:10.1016/j.jcp.2010.04.008.\u00a0\u21a9</p> </li> <li> <p>O. Guba, M. A. Taylor, P. A. Ullrich, J. R. Overfelt, and M. N. Levy. The spectral element method on variable resolution grids: evaluating grid sensitivity and resolution-aware numerical viscosity. preprint, Numerical Methods, June 2014. URL: https://gmd.copernicus.org/preprints/7/4081/2014/gmdd-7-4081-2014.pdf (visited on 2024-03-29), doi:10.5194/gmdd-7-4081-2014.\u00a0\u21a9</p> </li> <li> <p>Mark A. Taylor, Oksana Guba, Andrew Steyer, Paul A. Ullrich, David M. Hall, and Christopher Eldred. An Energy Consistent Discretization of the Nonhydrostatic Equations in Primitive Variables. Journal of Advances in Modeling Earth Systems, 12(1):e2019MS001783, January 2020. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2019MS001783 (visited on 2024-03-29), doi:10.1029/2019MS001783.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/mam/","title":"Modal Aerosol Module","text":""},{"location":"EAM/tech-guide/mam/#mam5-overview","title":"MAM5 Overview","text":"<p>The Five-mode Modal Aerosol Model (MAM5) supersedes the MAM4 utilized in previous iterations of E3SM (E3SM-V1 and -V2). MAM5 introduces a fifth mode, specifically designed to represent stratospheric coarse mode aerosols, primarily originating from volcanic eruptions and DMS decomposition. This mode exclusively comprises sulfate aerosols, characterized by a smaller standard deviation (STD) value of 1.2. The STD value denotes the width of the aerosol mode, where a higher STD implies a greater gravitational settling effect (Wang et al., 2020;<sup>1</sup> Liu et al., 2012<sup>2</sup>). By setting the STD to 1.2, the simulated properties of volcanic aerosols align closely with observational findings (Mills et al., 2016).<sup>3</sup> MAM5 represents a pioneering aerosol model, effectively segregating tropospheric and stratospheric aerosols (Ke et al., in preparation), thereby mitigating the risk of overestimating dust and sea salt aerosols within the stratosphere in previous MAM4 (Visioni et al., 2021).<sup>4</sup> Volcanic eruptions derived from Neely and Schmidt (2016).<sup>5</sup></p>"},{"location":"EAM/tech-guide/mam/#mam4-overview","title":"MAM4 Overview","text":"<p>The representation of atmospheric aerosols and their roles in the Earth system by EAMv1/v2/v3 was inherited from the global aerosol-climate model EAMv0 and its four-mode modal aerosol module (MAM4), including Aitken, primary-carbon, accumulation, and coarse modes (Liu et al., 2016).<sup>6</sup> It treats a combination of processes, controlling the evolution of aerosols that are either directly emitted or converted from precursor gases from a variety of natural and anthropogenic sources. The processes include transport (by grid-scale wind, subgrid turbulence, convection, and sedimentation), aerosol microphysics (i.e., particle nucleation, condensation/evaporation of trace gases, aging, and coagulation), cloud processing (i.e., aqueous chemistry, scavenging by hydrometeors, resuspension from evaporating hydrometeors, and wet deposition), and dry deposition. Aerosol species in the original MAM4 (Liu et al., 2016)<sup>6</sup> include sulfate, primary organic aerosol (POA) or particulate organic matter (POM), secondary organic aerosol (SOA), black carbon (BC), sea salt, and mineral dust. As described by Wang et al. (2020),<sup>1</sup> the enhanced MAM4 in EAMv1/v2 added marine organic aerosol (MOA) to all four modes (Burrows et al., 2022).<sup>7</sup> In MAM4 of EAMv3, the Aitken mode has sulfate, sea salt, SOA and MOA; the primary-carbon mode has BC, POA and MOA; the accumulation and coarse modes include all seven species. Ammonium (NH4) and nitrate (NO3) aerosols are also explicitly treated in EAMv3 (Wu et al., 2022),<sup>8</sup> as an optional feature for research, in which new species (NH4, NO3, Ca, CO3, Na, Cl) are introduced to the Aitken, accumulation and coarse modes. All aerosol species within each of the four individual modes the MAM4 is assumed to be internally mixed and represented by a single number concentration, while particles are externally mixed among the different modes.</p>"},{"location":"EAM/tech-guide/mam/#sea-salt","title":"Sea salt","text":"<p>In MAM4, sea salt aerosol is represented in the Aitken, accumulation, and coarse mode with particle emission size (diameter) ranges of 0.02-0.08, 0.08-1.0, and 1.0-10.0 \u03bcm, respectively. The emission flux of natural sea salt is first divided into 31 size bins, following the parameterization of M\u00e5rtensson et al. (2003)<sup>9</sup> and Monahan et al. (1986),<sup>10</sup> and then redistributed to the three MAM4 size modes.</p>"},{"location":"EAM/tech-guide/mam/#namelist-parameters","title":"Namelist parameters","text":"<p>MAM Namelist Parameters</p> <ol> <li> <p>Hailong Wang, Richard C. Easter, Rudong Zhang, Po\u2010Lun Ma, Balwinder Singh, Kai Zhang, Dilip Ganguly, Philip J. Rasch, Susannah M. Burrows, Steven J. Ghan, Sijia Lou, Yun Qian, Yang Yang, Yan Feng, Mark Flanner, L. Ruby Leung, Xiaohong Liu, Manish Shrivastava, Jian Sun, Qi Tang, Shaocheng Xie, and Jin\u2010Ho Yoon. Aerosols in the E3SM Version 1: New Developments and Their Impacts on Radiative Forcing. Journal of Advances in Modeling Earth Systems, 12(1):e2019MS001851, January 2020. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2019MS001851 (visited on 2024-03-29), doi:10.1029/2019MS001851.\u00a0\u21a9\u21a9</p> </li> <li> <p>X. Liu, R. C. Easter, S. J. Ghan, R. Zaveri, P. Rasch, X. Shi, J.-F. Lamarque, A. Gettelman, H. Morrison, F. Vitt, A. Conley, S. Park, R. Neale, C. Hannay, A. M. L. Ekman, P. Hess, N. Mahowald, W. Collins, M. J. Iacono, C. S. Bretherton, M. G. Flanner, and D. Mitchell. Toward a minimal representation of aerosols in climate models: description and evaluation in the Community Atmosphere Model CAM5. Geoscientific Model Development, 5(3):709\u2013739, May 2012. URL: https://gmd.copernicus.org/articles/5/709/2012/ (visited on 2024-03-29), doi:10.5194/gmd-5-709-2012.\u00a0\u21a9</p> </li> <li> <p>Michael J. Mills, Anja Schmidt, Richard Easter, Susan Solomon, Douglas E. Kinnison, Steven J. Ghan, Ryan R. Neely, Daniel R. Marsh, Andrew Conley, Charles G. Bardeen, and Andrew Gettelman. Global volcanic aerosol properties derived from emissions, 1990\u20132014, using CESM1(WACCM). Journal of Geophysical Research: Atmospheres, 121(5):2332\u20132348, March 2016. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1002/2015JD024290 (visited on 2024-04-25), doi:10.1002/2015JD024290.\u00a0\u21a9</p> </li> <li> <p>Daniele Visioni, Simone Tilmes, Charles Bardeen, Michael Mills, Douglas G. MacMartin, Ben Kravitz, and Jadwiga H. Richter. Limitations of assuming internal mixing between different aerosol species: a case study with sulfate geoengineering simulations. Atmospheric Chemistry and Physics, 22(3):1739\u20131756, February 2022. URL: https://acp.copernicus.org/articles/22/1739/2022/ (visited on 2024-04-25), doi:10.5194/acp-22-1739-2022.\u00a0\u21a9</p> </li> <li> <p>R. R. Neely III and A. Schmidt. VolcanEESM: Global volcanic sulphur dioxide (SO2) emissions database from 1850 to present - Version 1.0. 2016. URL: https://catalogue.ceda.ac.uk/uuid/a8a7e52b299a46c9b09d8e56b283d385 (visited on 2024-04-25), doi:10.5285/76EBDC0B-0EED-4F70-B89E-55E606BCD568.\u00a0\u21a9</p> </li> <li> <p>X. Liu, P.-L. Ma, H. Wang, S. Tilmes, B. Singh, R. C. Easter, S. J. Ghan, and P. J. Rasch. Description and evaluation of a new four-mode version of the Modal Aerosol Module (MAM4) within version 5.3 of the Community Atmosphere Model. Geoscientific Model Development, 9(2):505\u2013522, February 2016. URL: https://gmd.copernicus.org/articles/9/505/2016/ (visited on 2024-03-29), doi:10.5194/gmd-9-505-2016.\u00a0\u21a9\u21a9</p> </li> <li> <p>Susannah M. Burrows, Richard C. Easter, Xiaohong Liu, Po-Lun Ma, Hailong Wang, Scott M. Elliott, Balwinder Singh, Kai Zhang, and Philip J. Rasch. OCEANFILMS (Organic Compounds from Ecosystems to Aerosols: Natural Films and Interfaces via Langmuir Molecular Surfactants) sea spray organic aerosol emissions \u2013 implementation in a global climate model and impacts on clouds. Atmospheric Chemistry and Physics, 22(8):5223\u20135251, April 2022. URL: https://acp.copernicus.org/articles/22/5223/2022/ (visited on 2024-03-29), doi:10.5194/acp-22-5223-2022.\u00a0\u21a9</p> </li> <li> <p>Mingxuan Wu, Hailong Wang, Richard C. Easter, Zheng Lu, Xiaohong Liu, Balwinder Singh, Po\u2010Lun Ma, Qi Tang, Rahul A. Zaveri, Ziming Ke, Rudong Zhang, Louisa K. Emmons, Simone Tilmes, Jack E. Dibb, Xue Zheng, Shaocheng Xie, and L. Ruby Leung. Development and Evaluation of E3SM\u2010MOSAIC: Spatial Distributions and Radiative Effects of Nitrate Aerosol. Journal of Advances in Modeling Earth Systems, 14(11):e2022MS003157, November 2022. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2022MS003157 (visited on 2024-03-29), doi:10.1029/2022MS003157.\u00a0\u21a9</p> </li> <li> <p>E. M. M\u00e5rtensson, E. D. Nilsson, G. De Leeuw, L. H. Cohen, and H.\u2010C. Hansson. Laboratory simulations and parameterization of the primary marine aerosol production. Journal of Geophysical Research: Atmospheres, 108(D9):2002JD002263, May 2003. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2002JD002263 (visited on 2024-03-29), doi:10.1029/2002JD002263.\u00a0\u21a9</p> </li> <li> <p>E. C. Monahan, D. E. Spiel, and K. L. Davidson. A Model of Marine Aerosol Generation Via Whitecaps and Wave Disruption. In Edward C. Monahan and Gear\u00f3id Mac Niocaill, editors, Oceanic Whitecaps: And Their Role in Air-Sea Exchange Processes, pages 167\u2013174. Springer Netherlands, Dordrecht, 1986. URL: https://doi.org/10.1007/978-94-009-4668-2_16 (visited on 2024-03-29), doi:10.1007/978-94-009-4668-2_16.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/oceanfilms/","title":"OCEANFILMS","text":""},{"location":"EAM/tech-guide/oceanfilms/#overview","title":"Overview","text":"<p>E3SM (v1-v3) uses the OCEANFILMS (Organic Compounds from Ecosystems to Aerosols: Natural Films and Interfaces via Langmuir Molecular Surfactants) parameterization to represent sea spray organic aerosol emissions.  OCEANFILMS is a physically based model that links sea spray chemistry with ocean biogeochemistry using a Langmuir partitioning approach.  The underlying physical assumptions and parameterization are described in Burrows et al. (2014);<sup>1</sup> the implementation in E3SM and impact on clouds and climate are documented in Burrows et al. (2022).<sup>2</sup></p>"},{"location":"EAM/tech-guide/oceanfilms/#namelist-parameters","title":"Namelist parameters","text":"<p>OCEANFILMS Namelist Parameters</p> <ol> <li> <p>S. M. Burrows, O. Ogunro, A. A. Frossard, L. M. Russell, P. J. Rasch, and S. M. Elliott. A physically based framework for modeling the organic fractionation of sea spray aerosol from bubble film Langmuir equilibria. Atmospheric Chemistry and Physics, 14(24):13601\u201313629, December 2014. URL: https://acp.copernicus.org/articles/14/13601/2014/ (visited on 2024-03-29), doi:10.5194/acp-14-13601-2014.\u00a0\u21a9</p> </li> <li> <p>Susannah M. Burrows, Richard C. Easter, Xiaohong Liu, Po-Lun Ma, Hailong Wang, Scott M. Elliott, Balwinder Singh, Kai Zhang, and Philip J. Rasch. OCEANFILMS (Organic Compounds from Ecosystems to Aerosols: Natural Films and Interfaces via Langmuir Molecular Surfactants) sea spray organic aerosol emissions \u2013 implementation in a global climate model and impacts on clouds. Atmospheric Chemistry and Physics, 22(8):5223\u20135251, April 2022. URL: https://acp.copernicus.org/articles/22/5223/2022/ (visited on 2024-03-29), doi:10.5194/acp-22-5223-2022.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/orodrag/","title":"Orographic drag scheme","text":""},{"location":"EAM/tech-guide/orodrag/#overview","title":"Overview","text":"<p>The orographic drag schemes includes two main options: the default Gravity Wave Drag schemeof McFarlane (1987)<sup>1</sup> and a new suite of orographic drag parameterization schemes. The new suite includes 4 components all combined in one module (i.e. subroutine gwdo2d). The schemes include orographic gravity wave drag (oGWD, Xie et al.,2020)<sup>2</sup>, flow-blocking drag (FBD, Xie et al.,2020)<sup>2</sup>, small-scale GWD (sGWD, Tsiringakis et al.,2017)<sup>3</sup>, and turbulent-scale orographic form drag (TOFD, Beljaars et al., 2004)<sup>4</sup>. The oGWD and TOFD schemes are used to replace the default oGWD (McFarlane, 1987)<sup>1</sup> and Turbulent Mountain Stress (TMS, documented on Richter et al., 2010)<sup>5</sup> module in EAM, while the FBD and sGWD are added enhanced drag schemes. Each of the schemes are used to predict and add enhanced drags from surface to high level that would help decelerate the wind especially over the mountainous regions among the globe. The oGWD, FBD, and sGWD are implemented in gw_drag.F90, while TOFD is implemented in clubb_intr.F90 to join the vertical diffusion process. There are also new topographic parameters (orographic asymmetry [OA], orographic convexity [OC], effective orographic length [OL]) are input into the model for the new oGWD and FBD scheme implmented. The conceptual location of each scheme is illustrate below.</p> <p></p>"},{"location":"EAM/tech-guide/orodrag/#default-ogwd-scheme","title":"Default oGWD scheme","text":"<p>The current default oGWD scheme in E3SMv3 is from McFarlane (1987)<sup>1</sup>. It is a linear orographic gravity wave drag scheme that parameterizes the subgrid process of vertical propagation of gravity wave originated from orographic source. The output from this scheme is a vertical profile of drag (or deceleration terms) when gravity wave breaks at higher levels and deposit momemtum flux to that level. This scheme is shown to have impact on excessive westerly wind in the extratropics and the wind bias in the polar region.</p>"},{"location":"EAM/tech-guide/orodrag/#default-tms-scheme","title":"Default TMS scheme","text":"<p>The turbulent mountain stress (TMS) scheme parameterizes is documented on Richter et al.,(2010)<sup>5</sup>. It parameterizes the turbulent scale form drag (TOFD) through adding enhanced effective roughness length to the model. This method is justified by the observation that area-averaged wind sufficiently far above hilly terrain behave logarithmically. It leads to significant decrease of overspeed surface wind in the model. It is turned OFF in E3SMv3.0.</p>"},{"location":"EAM/tech-guide/orodrag/#new-ogwd-scheme","title":"New oGWD scheme","text":"<p>The Xie et al.(2020)<sup>2</sup> oGWD scheme is a nonlinear orographic gravity wave drag scheme that parameterizes the subgrid oGWD (&gt;5km). It includes both the linear oGWD like that of McFarlane (1987)<sup>1</sup> and nonlinear oGWD like low-level wave breaking (LLWB). The LLWB downstream often results in downslope windstorm that can enhance the drag by several times that of linear oGWD. The incorporation of the nonlinear drag is by adding an \"enhancement factor\" that is a function of the higher moments of the orography, e.g. orographic asymmetry (OA), orographic convexity (OC), effective orographic length (OL).</p>"},{"location":"EAM/tech-guide/orodrag/#fbd-scheme","title":"FBD scheme","text":"<p>The Xie et al.(2020)<sup>2</sup> FBD scheme parameterizes the drag by flow blocked on the mountain flanks or flowing around the mountain under upstream stable conditions (&gt;5km). It occurs when the mean flow does not have enough kinetic energy to traverse an obstacle and either stops upstream or diverges around the obstacle. This provides drag near the surface where the blocking occurs in addition to the oGWD.</p>"},{"location":"EAM/tech-guide/orodrag/#tofd-scheme","title":"TOFD scheme","text":"<p>The TOFD scheme (Beljaars et al.,2004)<sup>4</sup> parameterizes the drag generated by the shear stresses in the boundary layer when the flow encounters smaller obstacles (&lt;5km). As airflow encounters an obstacle, it is disrupted, leading to the formation of eddies and vortices. These turbulent structures enhance mixing, allowing different layers of air to interact over a short distance. The intensity of the mixing is typically higher close to the obstacle, with rapid changes in velocity and direction of the airflow and can exhibit large control over the surface wind. It is an alternative scheme to the current TMS in E3SMv3. An important difference between the TOFD and TMS is that TOFD explicitly calculate the stress profile while TMS uses an enhanced effective roughtness length approach.</p>"},{"location":"EAM/tech-guide/orodrag/#sgwd-scheme","title":"sGWD scheme","text":"<p>The Tsiringakis et al.(2017)<sup>3</sup> sGWD scheme parameterizes the small-scale orographic gravity wave drag (sGWD) within the relatively shallow stable boundary layer. Models applying the form drag such as TOFD schemes usually lack sufficient cyclonic filling and do not accurately represent the development of cyclones over land (Holstag 2006)<sup>6</sup>. This caused significant temperature bias that occurs due to runaway cooling at the surface. To bridge the gap of this missing drag in the boundary layer, studies have hypothesized that the missing drag can be generated by sGWD. sGWD occurs under the relative stable boundary layer with low winds where the turbulence is significantly reduced.</p>"},{"location":"EAM/tech-guide/orodrag/#namelist-parameters","title":"Namelist parameters","text":"<p>orodrag Namelist Parameters</p> <ol> <li> <p>N.A. McFarlane. The effect of orographically excited gravity wave drag on the general circulation of the lower stratosphere and troposphere. Journal of the Atmospheric Sciences, 1987. URL: https://journals.ametsoc.org/view/journals/atsc/44/14/1520-0469_1987_044_1775_teooeg_2_0_co_2.xml (visited on 2024-11-19), doi:10.1175/1520-0469(1987)044&lt;1775:TEOOEG&gt;2.0.CO;2.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Xie J., Zhang M., Xie Z., Liu H., Chai Z., He J., and H. Zhang. An orographic-drag parametrization scheme including orographic anisotropy for all flow directions. Journal of Advances in Modeling Earth Systems, 2020. URL: https://agupubs.onlinelibrary.wiley.com/doi/full/10.1029/2019MS001921/ (visited on 2024-11-19), doi:10.1029/2019MS001921.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>A.A.M. Holtslag A. Tsiringakis, G.J. Steeneveld. Small-scale orographic gravity wave drag in stable boundary layers and its impact on synoptic systems and near-surface meteorology. Quarterly Journal of the Royal Meterological Society, 2017. URL: https://rmets.onlinelibrary.wiley.com/doi/abs/10.1002/qj.3021 (visited on 2024-11-19), doi:10.1002/qj.3021.\u00a0\u21a9\u21a9</p> </li> <li> <p>N. Wood A. Beljaars, A. Brown. A new parametrization of turbulent orographic form drag. Quarterly Journal of the Royal Meterological Society, 2004. URL: https://rmets.onlinelibrary.wiley.com/doi/abs/10.1256/qj.03.73/ (visited on 2024-11-19), doi:10.1256/qj.03.73.\u00a0\u21a9\u21a9</p> </li> <li> <p>R.R. Garcia J.H. Richter, F. Sassi. The effect of orographically excited gravity wave drag on the general circulation of the lower stratosphere and troposphere. Journal of the Atmospheric Sciences, 2010. URL: https://journals.ametsoc.org/view/journals/atsc/67/1/2009jas3112.1.xml?tab_body=pdf (visited on 2024-11-19), doi:10.1175/2009JAS3112.1.\u00a0\u21a9\u21a9</p> </li> <li> <p>A.A Holtslag. Preface:gewexatmospheric boundary-layer study (gabls) on stable boundary layers. Boundary-Layer Meterology, 2006. URL: https://link.springer.com/article/10.1007/s10546-005-9008-6 (visited on 2024-11-19), doi:10.1007/s10546-005-9008-6.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/p3/","title":"Predicted Particle Properties","text":""},{"location":"EAM/tech-guide/p3/#overview","title":"Overview","text":"<p>The stratiform cloud microphysics scheme in v3 is Predicted Particle Properties (P3; Morrison &amp; Milbrandt, 2015;<sup>1</sup> Milbrandt &amp; Morrison, 2016<sup>2</sup>). P3 offers a new approach to representing the evolution of ice particles that is more physical than the traditional approach of using predefined ice categories. It has been implemented in E3SM (Wang et al., 2021)<sup>3</sup> to address the limitations in the original microphysics scheme- the lack of riming particles and the artificial conversion between ice crystals and snow particles. The current version in E3SM is a two-moment scheme with a single ice category (Morrison &amp; Milbrandt, 2015).<sup>1</sup> In addition to the total ice number and mass mixing ratios, P3 prognoses the rimed mass and rimed volume mixing ratios, which allows for the prediction of the continuous evolution of the rime fraction and particle density. It is worth noting that the ice nucleation parameterizations are changed to be aerosol-dependent in this study, with the heterogenous ice nucleation parameterizations from the Classical Nucleation Theory (Liu et al., 2012)<sup>4</sup> and the homogenous in-situ cirrus formation based on Liu and Penner (2005).<sup>5</sup> This differs from the P3 used in WRF and that used in the E3SM v1 in Wang et al. (2021)<sup>3</sup> where the heterogeneous ice nucleation parameterizations are temperature dependent only.</p>"},{"location":"EAM/tech-guide/p3/#namelist-parameters","title":"Namelist parameters","text":"<p>P3 Namelist Parameters</p> <ol> <li> <p>Hugh Morrison and Jason A. Milbrandt. Parameterization of Cloud Microphysics Based on the Prediction of Bulk Ice Particle Properties. Part I: Scheme Description and Idealized Tests. Journal of the Atmospheric Sciences, 72(1):287\u2013311, January 2015. URL: https://journals.ametsoc.org/view/journals/atsc/72/1/jas-d-14-0065.1.xml (visited on 2024-03-29), doi:10.1175/JAS-D-14-0065.1.\u00a0\u21a9\u21a9</p> </li> <li> <p>J. A. Milbrandt and H. Morrison. Parameterization of Cloud Microphysics Based on the Prediction of Bulk Ice Particle Properties. Part III: Introduction of Multiple Free Categories. Journal of the Atmospheric Sciences, 73(3):975\u2013995, March 2016. URL: https://journals.ametsoc.org/view/journals/atsc/73/3/jas-d-15-0204.1.xml (visited on 2024-03-29), doi:10.1175/JAS-D-15-0204.1.\u00a0\u21a9</p> </li> <li> <p>Jingyu Wang, Jiwen Fan, Zhe Feng, Kai Zhang, Erika Roesler, Benjamin Hillman, Jacob Shpund, Wuyin Lin, and Shaocheng Xie. Impact of a New Cloud Microphysics Parameterization on the Simulations of Mesoscale Convective Systems in E3SM. Journal of Advances in Modeling Earth Systems, 13(11):e2021MS002628, November 2021. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2021MS002628 (visited on 2024-03-29), doi:10.1029/2021MS002628.\u00a0\u21a9\u21a9</p> </li> <li> <p>X. Liu, R. C. Easter, S. J. Ghan, R. Zaveri, P. Rasch, X. Shi, J.-F. Lamarque, A. Gettelman, H. Morrison, F. Vitt, A. Conley, S. Park, R. Neale, C. Hannay, A. M. L. Ekman, P. Hess, N. Mahowald, W. Collins, M. J. Iacono, C. S. Bretherton, M. G. Flanner, and D. Mitchell. Toward a minimal representation of aerosols in climate models: description and evaluation in the Community Atmosphere Model CAM5. Geoscientific Model Development, 5(3):709\u2013739, May 2012. URL: https://gmd.copernicus.org/articles/5/709/2012/ (visited on 2024-03-29), doi:10.5194/gmd-5-709-2012.\u00a0\u21a9</p> </li> <li> <p>Xiaohong Liu and Joyce E. Penner. Ice nucleation parameterization for global models. Meteorologische Zeitschrift, pages 499\u2013514, September 2005. URL: https://www.schweizerbart.de/papers/metz/detail/14/54281/Ice_nucleation_parameterization_for_global_models (visited on 2024-03-29), doi:10.1127/0941-2948/2005/0059.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/rrtmg/","title":"Rapid Radiative Transfer Model for GCMs","text":""},{"location":"EAM/tech-guide/rrtmg/#overview","title":"Overview","text":"<p>The calculation of radiative energy flux through the atmosphere is done using the RRTMG radiation package (Iacono et al., 2008;<sup>1</sup> Mlawer et al., 1997<sup>2</sup>). The details are consistent with the implementation in CAM5 described in Neale et al. (2012).<sup>3</sup> Radiative fluxes are broadly split into shortwave and longwave and computed by separate codes. The shortwave solver uses the 2-stream approximation, while the longwave is an absorption/emission code. Both shortwave and longwave use the correlated k-distribution method for integration of fluxes. Subgrid cloud overlap is accounted for using the Monte Carlo Independent Column Approximation (MCICA; Pincus and Morcrette, 2003),<sup>4</sup> assuming the cloudy portions of the column are maximally overlapped in vertically contiguous layers and randomly overlapped when two layers are separated by a completely clear layer. Cloud optics are parameterized as described in Neale et al.(2010).<sup>3</sup></p>"},{"location":"EAM/tech-guide/rrtmg/#namelist-parameters","title":"Namelist parameters","text":"<p>RRTMG Namelist Parameters</p> <ol> <li> <p>Michael J. Iacono, Jennifer S. Delamere, Eli J. Mlawer, Mark W. Shephard, Shepard A. Clough, and William D. Collins. Radiative forcing by long\u2010lived greenhouse gases: Calculations with the AER radiative transfer models. Journal of Geophysical Research: Atmospheres, 113(D13):2008JD009944, July 2008. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2008JD009944 (visited on 2024-03-29), doi:10.1029/2008JD009944.\u00a0\u21a9</p> </li> <li> <p>Eli J. Mlawer, Steven J. Taubman, Patrick D. Brown, Michael J. Iacono, and Shepard A. Clough. Radiative transfer for inhomogeneous atmospheres: RRTM, a validated correlated\u2010k model for the longwave. Journal of Geophysical Research: Atmospheres, 102(D14):16663\u201316682, July 1997. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/97JD00237 (visited on 2024-03-29), doi:10.1029/97JD00237.\u00a0\u21a9</p> </li> <li> <p>Richard B. Neale, Andrew Gettelman, Sungsu Park, Chih-Chieh Chen, Peter H. Lauritzen, David L. Williamson, Andrew J. Conley, Doug Kinnison, Dan Marsh, Anne K. Smith, Francis M. Vitt, Rolando Garcia, Jean-Francois Lamarque, Michael J. Mills, Simone Tilmes, Hugh Morrison, Philip Cameron-Smith, William D. Collins, Michael J. Iacono, Richard C. Easter, Xiaohong Liu, Steven J. Ghan, Philip J. Rasch, and Mark A. Taylor. Description of the NCAR Community Atmosphere Model (CAM 5.0). UNKNOWN, 2012. URL: https://opensky.ucar.edu/islandora/object/technotes%3A594/ (visited on 2024-04-25), doi:10.5065/wgtk-4g06.\u00a0\u21a9\u21a9</p> </li> <li> <p>Robert Pincus, Howard W. Barker, and Jean\u2010Jacques Morcrette. A fast, flexible, approximate technique for computing radiative transfer in inhomogeneous cloud fields. Journal of Geophysical Research: Atmospheres, 108(D13):2002JD003322, July 2003. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2002JD003322 (visited on 2024-03-29), doi:10.1029/2002JD003322.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/vbs/","title":"Volatility Basis Set (VBS) approach for SOA","text":""},{"location":"EAM/tech-guide/vbs/#overview","title":"Overview","text":"<p>A modified volatility basis set (VBS) approach is used for both SOA precursor gases and particulate SOA that includes gas\u2010phase functionalization/fragmentation and particle\u2010phase oligomerization similar to FragNVSOA configuration of Shrivastava et al. (2015).<sup>1</sup> It includes a detailed treatment of SOA precursor gas chemistry including multigenerational aging via fragmentation and functionalization reactions, particle\u2010phase oligomerization that generates low \u201ceffective volatility\u201d SOA, and particle\u2010phase loss by photolysis. The sources of SOA include natural biogenic, anthropogenic and biomass burning organic gases that are oxidized to form lower volatility species and undergo dynamic gas-particle partitioning to form SOA. Biogenic SOA is formed by oxidation of isoprene (ISOP_VBS) and monoterpene (C10H16) volatile organic compounds (VOCs). Emissions of anthropogenic and biomass burning organic gases in the range of intermediate volatility organics (IVOCs, referred to as SOAG0) are estimated as total primary organic matter (POM) emitted from these sources multiplied by specified tunable factors. IVOCs undergo multigenerational aging with OH radicals forming SOA corresponding to anthropogenic and biomass burning sources. Photolysis of SOA is included as a chemical sink in the particle phase, in addition to dry and wet removal sinks. The photolysis rate constant of particle-phase SOA is assumed to be 0.04% of typical NO2 photolysis frequencies following Hodzic et al. (2016).<sup>2</sup> The emissions of VBS SOA related gas species and oxidants (prescribed) read from a file are documented in the User Guide.</p> <ol> <li> <p>Manish Shrivastava, Richard C. Easter, Xiaohong Liu, Alla Zelenyuk, Balwinder Singh, Kai Zhang, Po\u2010Lun Ma, Duli Chand, Steven Ghan, Jose L. Jimenez, Qi Zhang, Jerome Fast, Philip J. Rasch, and Petri Tiitta. Global transformation and fate of SOA: Implications of low\u2010volatility SOA and gas\u2010phase fragmentation reactions. Journal of Geophysical Research: Atmospheres, 120(9):4169\u20134195, May 2015. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1002/2014JD022563 (visited on 2024-03-29), doi:10.1002/2014JD022563.\u00a0\u21a9</p> </li> <li> <p>Alma Hodzic, Prasad S. Kasibhatla, Duseong S. Jo, Christopher D. Cappa, Jose L. Jimenez, Sasha Madronich, and Rokjin J. Park. Rethinking the global secondary organic aerosol (SOA) budget: stronger production, faster removal, shorter lifetime. Atmospheric Chemistry and Physics, 16(12):7917\u20137941, June 2016. URL: https://acp.copernicus.org/articles/16/7917/2016/ (visited on 2024-03-29), doi:10.5194/acp-16-7917-2016.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/tech-guide/zm/","title":"Zhang and McFarlane deep convection scheme","text":""},{"location":"EAM/tech-guide/zm/#overview","title":"Overview","text":"<p>The ZM scheme (Zhang and McFarlane, 1995)<sup>1</sup> used in E3SMv3 is a bulk mass flux-type scheme; it has three components: a trigger for convection initiation, a cloud model including both updrafts and downdrafts, and a closure. The original CAPE-based trigger for convection was replaced by a trigger function based on dynamic CAPE generation by Xie et al. (2019)<sup>2</sup> (see dCAPE-ULL description below for more details). The closure predicts cloud base mass flux using dilute CAPE (Neale et al., 2008).<sup>3</sup> The updraft model is a bulk entraining plume model. Both updrafts and downdrafts are assumed saturated, with downdraft mass flux at the downdraft initiation level set proportional to the updraft cloud base mass flux. The microphysical processes inside the updrafts are represented by a convective microphysics scheme (see ZM convective microphysics description below). An additional adjustment is made to cloud base mass flux to incorporate the effect of large-scale circulation (see mass flux adjustment description below).</p>"},{"location":"EAM/tech-guide/zm/#dcape-ull","title":"dCAPE-ULL","text":"<p>A notable update related to clouds and precipitation in E3SMv2 is the use of a new convective trigger function described by Xie et al. (2019)<sup>2</sup> in ZM to improve the simulation of precipitation and its diurnal cycle. The new convective trigger named as dCAPE-ULL uses the dynamic CAPE (dCAPE) trigger developed by Xie and Zhang (2000)<sup>4</sup> with an unrestricted air parcel launch level (ULL) approach used by Wang et al. (2015).<sup>5</sup> It was designed to address the unrealistically strong coupling of convection to the surface heating in ZM that often results in unrealistically too active model convection during the day in summer season over lands and improve the model capability to capture mid-level convection for nocturnal precipitation.</p>"},{"location":"EAM/tech-guide/zm/#zm-convective-microphysics","title":"ZM convective microphysics","text":"<p>The convective microphysics scheme is based on the work of Song and Zhang (2011)<sup>6</sup> to improve the representation of microphysical processes in convective clouds and their interaction with aerosol and stratiform clouds in GCMs. It explicitly treats the mass mixing ratio and number concentration of five hydrometeor species (cloud water, cloud ice, rain, snow, and graupel). The scheme is linked to stratiform cloud microphysics parameterization through convective detrainment of cloud liquid/ice water content and droplet/crystal number concentration, and to aerosols through cloud droplet activation and ice nucleation processes. Previous evaluations of the scheme showed that it improved the simulation of convective cloud properties and cloud hydrological cycle (Song et al., 2012;<sup>7</sup> Storer et al., 2015<sup>8</sup>). The assessment demonstrates that the convective microphysics scheme not only significantly improves the simulation of tropical variability across multiple scales but also enhances the simulation of climatological mean states.</p>"},{"location":"EAM/tech-guide/zm/#mass-flux-adjustment","title":"Mass flux adjustment","text":"<p>The convective mass flux adjustment (MAdj) is designed to represent the dynamical effects of large-scale vertical motion on convection. With MAdj, convection is enhanced (suppressed) when there is large-scale ascending (descending) motion at the planetary boundary layer top. The coupling of convection with the large-scale circulation significantly improves the simulation of climate variability across multiple scales from diurnal cycle, convectively coupled equatorial waves, to Madden-Julian oscillations (Song et al., 2023).<sup>9</sup></p>"},{"location":"EAM/tech-guide/zm/#mcsp","title":"MCSP","text":"<p>Due to inadequate model resolution, organized mesoscale convection cannot be resolved in general circulation models and thus needs to be parameterized. The Multiscale Coherent Structure Parameterization (MCSP) aims at representing the dynamical and physical effects of organized mesoscale convection.</p> <p>MCSP applies a sinusoidal baroclinic profile in the temperature, moisture, and momentum fields to represent the impact. Moncrieff et al. (2017)<sup>10</sup> and Chen et al. (2021)<sup>11</sup> have found that by adding MCSP, the both the representation of large-scale precipitation systems and the modes of variability from Tropical waves are improved.</p>"},{"location":"EAM/tech-guide/zm/#namelist-parameters","title":"Namelist parameters","text":"<p>ZM Namelist Parameters</p> <ol> <li> <p>G.J. Zhang and Norman A. McFarlane. Sensitivity of climate simulations to the parameterization of cumulus convection in the Canadian climate centre general circulation model. Atmosphere-Ocean, 33(3):407\u2013446, September 1995. URL: http://www.tandfonline.com/doi/abs/10.1080/07055900.1995.9649539 (visited on 2024-03-29), doi:10.1080/07055900.1995.9649539.\u00a0\u21a9</p> </li> <li> <p>Shaocheng Xie, Yi\u2010Chi Wang, Wuyin Lin, Hsi\u2010Yen Ma, Qi Tang, Shuaiqi Tang, Xue Zheng, Jean\u2010Christophe Golaz, Guang J. Zhang, and Minghua Zhang. Improved Diurnal Cycle of Precipitation in E3SM With a Revised Convective Triggering Function. Journal of Advances in Modeling Earth Systems, 11(7):2290\u20132310, July 2019. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2019MS001702 (visited on 2024-03-29), doi:10.1029/2019MS001702.\u00a0\u21a9\u21a9</p> </li> <li> <p>Richard B. Neale, Jadwiga H. Richter, and Markus Jochum. The Impact of Convection on ENSO: From a Delayed Oscillator to a Series of Events. Journal of Climate, 21(22):5904\u20135924, November 2008. URL: https://journals.ametsoc.org/view/journals/clim/21/22/2008jcli2244.1.xml (visited on 2024-03-29), doi:10.1175/2008JCLI2244.1.\u00a0\u21a9</p> </li> <li> <p>Shaocheng Xie and Minghua Zhang. Impact of the convection triggering function on single\u2010column model simulations. Journal of Geophysical Research: Atmospheres, 105(D11):14983\u201314996, June 2000. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2000JD900170 (visited on 2024-03-29), doi:10.1029/2000JD900170.\u00a0\u21a9</p> </li> <li> <p>Yi-Chi Wang, Hua-Lu Pan, and Huang-Hsiung Hsu. Impacts of the triggering function of cumulus parameterization on warm-season diurnal rainfall cycles at the Atmospheric Radiation Measurement Southern Great Plains site: CONVECTIVE TRIGGER ON SGP NOCTURNAL RAIN. Journal of Geophysical Research: Atmospheres, 120(20):10,681\u201310,702, October 2015. URL: http://doi.wiley.com/10.1002/2015JD023337 (visited on 2024-03-29), doi:10.1002/2015JD023337.\u00a0\u21a9</p> </li> <li> <p>Xiaoliang Song and Guang J. Zhang. Microphysics parameterization for convective clouds in a global climate model: Description and single-column model tests. Journal of Geophysical Research, 116(D2):D02201, January 2011. URL: http://doi.wiley.com/10.1029/2010JD014833 (visited on 2024-03-29), doi:10.1029/2010JD014833.\u00a0\u21a9</p> </li> <li> <p>Xiaoliang Song, Guang J. Zhang, and J.-L. F. Li. Evaluation of Microphysics Parameterization for Convective Clouds in the NCAR Community Atmosphere Model CAM5. Journal of Climate, 25(24):8568\u20138590, December 2012. URL: http://journals.ametsoc.org/doi/10.1175/JCLI-D-11-00563.1 (visited on 2024-03-29), doi:10.1175/JCLI-D-11-00563.1.\u00a0\u21a9</p> </li> <li> <p>Rachel L. Storer, Guang J. Zhang, and Xiaoliang Song. Effects of Convective Microphysics Parameterization on Large-Scale Cloud Hydrological Cycle and Radiative Budget in Tropical and Midlatitude Convective Regions. Journal of Climate, 28(23):9277\u20139297, December 2015. URL: https://journals.ametsoc.org/view/journals/clim/28/23/jcli-d-15-0064.1.xml (visited on 2024-03-29), doi:10.1175/JCLI-D-15-0064.1.\u00a0\u21a9</p> </li> <li> <p>Xiaoliang Song, Guang Zhang, Hui Wan, and Shaocheng Xie. Incorporating the Effect of Large\u2010Scale Vertical Motion on Convection Through Convective Mass Flux Adjustment in E3SMv2. Journal of Advances in Modeling Earth Systems, 15(10):e2022MS003553, October 2023. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2022MS003553 (visited on 2024-03-29), doi:10.1029/2022MS003553.\u00a0\u21a9</p> </li> <li> <p>Mitchell W. Moncrieff, Changhai Liu, and Peter Bogenschutz. Simulation, Modeling, and Dynamically Based Parameterization of Organized Tropical Convection for Global Climate Models. Journal of the Atmospheric Sciences, 74(5):1363\u20131380, May 2017. URL: https://journals.ametsoc.org/view/journals/atsc/74/5/jas-d-16-0166.1.xml (visited on 2024-03-29), doi:10.1175/JAS-D-16-0166.1.\u00a0\u21a9</p> </li> <li> <p>C.\u2010C. Chen, J. H. Richter, C. Liu, M. W. Moncrieff, Q. Tang, W. Lin, S. Xie, and P. J. Rasch. Effects of Organized Convection Parameterization on the MJO and Precipitation in E3SMv1. Part I: Mesoscale Heating. Journal of Advances in Modeling Earth Systems, 13(6):e2020MS002401, June 2021. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2020MS002401 (visited on 2024-03-29), doi:10.1029/2020MS002401.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/user-guide/","title":"EAM User Guide","text":"<p>This User Guide describes how to set up and run EAM.</p>"},{"location":"EAM/user-guide/#steps-to-build-and-run-eam","title":"Steps to build and run EAM","text":"<p>EAM is not available as a standalone model.  Instead, EAM can be run in an atmosphere-only configuration. The difference when running in atmosphere-only mode (without an interactive ocean or sea-ice) would be to change the compset and grid. See the Case Control System Basic Usage for general descriptions of compsets and grids.</p> <p>Certain namelist paramaters, input data files, and output file specifcations can also be modified. These are described below as ways to customize runs.</p> <p>Step-by-step instructions on how to run and analyze E3SM with a script can be found at E3SM step-by-step guide</p>"},{"location":"EAM/user-guide/#scientifically-supported-compsets-and-grids","title":"Scientifically supported compsets and grids","text":""},{"location":"EAM/user-guide/#compsets","title":"Compsets","text":"<p>All of the compsets below run with the complete set of E3SM atmospheric configuration of EAMV3. For more information on the schemes in EAMv3, see the Technical Guide</p> <p><code>F2010</code> - Climatological present day climate (year 2010)</p> <p><code>F1850</code> - Climatological pre-industrial-day climate (year 1850)</p> <p><code>F20TR</code> - Historical EAM simulation with time varying sea-surface temperatures, aerosol emissions, and greenhouse gas forcings (year 1850-2014)</p>"},{"location":"EAM/user-guide/#grids","title":"Grids","text":"<p>Only one grid combination is currently supported for the above compsets:</p> <p><code>ne30pg2_r05_IcoswISC30E3r5</code> - ne30pg2 atmosphere, 0.5deg x 0.5deg land grid, and Icosahedral 30 km mesh with ice shelves cavities (wISC), E3SMv3 (E3) revision r5</p>"},{"location":"EAM/user-guide/#customizing-runs","title":"Customizing runs","text":""},{"location":"EAM/user-guide/#compile-time-options","title":"Compile-time options","text":"<p>Some customizations require making changes before the model is built.</p>"},{"location":"EAM/user-guide/#run-time-options","title":"Run-time options","text":"<p>Run-time customization is enabled by a Fortran namelist.</p> <p>Namelist parameters can be changed from default values by putting them in the <code>user_nl_eam</code> file in the case directory with the desired new value.</p> <p>This Table of Namelist Parameters includes many of the paramaters that control physics schemes described in the tech-guide</p>"},{"location":"EAM/user-guide/#history-file-namelist-parameters","title":"History File Namelist Parameters","text":"<p>By default, EAM will output a set of monthly-averaged variables. Additional output files can be specified using the following flags in the <code>user_nl_eam</code> file:</p> <p><code>finclX</code> - List of variables (in single quotes and separated by commas) that are added to tape X.</p> <p><code>fexclX</code> - List of variables (in single quotes and separated by commas) that will be excluded in tape X.</p> <p><code>nhtfrq</code> - List of write frequencies for each of the history files. A value of 0 denotes a monthly frequency. Negative values denote hourly frequencies (e.g., <code>-3</code> will write an output every 3 hours). Positive values denotes the frequency in model timesteps (e.g., <code>4</code> will write an output every 4 timesteps).</p> <p><code>mfilt</code> - List that sets the number of timesteps to write in a single file before starting a new file.</p> <p><code>avgflag_pertape</code> - List that sets the type of output to write. Choices are <code>'A'</code> for time-averaged output, <code>'A'</code> for instantaneous output, <code>'M'</code> for time-minimum output, and <code>'X'</code> for time-maximum output.</p>"},{"location":"EAM/user-guide/#example-output-specification","title":"Example output specification","text":"<pre><code>nhtfrq = 0,-24,-6,-3\nmfilt  = 1,30,120,24\navgflag_pertape = 'A','A','A','I'\n\nfexcl1 = 'U10' # Removes U10 output from monthly files\nfincl2 = 'PS','FLUT','PRECT','U200','V200','U850',\n          'V850','TCO','SCO','TREFHT','QREFHT'  # Output files of daily-averaged output, which includes 30 days of output in each file\nfincl3 = 'PS', 'PSL','PRECT','TUQ','TVQ','UBOT',\n          'VBOT','TREFHT','FLUT','OMEGA500','TBOT',\n          'U850','V850','U200','V200','T200','T500',\n          'Z700'  # Output files of 6-hour-averaged output, which includes 30 days of output in each file\nfincl4 = 'PRECT' # Output files of 3-hourly output with 3 days of output in every file\n</code></pre>"},{"location":"EAM/user-guide/#input-datasets","title":"Input datasets","text":"<p>Many properties of the simulated atmosphere are controlled by data sets read in by the model during initialization. Changing the content of these files is another way to customize a run.</p>"},{"location":"EAM/user-guide/#greenhouse-gases-non-reacting","title":"Greenhouse gases (non-reacting)","text":"<p>Greenhouse gas concentration inputs of non-reacting species are taken from CMIP6 Forcing Datasets provided from the input4MIPs data collection. In addition to what is provided by the input4MIPS, 2015 and 2016 have been added by extrapolating from 2013 and 2014.</p> <pre><code>inputdata/atm/cam/ggas/GHG_CMIP-1-2-0_Annual_Global_0000-2014_c20180105.nc\n</code></pre>"},{"location":"EAM/user-guide/#aerosol-physical-properties","title":"Aerosol physical properties","text":"<p>The aerosol properties files provide aerosol refractive index, density, and aerosol hygroscopicty information for each aerosol species, as well as information about lognormal mode definition and lookup tables of polynomial expression coefficients for aerosol optics calculation for each mode. These aerosol physical and chemical properties are used by the radiation, aerosol microphysics and other related source and sink processes, and droplet activation/ice nucleation schemes.</p>"},{"location":"EAM/user-guide/#aerosol-and-gas-emission-and-oxidant-files","title":"Aerosol and gas emission and oxidant files","text":"<p>Details of the aerosol and gas emission and oxidant files used in various historical, present-day, and future scenarios.</p>"},{"location":"EAM/user-guide/#linoz-v3-input-files","title":"Linoz v3 input files","text":"<p>Linozv3 uses the ozone tendency, (net production minus loss) calculated from its climatological mean state (function of month, latitude, altitude) and a first-order Taylor series expansion about the local ozone, temperature, and overhead ozone column. For historical simulation, Linozv3 uses the linozv3 data files with monthly resolution, spanning the dates 1849-01 -- 2014-12.</p>"},{"location":"EAM/user-guide/#historical-files","title":"Historical files","text":"<pre><code> linoz_data_file                = \u2018linv3_1849-2101_CMIP6_Hist_10deg_58km_c20231207.nc\u2019\n linoz_data_path                = '/lcrc/group/e3sm/data/inputdata/atm/cam/chem/trop_mozart/ub'\n linoz_data_type                = 'INTERP_MISSING_MONTHS'\n</code></pre> <p>Refer to this page for more details on Linoz v3 input files.</p>"},{"location":"EAM/user-guide/#topography","title":"Topography","text":"<p>The global elevation on the atmosphere grid is a key input dataset.  The dataset is grid dependent. It contains the geopotential data (on both the GLL dynamics and PG2 physics grids) and two surface roughness quantities, <code>SGH</code> and <code>SGH30</code>.</p> <p>EAMv3 NE30 data:</p> <pre><code>inputdata/atm/cam/topo/USGS-gtopo30_ne30np4pg2_x6t-SGH.c20210614.nc'\n</code></pre> <p>This file is computed via a complex procedure that starts with high resolution dataset (for EAMv3, we use the GTOPO30, a 30 arc-second resolution data set on a lat-lon grid) that is then downsampled to a 3km cubed-sphere grid (cube3000) and then downsampled to the atmosphere  grid on the (GLL nodes), and then smoothed with the same viscosity operator used by the dycore. The smoothed GLL topography is then mapped to the PG2 grid. Finally, two different surface roughness fields are computed:</p> <ul> <li><code>SGH30</code>: the variance between GTOPO30 and GTOPO30-downsampled-to-PG2 (independent of any dycore specific smoothing).     (used by CLUBB, TMS, vertical_diffusion)</li> <li><code>SGH</code>:  the variance between the cube3000 data and the smoothed PG2 data.  (used by GWD parameterizations)</li> </ul>"},{"location":"EAM/user-guide/#land-use-land-cover-change","title":"Land-use / land cover change","text":"<p>Info needed on land-use land cover change / land surface data</p> <p>Refer to ELM documentation.</p>"},{"location":"EAM/user-guide/#oceansea-ice","title":"Ocean/sea ice","text":"<p>The sea surface temperature and sea-ice coverage data used in F-case simulations are based on CMIP6 Forcing Datasets provided from the input4MIPs data collection. The file for the <code>F2010</code> compset is created from taking a monthly climatology of years 2005-2014. The file for the <code>F1850</code> compset is created from taking a monthly climatology of years 1870-1879.*</p> <p>*Provenenance for F1850 file</p> <p><code>F20TR</code></p> <pre><code>inputdata/ocn/docn7/SSTDATA/sst_ice_CMIP6_DECK_E3SM_1x1_c20180213.nc\n</code></pre> <p><code>F2010</code></p> <pre><code>inputdata/ocn/docn7/SSTDATA/sst_ice_CMIP6_DECK_E3SM_1x1_2010_clim_c20190821.nc \n</code></pre> <p><code>F1850</code></p> <pre><code>inputdata/ocn/docn7/SSTDATA/sst_ice_CMIP6_DECK_E3SM_1x1_1850_clim_c20190125.nc\n</code></pre>"},{"location":"EAM/user-guide/#solar-input","title":"Solar input","text":"<p>As with greenhouse gas emissions, solar input files are taken from the input4MIPs data collection that were prepared for CMIP6 Forcing Datasets.</p> <pre><code>inputdata/atm/cam/solar/Solar_1850-2299_input4MIPS_c20181106.nc\n</code></pre>"},{"location":"EAM/user-guide/aerosol_phys_prop/","title":"Aerosol physical properties","text":""},{"location":"EAM/user-guide/aerosol_phys_prop/#description","title":"Description","text":"<p>Key information</p> <ul> <li> <p>Original physical properties of aerosols are documented in Liu et al. (2012).<sup>1</sup> Detailed information is included in the supplement.</p> </li> <li> <p>Physical properties of aerosols used in E3SMv1 are documented in Wang et al. (2020).<sup>2</sup></p> </li> <li> <p>Marine organic aerosol properties are defined in Burrows et al. (2022).<sup>3</sup></p> </li> <li> <p>Dust refractive index and longwave absorption coefficients are updated by Feng et al. (2022).<sup>4</sup></p> </li> <li> <p>BC and POM hygroscopicity values are updated by Shan et al. (2024).</p> </li> <li> <p>Physical properties of the fifth mode aerosols are documented by Ke et al. (2024).</p> </li> </ul>"},{"location":"EAM/user-guide/aerosol_phys_prop/#included-fields","title":"Included fields","text":""},{"location":"EAM/user-guide/aerosol_phys_prop/#mode-properties","title":"Mode properties","text":"<ul> <li> <p>Geometric standard deviation of each lognormal mode</p> </li> <li> <p>Nominal geometric mean diameter and its lower/upper bound of values for each mode</p> </li> <li> <p>Coefficients of polynomial expression (lookup-table) for extinction, absorption, and asymmetry parameter calculations</p> </li> <li> <p>Aerosol refractive index table needed for interpolation (lookup-table) calculation (for different wavelengths)</p> </li> <li> <p>Crystalization and deliquesence relative humidity thresholds for aerosol wateruptake calculations</p> </li> </ul>"},{"location":"EAM/user-guide/aerosol_phys_prop/#species-properties","title":"Species properties","text":"<ul> <li> <p>Aerosol refractive index for each species</p> </li> <li> <p>Density for each species</p> </li> <li> <p>Aerosol hygroscopicity for each species</p> </li> <li> <p>Note that some of variables in the species property file are for bulk aerosols, so we ignore the description for them.</p> </li> </ul>"},{"location":"EAM/user-guide/aerosol_phys_prop/#files","title":"Files","text":"<p>Species properties</p> <pre><code>/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/sulfate_rrtmg_c080918.nc\n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ocpho_rrtmg_c130709_kPOM0.04.nc\n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ocphi_rrtmg_c100508.nc\n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/bcpho_rrtmg_c100508.nc\n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/dust_aeronet_rrtmg_c141106.nc\n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ssam_rrtmg_c100508.nc\n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/poly_rrtmg_c130816.nc\n</code></pre> <p>Mode properties</p> <pre><code>/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam4_mode1_rrtmg_aeronetdust_c141106.nc', \n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam4_mode2_rrtmg_c130628.nc',\n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam4_mode3_rrtmg_aeronetdust_c141106.nc', \n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam4_mode4_rrtmg_c130628.nc',\n/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam5_mode5_rrtmg_sig1.2_dgnl.40_c03072023.nc'\n</code></pre>"},{"location":"EAM/user-guide/aerosol_phys_prop/#namelist","title":"Namelist","text":"<pre><code> mode_defs = 'mam5_mode1:accum:=', \n         'A:num_a1:N:num_c1:num_mr:+',\n         'A:so4_a1:N:so4_c1:sulfate:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/sulfate_rrtmg_c080918.nc:+', \n         'A:pom_a1:N:pom_c1:p-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ocpho_rrtmg_c130709_kPOM0.04.nc:+',\n         'A:soa_a1:N:soa_c1:s-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ocphi_rrtmg_c100508.nc:+', \n         'A:bc_a1:N:bc_c1:black-c:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/bcpho_rrtmg_c100508.nc:+',\n         'A:dst_a1:N:dst_c1:dust:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/dust_aeronet_rrtmg_c141106.nc:+', \n         'A:ncl_a1:N:ncl_c1:seasalt:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ssam_rrtmg_c100508.nc:+',\n         'A:mom_a1:N:mom_c1:m-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/poly_rrtmg_c130816.nc', \n         'mam5_mode2:aitken:=',\n         'A:num_a2:N:num_c2:num_mr:+', \n         'A:so4_a2:N:so4_c2:sulfate:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/sulfate_rrtmg_c080918.nc:+',\n         'A:soa_a2:N:soa_c2:s-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ocphi_rrtmg_c100508.nc:+', \n         'A:ncl_a2:N:ncl_c2:seasalt:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ssam_rrtmg_c100508.nc:+',\n         'A:mom_a2:N:mom_c2:m-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/poly_rrtmg_c130816.nc', \n         'mam5_mode3:coarse:=',\n         'A:num_a3:N:num_c3:num_mr:+', \n         'A:dst_a3:N:dst_c3:dust:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/dust_aeronet_rrtmg_c141106.nc:+',\n         'A:ncl_a3:N:ncl_c3:seasalt:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ssam_rrtmg_c100508.nc:+', \n         'A:so4_a3:N:so4_c3:sulfate:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/sulfate_rrtmg_c080918.nc:+',\n         'A:bc_a3:N:bc_c3:black-c:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/bcpho_rrtmg_c100508.nc:+', \n         'A:pom_a3:N:pom_c3:p-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ocpho_rrtmg_c130709_kPOM0.04.nc:+',\n         'A:soa_a3:N:soa_c3:s-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ocphi_rrtmg_c100508.nc:+', \n         'A:mom_a3:N:mom_c3:m-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/poly_rrtmg_c130816.nc',\n         'mam5_mode4:primary_carbon:=', \n         'A:num_a4:N:num_c4:num_mr:+',\n         'A:pom_a4:N:pom_c4:p-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/ocpho_rrtmg_c130709_kPOM0.04.nc:+', \n         'A:bc_a4:N:bc_c4:black-c:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/bcpho_rrtmg_c100508.nc:+',\n         'A:mom_a4:N:mom_c4:m-organic:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/poly_rrtmg_c130816.nc', \n         'mam5_mode5:strat_coarse:=',\n         'A:num_a5:N:num_c5:num_mr:+', \n         'A:so4_a5:N:so4_c5:sulfate:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/sulfate_rrtmg_c080918.nc'\n rad_climate = 'A:H2OLNZ:H2O', 'N:O2:O2','N:CO2:CO2', 'A:O3:O3',\n         'A:N2OLNZ:N2O', 'A:CH4LNZ:CH4','N:CFC11:CFC11', 'N:CFC12:CFC12',\n         'M:mam5_mode1:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam4_mode1_rrtmg_aeronetdust_c141106.nc', \n         'M:mam5_mode2:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam4_mode2_rrtmg_c130628.nc',\n         'M:mam5_mode3:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam4_mode3_rrtmg_aeronetdust_c141106.nc', \n         'M:mam5_mode4:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam4_mode4_rrtmg_c130628.nc',\n         'M:mam5_mode5:/lcrc/group/e3sm/data/inputdata/atm/cam/physprops/mam5_mode5_rrtmg_sig1.2_dgnl.40_c03072023.nc'\n</code></pre> <ol> <li> <p>X. Liu, R. C. Easter, S. J. Ghan, R. Zaveri, P. Rasch, X. Shi, J.-F. Lamarque, A. Gettelman, H. Morrison, F. Vitt, A. Conley, S. Park, R. Neale, C. Hannay, A. M. L. Ekman, P. Hess, N. Mahowald, W. Collins, M. J. Iacono, C. S. Bretherton, M. G. Flanner, and D. Mitchell. Toward a minimal representation of aerosols in climate models: description and evaluation in the Community Atmosphere Model CAM5. Geoscientific Model Development, 5(3):709\u2013739, May 2012. URL: https://gmd.copernicus.org/articles/5/709/2012/ (visited on 2024-03-29), doi:10.5194/gmd-5-709-2012.\u00a0\u21a9</p> </li> <li> <p>Hailong Wang, Richard C. Easter, Rudong Zhang, Po\u2010Lun Ma, Balwinder Singh, Kai Zhang, Dilip Ganguly, Philip J. Rasch, Susannah M. Burrows, Steven J. Ghan, Sijia Lou, Yun Qian, Yang Yang, Yan Feng, Mark Flanner, L. Ruby Leung, Xiaohong Liu, Manish Shrivastava, Jian Sun, Qi Tang, Shaocheng Xie, and Jin\u2010Ho Yoon. Aerosols in the E3SM Version 1: New Developments and Their Impacts on Radiative Forcing. Journal of Advances in Modeling Earth Systems, 12(1):e2019MS001851, January 2020. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2019MS001851 (visited on 2024-03-29), doi:10.1029/2019MS001851.\u00a0\u21a9</p> </li> <li> <p>Susannah M. Burrows, Richard C. Easter, Xiaohong Liu, Po-Lun Ma, Hailong Wang, Scott M. Elliott, Balwinder Singh, Kai Zhang, and Philip J. Rasch. OCEANFILMS (Organic Compounds from Ecosystems to Aerosols: Natural Films and Interfaces via Langmuir Molecular Surfactants) sea spray organic aerosol emissions \u2013 implementation in a global climate model and impacts on clouds. Atmospheric Chemistry and Physics, 22(8):5223\u20135251, April 2022. URL: https://acp.copernicus.org/articles/22/5223/2022/ (visited on 2024-03-29), doi:10.5194/acp-22-5223-2022.\u00a0\u21a9</p> </li> <li> <p>Y. Feng, H. Wang, P. J. Rasch, K. Zhang, W. Lin, Q. Tang, S. Xie, D. S. Hamilton, N. Mahowald, and H. Yu. Global Dust Cycle and Direct Radiative Effect in E3SM Version 1: Impact of Increasing Model Resolution. Journal of Advances in Modeling Earth Systems, 14(7):e2021MS002909, July 2022. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2021MS002909 (visited on 2024-03-29), doi:10.1029/2021MS002909.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/user-guide/emission_oxidant_files/","title":"Emission files for EAMv3 gas and aerosol species and oxidant file for VBS SOA and stratosphere sulfate formation","text":""},{"location":"EAM/user-guide/emission_oxidant_files/#overview","title":"Overview","text":"<p>This page documents emissions data for all required aerosols and precursor gases as well as oxidants input data for running EAMv3, mostly for the MAM4 aerosol scheme, from anthropogenic (i.e., industrial, energy, transportation, domestic, and agriculture activity sectors) and natural (i.e., sea spray, vegetation, fire smoke, volcano) sources. Sulfur from agriculture, domestic, transportation, waste, and shipping sectors is emitted at the surface while sulfur from energy and industry sectors is emitted at 100-300 m above the surface, and sulfur from forest fire and grass fire is emitted at higher elevations (0-6 km). POM and BC from forest fire and grass fire are emitted at 0-6 km, while those from other sources (domestic, energy, industry, transportation, waste, and shipping) are emitted at the surface. Injection height profiles for fire emissions are derived from the corresponding AeroCom profiles (Dentener et al., 2006)<sup>1</sup>, which give emissions in 6 altitude ranges (0-0.1, 0.1-0.5, 0.5-1, 1-2, 2-3, and 3-6 km). Otherwise, species emissions are assumed to be at the surface (bottom layer). Number emission fluxes each mode are calculated from mass emission fluxes based on AeroCom prescribed lognormal size distributions.</p>"},{"location":"EAM/user-guide/emission_oxidant_files/#aerosols-and-gas-precursors-common-for-eamv1v2v3","title":"Aerosols and gas precursors (common for EAMv1/v2/v3)","text":"<ul> <li>Species: SO2, SOAG0, DMS, bc_a4, pom_a4, so4_a1, so4_a2, num_a1, num_a2, num_a4</li> <li>Data sources</li> <li>Most of the original data are directly from input4MIPs with the following exceptions (E3SM specific treatments)</li> <li>SO2 takes 97.5% from the input4MIPs data (all SO2-em-anthro_input4MIPs sectors)</li> <li>SO4_a1 surf takes 2.5% from the corresponding surface sectors of input4MIPs data (SO2-em-anthro_input4MIPs sectors: AGR, SLV, WST, SHP)</li> <li>SO4_a2 surf takes 2.5% from the corresponding surface sectors of input4MIPs data (SO2-em-anthro_input4MIPs sectors: TRA, RCO)</li> <li>SO4_a1 elev takes 2.5% from the corresponding elevated sectors of input4MIPs data (SO2-em-anthro_input4MIPs sectors: ENE, IND)</li> <li>SO2 (97.5%) and SO4_a1 (2.5%) also take emissions from AR5 input file for sector contvolc (constant volcanic degassing)</li> <li>SOAG0 emissions are obtained by scaling OC (POM) emissions with a tunable factor.</li> <li>num_a1, num_a2 and num_a4 are determined by mass concentration of aerosols species in the corresponding sectors and modes.</li> </ul>"},{"location":"EAM/user-guide/emission_oxidant_files/#marine-organic-sea-spray","title":"Marine organic sea spray","text":"<p>Marine organic sea spray aerosol contributions are parameterized following the OCEANFILMS parameterization (E3SMv1; Burrows et al., 2014;<sup>2</sup> 2022<sup>3</sup>).  The input file for this parameterization provides a climatology of the ocean surface concentrations of several groups of organic macromolecules.  Briefly, the Parallel Ocean Program (POP; Maltrud et al., 1998)<sup>4</sup> and its biogeochemical elemental cycling (BEC) routines (Moore et al., 2004)<sup>5</sup> were used to simulate marine biogeochemistry fields, including particulate organic matter (POC), chlorophyll, and zooplankton concentrations; these fields were used to generate maps of the estimated surface distributions of classes of macromolecules following the methods described in Burrows et al. (2014).<sup>2</sup>  The scripts used to accomplish this translation are available here.</p> <p>The file used as an input to E3SM is available here: https://web.lcrc.anl.gov/public/e3sm/inputdata/atm/cam/chem/trop_mam/marine_BGC/monthly_macromolecules_0.1deg_bilinear_latlon_year01_merge_date.nc</p> <p>And is also published as a citeable dataset on Zenodo:</p> <p>Elliott, S. M., Maltrud, M., &amp; Burrows, S. M. (2015). Macromolecule distributions input file for the OCEANFILMS parameterization (Version v1) [Data set]. Zenodo.</p>"},{"location":"EAM/user-guide/emission_oxidant_files/#oceanic-dimethyl-sulfide-concentrations","title":"Oceanic dimethyl sulfide concentrations","text":"<p>Dimethyl sulfide (DMS) fluxes to the atmosphere are calculated in E3SM as a function of prescribed surface oceanic DMS concentrations, and an air-sea flux piston velocity that is a function of wind speed.</p> <p>E3SM uses a DMS surface concentration dataset developed from a dynamic ocean biogeochemistry simulation; the methods and underlying assumptions used to produce this dataset are documented in Wang, et al. (2015).  The resolution in the DMS dataset is 1.9x2.5 degrees.</p>"},{"location":"EAM/user-guide/emission_oxidant_files/#new-gas-species-for-chemuci-in-eamv3","title":"New gas species for chemUCI in EAMv3","text":"<ul> <li>Species: C2H4, C2H6, C3H8, CH2O, CH3CHO, CH3COCH3, CO, E90, ISOP, NO, NO2</li> <li>Data sources</li> <li>anthropogenic, biomass burning, and aircraft emissions (NO2) are regridded from NCAR CESM2 emission files. They  are time-dependent during historical period and in the future scenarios.</li> <li>biogenic emissions (C2H4, C2H6, C3H8, CH2O, CH3CHO, CH3COCH3, CO, ISOP) are from MEGAN-MACC offline data<ul> <li>1850-1979: monthly input cycled yearly from 30-year mean (1980-2009)</li> <li>1980-2014: time-varying MEGAN-MACC data (historical)</li> <li>2015-2100: monthly input cycled yearly from 30-year mean (1980-2009)</li> </ul> </li> <li>natural emissions from oceans (C2H4, C2H6, C3H8, CO) and soil (NO) are regridded from NCAR CESM2 emission files. Just cycled yearly during the historical period and in the future scenarios.</li> <li>E90 emissions?</li> </ul>"},{"location":"EAM/user-guide/emission_oxidant_files/#oxidants-file-needed-for-vbs-soa-and-stratosphere-sulfate-formation","title":"Oxidants file needed for VBS SOA and stratosphere sulfate formation","text":"<ul> <li>Species: prsd_O3, prsd_NO3, prsd_OH</li> <li>Data sources</li> <li>the file for historical simulation is the same as v1 and v2, inherited from CESM</li> <li>files for SSPs are regridded from NCAR CESM2 tracer files</li> </ul>"},{"location":"EAM/user-guide/emission_oxidant_files/#namelist-setting-for-emissions-input","title":"Namelist setting for emissions input","text":""},{"location":"EAM/user-guide/emission_oxidant_files/#historical-wcycl20tramip-f20tr","title":"Historical (WCYCL20TR)/AMIP (F20TR)","text":"<pre><code> ext_frc_specifier              = 'NO2         -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_NO2_aircraft_vertical_1750-2015_1.9x2.5_c20170608.nc',\n         'SO2         -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so2_elev_1850-2014_c180205_kzm_1850_2014_volcano.nc',\n         'SOAG0       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/emissions-cmip6_e3sm_SOAG0_elev_1850-2014_1.9x2.5_c20230201.nc',\n         'bc_a4       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_bc_a4_elev_1850-2014_c180205.nc',\n         'num_a1      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a1_elev_1850-2014_c180205.nc',\n         'num_a2      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a2_elev_1850-2014_c180205.nc',\n         'num_a4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a4_elev_1850-2014_c180205.nc',\n         'pom_a4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_pom_a4_elev_1850-2014_c180205.nc',\n         'so4_a1      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so4_a1_elev_1850-2014_c180205.nc',\n         'so4_a2      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so4_a2_elev_1850-2014_c180205.nc'\n\n srf_emis_specifier             = 'C10H16 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_MTERP_surface_1850-2014_1.9x2.5_c20230126.nc',\n         'C2H4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_C2H4_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'C2H6      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_C2H6_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'C3H8      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_C3H8_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'CH2O   -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_CH2O_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'CH3CHO    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_CH3CHO_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'CH3COCH3  -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_CH3COCH3_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'CO     -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_CO_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'DMS    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DMSflux.1850-2100.1deg_latlon_conserv.POPmonthlyClimFromACES4BGC_c20160727.nc',\n         'E90       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions_E90_surface_1750-2015_1.9x2.5_c20210408.nc',\n         'ISOP   -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_ISOP_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'ISOP_VBS -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_ISOP_surface_1850-2014_1.9x2.5_c20210323.nc',\n         'NO     -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_NO_surface_1850-2014_1.9x2.5_c20220425.nc',\n         'SO2    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so2_surf_1850-2014_c180205.nc',\n         'SOAG0  -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/emissions-cmip6_e3sm_SOAG0_surf_1850-2014_1.9x2.5_c20230201.nc',\n         'bc_a4  -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_bc_a4_surf_1850-2014_c180205.nc',\n         'num_a1 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a1_surf_1850-2014_c180205.nc',\n         'num_a2 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a2_surf_1850-2014_c180205.nc',\n         'num_a4 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a4_surf_1850-2014_c180205.nc',\n         'pom_a4 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_pom_a4_surf_1850-2014_c180205.nc',\n         'so4_a1 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so4_a1_surf_1850-2014_c180205.nc',\n         'so4_a2 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so4_a2_surf_1850-2014_c180205.nc'\n\n tracer_cnst_datapath           = '\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/oxid'\n tracer_cnst_file               = 'oxid_1.9x2.5_L26_1850-2015_c20181106.nc'\n tracer_cnst_filelist           = ''\n tracer_cnst_specifier          = 'prsd_O3:O3','prsd_NO3:NO3','prsd_OH:OH'\n tracer_cnst_type               = 'INTERP_MISSING_MONTHS'\n</code></pre>"},{"location":"EAM/user-guide/emission_oxidant_files/#f2010","title":"F2010","text":"<pre><code> ext_frc_cycle_yr               = 2010\n ext_frc_specifier              = 'NO2         -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_NO2_aircraft_vertical_2010_clim_1.9x2.5_c20230213.nc',\n         'SO2         -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so2_elev_1x1_2010_clim_c20190821.nc',\n         'SOAG0       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/emissions-cmip6_e3sm_SOAG0_elev_2010_clim_1.9x2.5_c20230213.nc',\n         'bc_a4       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_bc_a4_elev_1x1_2010_clim_c20190821.nc',\n         'num_a1      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a1_elev_1x1_2010_clim_c20190821.nc',\n         'num_a2      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a2_elev_1x1_2010_clim_c20190821.nc',\n         'num_a4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a4_elev_1x1_2010_clim_c20190821.nc',\n         'pom_a4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_pom_a4_elev_1x1_2010_clim_c20190821.nc',\n         'so4_a1      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so4_a1_elev_1x1_2010_clim_c20190821.nc',\n         'so4_a2      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so4_a2_elev_1x1_2010_clim_c20190821.nc'\n ext_frc_type           = 'CYCLICAL'\n\n srf_emis_cycle_yr              = 2010\n srf_emis_specifier             = 'C10H16 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_MTERP_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'C2H4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_C2H4_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'C2H6      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_C2H6_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'C3H8      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_C3H8_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'CH2O   -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_CH2O_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'CH3CHO    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_CH3CHO_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'CH3COCH3  -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_CH3COCH3_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'CO     -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_CO_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'DMS    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DMSflux.2010.1deg_latlon_conserv.POPmonthlyClimFromACES4BGC_c20190220.nc',\n         'E90       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions_E90_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'ISOP   -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_ISOP_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'ISOP_VBS -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_ISOP_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'NO     -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/chem_gases/2degrees/emissions-cmip6_e3sm_NO_surface_2010_clim_1.9x2.5_c20230213.nc',\n         'SO2    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so2_surf_1x1_2010_clim_c20190821.nc',\n         'SOAG0  -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/emissions-cmip6_e3sm_SOAG0_surf_2010_clim_1.9x2.5_c20230213.nc',\n         'bc_a4  -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_bc_a4_surf_1x1_2010_clim_c20190821.nc',\n         'num_a1 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a1_surf_1x1_2010_clim_c20190821.nc',\n         'num_a2 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a2_surf_1x1_2010_clim_c20190821.nc',\n         'num_a4 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_num_a4_surf_1x1_2010_clim_c20190821.nc',\n         'pom_a4 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_pom_a4_surf_1x1_2010_clim_c20190821.nc',\n         'so4_a1 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so4_a1_surf_1x1_2010_clim_c20190821.nc',\n         'so4_a2 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DECK_ne30/cmip6_mam4_so4_a2_surf_1x1_2010_clim_c20190821.nc'\n srf_emis_type          = 'CYCLICAL'\n\n tracer_cnst_cycle_yr           = 2015\n tracer_cnst_datapath           = '\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/oxid'\n tracer_cnst_file               = 'oxid_1.9x2.5_L26_1850-2015_c20181106.nc'\n tracer_cnst_filelist           = ''\n tracer_cnst_specifier          = 'prsd_O3:O3','prsd_NO3:NO3','prsd_OH:OH'\n tracer_cnst_type               = 'CYCLICAL'\n ```\n\n### Future Scenarios\n\n#### SSP370\n\n```fortran\next_frc_specifier              = 'NO2         -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_NO2_aircraft_vertical_2015-2100_1.9x2.5_c20240208.nc',\n         'SO2         -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so2_elev_2015-2100_c210216.nc',\n         'SOAG0       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_SOAG0_elev_2015-2100_1.9x2.5_c20240208.nc',\n         'bc_a4       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_bc_a4_elev_2015-2100_c210216.nc',\n         'num_a1      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a1_elev_2015-2100_c210216.nc',\n         'num_a2      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a2_elev_2015-2100_c210216.nc',\n         'num_a4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a4_elev_2015-2100_c210216.nc',\n         'pom_a4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_pom_a4_elev_2015-2100_c210216.nc',\n         'so4_a1      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so4_a1_elev_2015-2100_c210216.nc',\n         'so4_a2      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so4_a2_elev_2015-2100_c210216.nc'\n\nsrf_emis_specifier             = 'C10H16 -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_MTERP_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'C2H4      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_C2H4_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'C2H6      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_C2H6_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'C3H8      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_C3H8_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'CH2O      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_CH2O_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'CH3CHO    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_CH3CHO_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'CH3COCH3  -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_CH3COCH3_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'CO        -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_CO_surface_2015-2100_1.9x2.5_c20240208.nc ',\n         'DMS       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DMSflux.1850-2100.1deg_latlon_conserv.POPmonthlyClimFromACES4BGC_c20160727.nc',\n         'E90       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/emissions_E90_surface_1750-2101_1.9x2.5_c20231222.nc',\n         'ISOP      -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_ISOP_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'ISOP_VBS  -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_ISOP_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'NO        -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_NO_surface_2015-2100_1.9x2.5_c20240208.nc',\n         'SO2       -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so2_surf_2015-2100_c210216.nc',\n         'SOAG0     -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_SOAG0_surf_2015-2100_1.9x2.5_c20240208.nc',\n         'bc_a4     -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_bc_a4_surf_2015-2100_c210216.nc',\n         'num_a1    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a1_surf_2015-2100_c210216.nc',\n         'num_a2    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a2_surf_2015-2100_c210216.nc',\n         'num_a4    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a4_surf_2015-2100_c210216.nc',\n         'pom_a4    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_pom_a4_surf_2015-2100_c210216.nc',\n         'so4_a1    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so4_a1_surf_2015-2100_c210216.nc',\n         'so4_a2    -&gt; \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so4_a2_surf_2015-2100_c210216.nc'\n\n tracer_cnst_datapath           = '\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/oxid'\n tracer_cnst_file               = 'oxid_SSP370_1.9x2.5_L70_1849-2101_c20240228.nc'\n tracer_cnst_filelist           = ''\n tracer_cnst_specifier          = 'prsd_O3:O3','prsd_NO3:NO3','prsd_OH:OH'\n tracer_cnst_type               = 'INTERP_MISSING_MONTHS'\n</code></pre> <ol> <li> <p>F. Dentener, S. Kinne, T. Bond, O. Boucher, J. Cofala, S. Generoso, P. Ginoux, S. Gong, J. J. Hoelzemann, A. Ito, L. Marelli, J. E. Penner, J.-P. Putaud, C. Textor, M. Schulz, G. R. van der Werf, and J. Wilson. Emissions of primary aerosol and precursor gases in the years 2000 and 1750 prescribed data-sets for AeroCom. Atmospheric Chemistry and Physics, 6(12):4321\u20134344, 2006. URL: https://acp.copernicus.org/articles/6/4321/2006/acp-6-4321-2006.html (visited on 2024-04-24), doi:10.5194/acp-6-4321-2006.\u00a0\u21a9</p> </li> <li> <p>S. M. Burrows, O. Ogunro, A. A. Frossard, L. M. Russell, P. J. Rasch, and S. M. Elliott. A physically based framework for modeling the organic fractionation of sea spray aerosol from bubble film Langmuir equilibria. Atmospheric Chemistry and Physics, 14(24):13601\u201313629, December 2014. URL: https://acp.copernicus.org/articles/14/13601/2014/ (visited on 2024-03-29), doi:10.5194/acp-14-13601-2014.\u00a0\u21a9\u21a9</p> </li> <li> <p>Susannah M. Burrows, Richard C. Easter, Xiaohong Liu, Po-Lun Ma, Hailong Wang, Scott M. Elliott, Balwinder Singh, Kai Zhang, and Philip J. Rasch. OCEANFILMS (Organic Compounds from Ecosystems to Aerosols: Natural Films and Interfaces via Langmuir Molecular Surfactants) sea spray organic aerosol emissions \u2013 implementation in a global climate model and impacts on clouds. Atmospheric Chemistry and Physics, 22(8):5223\u20135251, April 2022. URL: https://acp.copernicus.org/articles/22/5223/2022/ (visited on 2024-03-29), doi:10.5194/acp-22-5223-2022.\u00a0\u21a9</p> </li> <li> <p>Mathew E. Maltrud, Richard D. Smith, Albert J. Semtner, and Robert C. Malone. Global eddy\u2010resolving ocean simulations driven by 1985\u20131995 atmospheric winds. Journal of Geophysical Research: Oceans, 103(C13):30825\u201330853, December 1998. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/1998JC900013 (visited on 2024-03-29), doi:10.1029/1998JC900013.\u00a0\u21a9</p> </li> <li> <p>J. Keith Moore, Scott C. Doney, and Keith Lindsay. Upper ocean ecosystem dynamics and iron cycling in a global three\u2010dimensional model. Global Biogeochemical Cycles, 18(4):2004GB002220, December 2004. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1029/2004GB002220 (visited on 2024-03-29), doi:10.1029/2004GB002220.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAM/user-guide/namelist_parameters/","title":"Namelist parameters associated with atmosphere schemes","text":""},{"location":"EAM/user-guide/namelist_parameters/#chemuci-and-linoz-v3","title":"chemUCI and Linoz v3","text":"Parameter Description Default value* <code>airpl_emis_file</code> Aviation emission <code>chlorine_loading_file</code> Chlorine loading <code>chlorine_loading_fixed_ymd</code> <code>chlorine_loading_type</code> <code>ext_frc_specifier</code> 3-D emissions <code>ext_frc_cycle_yr</code> <code>ext_frc_type</code> <code>srf_emis_specifier</code> Surface emissions <code>srf_emis_cycle_yr</code> <code>srf_emis_type</code> Upper bound of mean raindrop diameter <code>linoz_data_file</code> Linoz data file <code>linoz_data_cycle_yr</code> <code>linoz_data_path</code> <code>linoz_data_type</code> <code>lght_no_prd_factor</code> Lightning NOx emission factor <code>5.0</code> <code>fstrat_efold_list</code> Tracer (from troposphere) list with e-folding decay in the stratosphere <ul> <li>Many of these namelist parameters specify input data files. Check the <code>atm_in</code> file for examples or refer to the Users' Guide.</li> </ul>"},{"location":"EAM/user-guide/namelist_parameters/#cloud-layers-unified-by-binormals","title":"Cloud Layers Unified By Binormals","text":"Parameter Description Default value <code>gamma_coef</code> Width of vertical velocity within a Gaussian PDF component at low skewness <code>0.12</code> <code>gamma_coefb</code> Width of vertical velocity within a Gaussian PDF component at high skewness <code>0.28</code> <code>C8</code> Coefficient of damping of third moment of vertical velocity, w\u20193 <code>5.2</code> <code>C1</code> Coefficient of damping of second vertical moment of vertical velocity, w\u20192, at low skewness <code>2.4</code> <code>C14</code> Coefficient of damping of second horizontal moments of vertical velocity, u\u20192 and v\u20192 <code>2.0</code> <code>c_k10</code> Ratio of diffusivity of momentum to heat <code>0.35</code>"},{"location":"EAM/user-guide/namelist_parameters/#dust-aerosol","title":"Dust aerosol","text":"Parameter Description Default value <code>dust_emis_scheme</code>* The v3 dust emission scheme (Kok et al., 2014) <code>2</code>  (set to 1 to switch to the v1/v2 scheme) <p>*This parameter is set in <code>user_nl_drv</code></p>"},{"location":"EAM/user-guide/namelist_parameters/#homme","title":"HOMME","text":"Parameter Description Default value <code>se_tstep</code> Main dycore timestep. Additional parameters control the hyper viscsosity, trancer and vertical remap timesteps, which are derived from se_tstep.  units = seconds Scales linearly with horizontal resolution.  NE30 default: <code>300</code> <code>nu</code> Tensor hyperviscosity coefficient, independent of spatial resolution.  units = 1/s <code>3.4e-8</code> <code>nu_top</code> Scalar viscosity at model top.  units = m^2/s Horizontal resolution dependent  NE30 default: <code>2.5e5</code> <code>transport_alg</code> Select between semi-lagrangian and Eulerian based transport schemes <code>12</code> = semi-lagranian method with monotinicity and mass preservation <code>statefreq</code> print a varieity of dycore metrics to the atm.log file every \u201cstatefreq\u201d timesteps <code>480</code> <code>vert_remap_alg</code> Algorithm used to remap the vertically lagrangian levels back to the reference levels <code>10</code> = strict monotonicity applied on top of a 2nd order accurate PPM method <code>se_ftype</code> Controls how physics tendencies are applied.  0=\u201ddribbled\u201d in during dynamics timesteps.  1=\u201dhard adjustment\u201d after each physics timestep.  2=hybrid approach: hard adjustment for tracers, dribbled for remaining tendencies <code>2</code>"},{"location":"EAM/user-guide/namelist_parameters/#modal-aerosol-module","title":"Modal Aerosol Module","text":"Parameter Description Default value <code>is_output_interactive_volc</code> Switch for diagnostic output of the stratospheric aerosol optics <code>.false.</code> <code>mam_amicphys_optaa</code> Recommended option of the new time-splitting treatment of H2SO4 production and loss <code>1</code>  (0 to turn it off) <code>n_so4_monolayers_pcage</code> Number of monolayers required to age primary-carbon mode particles <code>3</code> <code>seasalt_emis_scale</code> Tuning parameter for sea salt emission <code>0.55</code>"},{"location":"EAM/user-guide/namelist_parameters/#oceanfilms","title":"OCEANFILMS","text":"Parameter Description Default value <code>mam_mom_cycle_yr</code> <code>1</code> <code>mam_mom_datapath</code> Full pathname of the directory that contains the files specified in mam_mom_filelist <code>'atm/cam/chem/trop_mam/marine_BGC/'</code> <code>mam_mom_filename</code> Filename of file that contains a sequence of filenames for prescribed marine organic matter ocean concentrations.  The filenames in this file are relative to the directory specified by mam_mom_datapath. <code>'monthly_macromolecules_0.1deg_bilinear_latlon_year01_merge_date.nc'</code> <code>mam_mom_rmfile</code> Remove the file containing prescribed aerosol deposition fluxes from local disk when no longer needed. <code>FALSE</code> <code>mam_mom_specifier</code> Names of variables containing aerosol data in the prescribed aerosol datasets. <code>'chla:CHL1','mpoly:TRUEPOLYC','mprot:TRUEPROTC','mlip:TRUELIPC'</code> <code>mam_mom_datatype</code> Type of time interpolation for data in mam_mom files. Can be set to <code>'CYCLICAL'</code>, <code>'SERIAL'</code>, <code>'INTERP_MISSING_MONTHS'</code>, or <code>'FIXED'</code>. <code>'CYCLICAL'</code> <code>mam_mom_cycle_yr</code> The  cycle year of the prescribed aerosol flux data if mam_mom_type is <code>'CYCLICAL'</code>. Format: YYYY <code>1</code> <code>mam_mom_fixed_ymd</code> The date at which the prescribed aerosol flux data is fixed if mam_mom_type is <code>'FIXED'</code>. Format: YYYYMMDD <code>0</code> <code>mam_mom_fixed_tod</code> The time of day (seconds) corresponding to mam_mom_fixed_ymd at which the prescribed aerosol flux data is fixed if mam_mom_type is 'FIXED'. <code>0</code> <code>mam_mom_bubble_thickness</code> Bubble film thickness (in m) for marine organic aerosol emission mechanism.  The physically reasonable range is approximately (0.1 - 1) x 10^ -6. <code>0.1e-6</code> <code>mam_mom_mixing_state</code> Switch to select mixing state assumption in marine organic aerosol code. Currently implemented options: 0 : total external mixture, add to mass; 1 : total external mixture, replace mass; 2 : total internal mixture, add to mass; 3 : total internal mixture, replace mass. <code>0</code> [Note: set to 3 in the atm_in namelist] <code>mam_mom_parameterization</code> Selection of alternate parameterizations for marine organic matter emissions.  Set fmoa=1 for Burrows et al. (2014) <sup>1</sup> parameterization; fmoa=2 for Gantt et al. (2011) <sup>2</sup> parameterization; fmoa=3 for simple parameterization based on Quinn et al., 2014; <sup>3</sup> fmoa=4 for Rinaldi et al. (JGR, 2013).* <sup>4</sup> <code>1</code> <p>*Note: non-default values have not been carefully tested and may not work as expected.</p>"},{"location":"EAM/user-guide/namelist_parameters/#predicted-particle-properties","title":"Predicted Particle Properties","text":"Parameter Description Default value <code>do_prescribed_ccn</code> Turn on the prescribed CCN if true <code>false</code> <code>micro_aerosolactivation</code> Turn on aerosol activation if true <code>true</code> <code>micro_p3_lookup_dir</code> Directory of P3 look-up tables <code>inputdata/atm/cam/physprops</code> <code>micro_p3_tableversion</code> P3 look-up table Version <code>4.1.2</code> <code>micro_subgrid_cloud</code> Sub-grid cloud properties <code>true</code> <code>micro_tend_output</code> Output of P3 microphysical process rates <code>false</code> <code>p3_accret_coeff</code> Tunable parameter for adjusting rain accretion efficiency <code>117.25</code> <code>p3_autocon_coeff</code> Tunable parameter for adjusting droplet autoconversion efficiency <code>30500</code> <code>p3_embryonic_rain_size</code> Radius of embryomic raindrops from auto-conversion <code>0.000025</code> (m) <code>p3_max_mean_rain_size</code> Upper bound of mean raindrop diameter <code>0.005</code> (m) <code>p3_mincdnc</code> Lower bound of droplet number concentration <code>20.d6</code> (# m-3) <code>p3_nc_autocon_expon</code> Nc exponent in droplet auto-conversion <code>-1.1</code> <code>p3_qc_accret_expon</code> Qc exponent in rain accretion <code>1.15</code> <code>p3_qc_autocon_expon</code> Qc exponeent in droplet autoconversion <code>3.19</code> <code>p3_wbf_coeff</code> Tunable parameter for adjusting WBF efficiency <code>1.0</code> <code>do_cooper_inp3</code> Turn on Cooper ice nucleation scheme if true <code>false</code>"},{"location":"EAM/user-guide/namelist_parameters/#rapid-radiative-transfer-model-for-gcms","title":"Rapid Radiative Transfer Model for GCMs","text":"Parameter Description Default value <code>iradsw</code> Frequency for updating shortwave fluxes and heating rate; iradsw &gt; 0 interpreted as number of timesteps, iradsw &lt; 0 interpreted as hours; iradsw = 0 disables shortwave radiation entirely <code>-1</code> <code>iradlw</code> Frequency for updating longwave fluxes and heating rate; iradlw &gt; 0 interpreted as number of timesteps, iradlw &lt; 0 interpreted as hours; iradlw = 0 disables longwave radiation entirely <code>-1</code> <code>irad_always</code> Length of time in timesteps (irad_always &gt; 0) or in hours (irad_always &lt; 0) SW/LW radiation will be run continuously from the start of an initial or restart run <code>0</code> <code>use_rad_dt_cosz</code> If true, use the radiation dt for all cosz calculations; calculates solar zenith angle averaged over a time step. In default model solar zenith angle is held constant over time <code>.true.</code>  (set by namelist_defaults_eam.xml for default physics) <code>spectralflux</code> Calculate fluxes (up and down) per band <code>.false.</code> <code>liqcldoptics</code> Choice of cloud optical property parameterization for liquid clouds. Valid options are \u2018slingo\u2019 or \u2018gammadist\u2019 <code>gammadist</code> <code>icecldoptics</code> Choice of cloud optical property parameterization for ice clouds. Valid options are \u2018ebertcurry\u2019 or \u2018mitchell\u2019 <code>mitchell</code>"},{"location":"EAM/user-guide/namelist_parameters/#zhang-and-mcfarlane-deep-convection-scheme","title":"Zhang and McFarlane deep convection scheme","text":"ZM Parameters Description Default value <code>zmconv_ke</code> Tunable evaporation efficiency in ZM deep convection scheme <code>2.5E-6</code> <code>zmconv_tau</code> Relaxation time in ZM deep convection scheme <code>3600</code> <code>zmconv_dmpdz</code> Parcel fractional mass entrainment rate <code>-0.7E-3</code> <code>zmconv_alfa</code> Initial downdraft mass flux fraction <code>0.14D0</code> <code>zmconv_tiedke_add</code> Temperature perturbation of an air parcel <code>0.8D0</code> <code>zmconv_cape_cin</code> Number of negative buoyancy regions that are allowed <code>1</code> dCAPE-ULL Parameters Description Default value <code>zmconv_trigdcape_ull</code> DCAPE trigger along with unrestricted launching level for ZM deep convection scheme <code>.true.</code> <code>zmconv_trig_dcape_only</code> DCAPE only trigger for ZM deep convection scheme <code>.false.</code>  If true, zmconv_trigdcape_ull must be false to use the dcape only trigger. <code>zmconv_trig_ull_only</code> Use unrestricted launching level (ULL) only trigger for ZM deep convection scheme <code>.false.</code>  If true, zmconv_trigdcape_ull must be false to use the ull only trigger. Conv. micro. Parameters Description Default value <code>zmconv_microp</code> Convective microphysics option in ZM convection scheme <code>true</code> <code>zmconv_auto_fac</code> Cloud droplet-rain autoconversion enhancement factor in the convective microphysics scheme <code>7.0</code> <code>zmconv_accr_fac</code> Cloud droplet-rain accretion enhancement factor in the convective microphysics scheme <code>1.5</code> <code>zmconv_micro_dcs</code> Autoconversion size threshold for cloud ice to snow (m) <code>150.E-6</code> Mass flux adj. Parameters Description Default value <code>zmconv_clos_dyn_adj</code> Apply mass flux adjustment to ZM convection scheme <code>true</code> MCSP Parameters Description Default value <code>zmconv_mcsp_heat_coeff</code> MCSP heating coefficient <code>0.3</code> <code>zmconv_mcsp_moisture_coeff</code> MCSP moisture coefficient <code>0.0</code> <code>zmconv_mcsp_uwind_coeff</code> MCSP zonal wind coefficient <code>0.0</code> <code>zmconv_mcsp_vwind_coeff</code> MCSP meridional wind coefficient <code>0.0</code>"},{"location":"EAM/user-guide/namelist_parameters/#cloud-feedback-model-intercomparison-project-cfmip-observation-simulator-package","title":"Cloud Feedback Model Intercomparison Project (CFMIP) Observation Simulator Package","text":"Parameter Description Default value <code>cosp_lite</code> This namelist sets cosp_ncolumns=10 and cosp_nradsteps=3 (appropriate for COSP statistics derived from seasonal averages), and runs MISR, ISCCP, MODIS, and CALIPSO lidar simulators (cosp_lmisr_sim=.true.,cosp_lisccp_sim=.true., cosp_lmodis_sim=.true.,cosp_llidar_sim=.true.). <code>false</code>"},{"location":"EAM/user-guide/namelist_parameters/#orographic-drag-schemes","title":"Orographic drag schemes","text":"Parameter Description Default value <code>use_gw_oro</code> This namelist controls the default linear orographic gravity wave drag (oGWD) for E3SM, if used, the default oGWD is turned on. <code>true</code> <code>do_tms</code> This namelist controls the default Turbulent Mountain Stress (TMS) for E3SM, if used, the default TMS is turned on. <code>false</code> <code>effgw_oro</code> Efficiency associated with orographic gravity waves. <code>0.375</code> <code>tms_orocnst</code> Turbulent mountain stress parameter used when TMS calculation is turned on <code>1.0</code> <code>tms_z0fac</code> Factor determining z_0 from orographic standard deviation [ no unit ] for TMS. <code>0.75</code> <code>use_od_ls</code> This namelist controls the new nonlinear oGWD, if used, the nonlinear oGWD is turned on. use_od_ls should not be used at the same time with use_gw_oro. <code>true</code> <code>use_od_bl</code> This namelist controls the Flow-blocking drag (FBD) scheme, if used, the FBD scheme is turned on. <code>true</code> <code>use_od_ss</code> This namelist controls the small-scale GWD (sGWD) scheme, if used, the sGWD scheme is turned on. <code>true</code> <code>use_od_fd</code> This namelist controls the Turbulent orographic form drag (TOFD) scheme, if used, the TOFD scheme is turned on. <code>true</code> <code>od_ls_ncleff</code> Tuning parameter of nonlinear oGWD. Stands for effective resolution of the grid for oGWD. Scales the magnitude of nonlinear oGWD. <code>3</code> <code>od_bl_ncd</code> Tuning parameter of FBD. Stands for bulk drag coefficient. Scales the magnitude of FBD. <code>3</code> <code>od_ss_sncleff</code> Tuning parameter of sGWD. Stands for effective resolution of the grid for sGWD.Scales the magnitude of sGWD. <code>1</code> <ol> <li> <p>S. M. Burrows, O. Ogunro, A. A. Frossard, L. M. Russell, P. J. Rasch, and S. M. Elliott. A physically based framework for modeling the organic fractionation of sea spray aerosol from bubble film Langmuir equilibria. Atmospheric Chemistry and Physics, 14(24):13601\u201313629, December 2014. URL: https://acp.copernicus.org/articles/14/13601/2014/ (visited on 2024-03-29), doi:10.5194/acp-14-13601-2014.\u00a0\u21a9</p> </li> <li> <p>B. Gantt, N. Meskhidze, M. C. Facchini, M. Rinaldi, D. Ceburnis, and C. D. O'Dowd. Wind speed dependent size-resolved parameterization for the organic mass fraction of sea spray aerosol. Atmospheric Chemistry and Physics, 11(16):8777\u20138790, August 2011. URL: https://acp.copernicus.org/articles/11/8777/2011/acp-11-8777-2011.html (visited on 2024-04-25), doi:10.5194/acp-11-8777-2011.\u00a0\u21a9</p> </li> <li> <p>Patricia K. Quinn, Timothy S. Bates, Kristen S. Schulz, D. J. Coffman, A. A. Frossard, L. M. Russell, W. C. Keene, and D. J. Kieber. Contribution of sea surface carbon pool to organic matter enrichment in sea spray aerosol. Nature Geoscience, 7(3):228\u2013232, March 2014. URL: https://www.nature.com/articles/ngeo2092 (visited on 2024-04-25), doi:10.1038/ngeo2092.\u00a0\u21a9</p> </li> <li> <p>Matteo Rinaldi, Sandro Fuzzi, Stefano Decesari, Salvatore Marullo, Rosalia Santoleri, Antonello Provenzale, Jost Von Hardenberg, Darius Ceburnis, Aditya Vaishya, Colin D. O'Dowd, and Maria Cristina Facchini. Is chlorophyll\u2010 \\textit a the best surrogate for organic matter enrichment in submicron primary marine aerosol? Journal of Geophysical Research: Atmospheres, 118(10):4964\u20134973, May 2013. URL: https://agupubs.onlinelibrary.wiley.com/doi/10.1002/jgrd.50417 (visited on 2024-04-25), doi:10.1002/jgrd.50417.\u00a0\u21a9</p> </li> </ol>"},{"location":"EAMxx/","title":"The E3SM Atmosphere Model in C++ (EAMxx)","text":""},{"location":"EAMxx/#eamxx","title":"EAMxx","text":"<p>EAMxx is almost completely different in all ways from the atmosphere model used for E3SM versions 1-3. </p> <p>EAMxx was built from the ground up using C++ in order to embrace modern software practices and to allow \"performance portability\" across various supercomputers. The latter goal is achieved by using the Kokkos library. EAMxx is a \"clean-start\" model with almost no similarity to the E3SM atmosphere model used in versions 1-3.  Currently only the km-scale explicit-convection version called SCREAM (the Simple Cloud-Resolving E3SM Atmosphere Model) is available, but a low-resolution version is in the works.</p> <p>Like the documentation for other component models, EAMxx documentation is divided into:</p> <ul> <li>The User Guide - info about running EAMxx and all options for modifying a simulation</li> <li>The Developer Guide - information needed to contribute to EAMxx development</li> <li>The Technical Guide - equations and numerical methods used in EAMxx</li> </ul> <p>Put another way, all information about how to customize runs without changing code is included in the User Guide, general information about software design which is needed for intelligently modifying code goes in the Developer Guide, and details about the specific process implementations in the current model version are included in the Technical Guide. </p>"},{"location":"EAMxx/common/eamxx_params/","title":"EAMxx runtime configurable parameters","text":""},{"location":"EAMxx/common/eamxx_params/#atmosphere-processes-parameters","title":"Atmosphere Processes Parameters","text":""},{"location":"EAMxx/common/eamxx_params/#sc_import","title":"sc_import","text":"<ul> <li>sc_import::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>sc_import::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_import::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_import::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>sc_import::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>sc_import::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#sc_export","title":"sc_export","text":"<ul> <li>sc_export::prescribed_constants::fields:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::prescribed_constants::values:  </p> <ul> <li>description: MISSING </li> <li>type: array(real)  </li> </ul> </li> <li> <p>sc_export::prescribed_from_file::fields:  </p> <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>sc_export::prescribed_from_file::files:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::prescribed_from_file::fields_alt_name:  </p> <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::number_of_subcycles:  </p> <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>sc_export::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_export::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_export::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>sc_export::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>sc_export::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#homme","title":"homme","text":"<ul> <li>homme::Moisture:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>homme::BfbHash:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>homme::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>homme::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>homme::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>homme::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>homme::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>homme::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#p3","title":"p3","text":"<ul> <li>p3::do_prescribed_ccn:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::do_predict_nc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::max_total_ni:  <ul> <li>description: maximum total ice concentration (sum of all categories)  </li> <li>type: real  </li> <li>constraints: gt 0  </li> </ul> </li> <li>p3::tables:  <ul> <li>description: MISSING </li> <li>type: array(file)  </li> </ul> </li> <li>p3::autoconversion_prefactor:  <ul> <li>description: Autoconversion linear prefactor  </li> <li>type: real  </li> </ul> </li> <li>p3::autoconversion_qc_exponent:  <ul> <li>description: Autoconversion qc exponent  </li> <li>type: real  </li> </ul> </li> <li>p3::autoconversion_nc_exponent:  <ul> <li>description: Autoconversion nc exponent  </li> <li>type: real  </li> </ul> </li> <li>p3::autoconversion_radius:  <ul> <li>description: Autoconversion droplet radius in meter  </li> <li>type: real  </li> </ul> </li> <li>p3::accretion_prefactor:  <ul> <li>description: Accretion linear prefactor  </li> <li>type: real  </li> </ul> </li> <li>p3::accretion_qc_exponent:  <ul> <li>description: Accretion qc exponent  </li> <li>type: real  </li> </ul> </li> <li>p3::accretion_qr_exponent:  <ul> <li>description: Accretion qr exponent  </li> <li>type: real  </li> </ul> </li> <li>p3::rain_selfcollection_prefactor:  <ul> <li>description: Rain self-collection prefactor  </li> <li>type: real  </li> </ul> </li> <li>p3::rain_selfcollection_breakup_diameter:  <ul> <li>description: Rain self-collection breakup diameter in meter  </li> <li>type: real  </li> </ul> </li> <li>p3::constant_mu_rain:  <ul> <li>description: Constant shape parameter (mu) in the rain droplet distribution  </li> <li>type: real  </li> </ul> </li> <li>p3::spa_ccn_to_nc_factor:  <ul> <li>description: Scaling factor for turning SPA ccn into P3 nc  </li> <li>type: real  </li> </ul> </li> <li>p3::cldliq_to_ice_collection_factor:  <ul> <li>description: Cloud liquid to ice collection scaling factor  </li> <li>type: real  </li> </ul> </li> <li>p3::rain_to_ice_collection_factor:  <ul> <li>description: Rain to ice collection scaling factor  </li> <li>type: real  </li> </ul> </li> <li>p3::min_rime_rho:  <ul> <li>description: Minimum rime density in kg/m3  </li> <li>type: real  </li> </ul> </li> <li>p3::max_rime_rho:  <ul> <li>description: Maximum rime density in kg/m3  </li> <li>type: real  </li> </ul> </li> <li>p3::immersion_freezing_exponent:  <ul> <li>description: Immersion freezing exponent for both rain and cloud liquid  </li> <li>type: real  </li> </ul> </li> <li>p3::deposition_nucleation_exponent:  <ul> <li>description: Deposition nucleation exponent factor  </li> <li>type: real  </li> </ul> </li> <li>p3::ice_sedimentation_factor:  <ul> <li>description: Ice sedimentation fall speed factor  </li> <li>type: real  </li> </ul> </li> <li>p3::do_ice_production:  <ul> <li>description: Flag to turn on ice production processes (loss processes unaffected)  </li> <li>type: logical  </li> </ul> </li> <li>p3::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>p3::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>p3::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>p3::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>p3::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>p3::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#shoc","title":"shoc","text":"<ul> <li>shoc::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>shoc::check_flux_state_consistency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>shoc::lambda_low:  <ul> <li>description: minimum value of stability correction.  </li> <li>type: real  </li> </ul> </li> <li>shoc::lambda_high:  <ul> <li>description: maximum value of stability correction.  </li> <li>type: real  </li> </ul> </li> <li>shoc::lambda_slope:  <ul> <li>description: slope of change from lambda_low to lambda_high.  </li> <li>type: real  </li> </ul> </li> <li>shoc::lambda_thresh:  <ul> <li>description: stability threshold for which to apply more stability correction.  </li> <li>type: real  </li> </ul> </li> <li>shoc::thl2tune:  <ul> <li>description: Temperature variance tuning factor  </li> <li>type: real  </li> </ul> </li> <li>shoc::qw2tune:  <ul> <li>description: Moisture variance tuning factor  </li> <li>type: real  </li> </ul> </li> <li>shoc::qwthl2tune:  <ul> <li>description: Temperature moisture covariance  </li> <li>type: real  </li> </ul> </li> <li>shoc::w2tune:  <ul> <li>description: Vertical velocity variance  </li> <li>type: real  </li> </ul> </li> <li>shoc::length_fac:  <ul> <li>description: Length scale factor  </li> <li>type: real  </li> </ul> </li> <li>shoc::c_diag_3rd_mom:  <ul> <li>description: Third moment vertical velocity damping factor  </li> <li>type: real  </li> </ul> </li> <li>shoc::Ckh:  <ul> <li>description: Eddy diffusivity coefficient for heat  </li> <li>type: real  </li> </ul> </li> <li>shoc::Ckm:  <ul> <li>description: Eddy diffusivity coefficient for momentum  </li> <li>type: real  </li> </ul> </li> <li>shoc::extra_shoc_diags:  <ul> <li>description: Extra SHOC diagnostics  </li> <li>type: logical  </li> </ul> </li> <li>shoc::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>shoc::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>shoc::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>shoc::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>shoc::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>shoc::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mam4_aci","title":"mam4_aci","text":"<ul> <li>mam4_aci::wsubmin:  <ul> <li>description: Minimum diagnostic sub-grid vertical velocity  </li> <li>type: real  </li> </ul> </li> <li>mam4_aci::top_level_mam4xx:  <ul> <li>description: Level corresponding to the top of troposphere clouds  </li> <li>type: integer  </li> </ul> </li> <li>mam4_aci::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mam4_aci::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_aci::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_aci::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mam4_aci::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_aci::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mam4_drydep","title":"mam4_drydep","text":"<ul> <li>mam4_drydep::fractional_land_use_file:  <ul> <li>description: File containing Fractional land use data for drydep  </li> <li>type: file  </li> </ul> </li> <li>mam4_drydep::drydep_remap_file:  <ul> <li>description: File containing mapping data from the grid of frac land use files to the model grid. Unused if the grid is the same.  </li> <li>type: file  </li> </ul> </li> <li>mam4_drydep::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mam4_drydep::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_drydep::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_drydep::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mam4_drydep::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_drydep::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#cldfraction","title":"cldFraction","text":"<ul> <li>cldFraction::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>cldFraction::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cldFraction::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cldFraction::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>cldFraction::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>cldFraction::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mam4_aero_microphys","title":"mam4_aero_microphys","text":"<ul> <li>mam4_aero_microphys::mam4_do_cond:  <ul> <li>description: Switch to enable aerosol microphysics condensation process  </li> <li>type: logical  </li> </ul> </li> <li>mam4_aero_microphys::mam4_do_newnuc:  <ul> <li>description: Switch to enable aerosol microphysics nucleation process  </li> <li>type: logical  </li> </ul> </li> <li>mam4_aero_microphys::mam4_do_coag:  <ul> <li>description: Switch to enable aerosol microphysics coagulation process  </li> <li>type: logical  </li> </ul> </li> <li>mam4_aero_microphys::mam4_do_rename:  <ul> <li>description: Switch to enable aerosol microphysics rename process  </li> <li>type: logical  </li> </ul> </li> <li>mam4_aero_microphys::mam4_o3_tau:  <ul> <li>description: Linoz tau parameter  </li> <li>type: real  </li> </ul> </li> <li>mam4_aero_microphys::mam4_o3_sfc:  <ul> <li>description: Linoz surface parameter  </li> <li>type: real  </li> </ul> </li> <li>mam4_aero_microphys::mam4_o3_lbl:  <ul> <li>description: Linoz lbl parameter  </li> <li>type: integer  </li> </ul> </li> <li>mam4_aero_microphys::mam4_psc_T:  <ul> <li>description: Linoz psc ozone loss temperature (K) threshold  </li> <li>type: real  </li> </ul> </li> <li>mam4_aero_microphys::mam4_linoz_ymd:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_aero_microphys::mam4_linoz_file_name:  <ul> <li>description: LINOZ chemistry file  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_oxid_ymd:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_aero_microphys::mam4_oxid_file_name:  <ul> <li>description: File containing oxidants data  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_chlorine_loading_ymd:  <ul> <li>description: Cycle year for chlorine  </li> <li>type: integer  </li> </ul> </li> <li>mam4_aero_microphys::mam4_linoz_chlorine_file:  <ul> <li>description: File containing chlorine data  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_rsf_file:  <ul> <li>description: File containing photolysis data  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_xs_long_file:  <ul> <li>description: File containing photolysis data  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::verti_emiss_ymd:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_aero_microphys::mam4_so2_verti_emiss_file_name:  <ul> <li>description: vertical emissions for so2  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_so4_a1_verti_emiss_file_name:  <ul> <li>description: vertical emissions for so4_a1  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_so4_a2_verti_emiss_file_name:  <ul> <li>description: vertical emissions for ao4_a2  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_pom_a4_verti_emiss_file_name:  <ul> <li>description: vertical emissions for pom_a4  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_bc_a4_verti_emiss_file_name:  <ul> <li>description: vertical emissions for bc_a4  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_num_a1_verti_emiss_file_name:  <ul> <li>description: vertical emissions for num_a1  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_num_a2_verti_emiss_file_name:  <ul> <li>description: vertical emissions for num_a2  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_num_a4_verti_emiss_file_name:  <ul> <li>description: vertical emissions for num_a4  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::mam4_soag_verti_emiss_file_name:  <ul> <li>description: vertical emissions for soag  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::aero_microphys_remap_file:  <ul> <li>description: File containing mapping data from the grid of frac land use files to the model grid. Unused if the grid is the same.  </li> <li>type: file  </li> </ul> </li> <li>mam4_aero_microphys::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mam4_aero_microphys::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_aero_microphys::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_aero_microphys::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mam4_aero_microphys::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_aero_microphys::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mam4_optics","title":"mam4_optics","text":"<ul> <li>mam4_optics::mam4_mode1_physical_properties_file:  <ul> <li>description: File containing optical properties for MAM4 mode 1, accumulation mode  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_mode2_physical_properties_file:  <ul> <li>description: File containing optical properties for MAM4 mode 2, Aitken mode  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_mode3_physical_properties_file:  <ul> <li>description: File containing optical properties for MAM4 mode 3, coarse mode  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_mode4_physical_properties_file:  <ul> <li>description: File containing optical properties for MAM4 mode 4, p-carbon mode  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_water_refindex_file:  <ul> <li>description: File containing optical properties for aerosol water  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_soa_physical_properties_file:  <ul> <li>description: File containing optical properties for secondary organic aerosol  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_dust_physical_properties_file:  <ul> <li>description: File containing optical properties for dust  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_nacl_physical_properties_file:  <ul> <li>description: File containing optical properties for sea salt  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_so4_physical_properties_file:  <ul> <li>description: File containing optical properties for sulfate  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_pom_physical_properties_file:  <ul> <li>description: File containing optical properties for primary organic aerosol  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_bc_physical_properties_file:  <ul> <li>description: File containing optical properties for black carbon  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::mam4_mom_physical_properties_file:  <ul> <li>description: File containing optical properties for marine organic aerosol  </li> <li>type: file  </li> </ul> </li> <li>mam4_optics::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mam4_optics::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_optics::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_optics::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mam4_optics::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_optics::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mam4_wetscav","title":"mam4_wetscav","text":"<ul> <li>mam4_wetscav::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mam4_wetscav::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_wetscav::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_wetscav::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mam4_wetscav::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_wetscav::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mam4_srf_online_emiss","title":"mam4_srf_online_emiss","text":"<ul> <li>mam4_srf_online_emiss::srf_emis_specifier_for_DMS:  <ul> <li>description: File containing surface emissions data for DMS  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_emis_specifier_for_SO2:  <ul> <li>description: File containing surface emissions data for SO2  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_emis_specifier_for_bc_a4:  <ul> <li>description: File containing surface emissions data for bc_a4  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_emis_specifier_for_num_a1:  <ul> <li>description: File containing surface emissions data for num_a1  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_emis_specifier_for_num_a2:  <ul> <li>description: File containing surface emissions data for num_a2  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_emis_specifier_for_num_a4:  <ul> <li>description: File containing surface emissions data for num_a4  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_emis_specifier_for_pom_a4:  <ul> <li>description: File containing surface emissions data for pom_a4  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_emis_specifier_for_so4_a1:  <ul> <li>description: File containing surface emissions data for so4_a1  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_emis_specifier_for_so4_a2:  <ul> <li>description: File containing surface emissions data for so4_a2  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::srf_remap_file:  <ul> <li>description: File containing mapping data from the grid of emission files to the model grid. Unused if the grid is the same.  </li> <li>type: file  </li> </ul> </li> <li>mam4_srf_online_emiss::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mam4_srf_online_emiss::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_srf_online_emiss::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_srf_online_emiss::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mam4_srf_online_emiss::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_srf_online_emiss::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mam4_constituent_fluxes","title":"mam4_constituent_fluxes","text":"<ul> <li>mam4_constituent_fluxes::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mam4_constituent_fluxes::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_constituent_fluxes::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mam4_constituent_fluxes::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mam4_constituent_fluxes::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mam4_constituent_fluxes::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#nudging","title":"nudging","text":"<ul> <li>nudging::nudging_filenames_patterns:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>nudging::nudging_fields:  <ul> <li>description: List of fields to be nudged.  Note, syntax of 'A:B' represents nudging field A with data from field B in files, syntax of 'A' assumes that nudging file has the same variables name as EAMxx  </li> <li>type: array(string)  </li> </ul> </li> <li>nudging::nudging_timescale:  <ul> <li>description: Timescale to apply nudging tendencies, 0: full replacement, &gt;0: actual timescale  </li> <li>type: integer  </li> </ul> </li> <li>nudging::use_nudging_weights:  <ul> <li>description: Flag for nudging weights option  </li> <li>type: logical  </li> </ul> </li> <li>nudging::nudging_weights_file:  <ul> <li>description: weights that relax the nudging fields update  </li> <li>type: string  </li> </ul> </li> <li>nudging::skip_vert_interpolation:  <ul> <li>description: Flag for skipping vertical interpolation  </li> <li>type: logical  </li> </ul> </li> <li>nudging::source_pressure_type:  <ul> <li>description: Flag for how source pressure levels are handled in the nudging dataset.     TIME_DEPENDENT_3D_PROFILE: The dataset contains a time-varying pressure profile, variable name 'p_mid' with dimensions (time,ncol,nlev).     STATIC_1D_VERTICAL_PROFILE: The dataset uses a fixed in time single pressure profile, variable name 'p_lev' with dimension (nlev).  </li> <li>type: string  </li> <li>valid values: TIME_DEPENDENT_3D_PROFILE,STATIC_1D_VERTICAL_PROFILE  </li> </ul> </li> <li>nudging::source_pressure_file:  <ul> <li>description: If STATIC_1D_VERTICAL_PROFILE, this is an optional arg to point to a file with the source pressure levels defined.     Default is to look for p_levs in the first nudging_filenames_patterns file  </li> <li>type: string  </li> </ul> </li> <li>nudging::nudging_refine_remap_mapfile:  <ul> <li>description: Refine-remapping mapfile from the source nudging dataset to the physics grid  </li> <li>type: string  </li> </ul> </li> <li>nudging::nudging_refine_remap_vert_cutoff:  <ul> <li>description: A vertical cutoff to go with refine-remap logic (in units of p_mid) where the nudging is turned off above it (closer to the surface)  </li> <li>type: real  </li> </ul> </li> <li>nudging::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>nudging::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>nudging::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>nudging::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>nudging::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>nudging::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mlcorrection","title":"mlcorrection","text":"<ul> <li>mlcorrection::ML_model_path_tq:  <ul> <li>description: Path to pre-trained ML model for temperature and specific humidity  </li> <li>type: string  </li> </ul> </li> <li>mlcorrection::ML_model_path_uv:  <ul> <li>description: Path to pre-trained ML model for wind fields  </li> <li>type: string  </li> </ul> </li> <li>mlcorrection::ML_model_path_sfc_fluxes:  <ul> <li>description: Path to pre-trained ML model for surface fluxes  </li> <li>type: string  </li> </ul> </li> <li>mlcorrection::ML_output_fields:  <ul> <li>description: ML correction output variables, the following variables are supported: T_mid,qv,u,v  </li> <li>type: array(string)  </li> </ul> </li> <li>mlcorrection::ML_correction_unit_test:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mlcorrection::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mlcorrection::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mlcorrection::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mlcorrection::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mlcorrection::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mlcorrection::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#testonly","title":"testOnly","text":"<ul> <li>testOnly::my_param:  <ul> <li>description: MISSING </li> <li>type: array(integer)  </li> </ul> </li> <li>testOnly::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>testOnly::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>testOnly::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>testOnly::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>testOnly::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>testOnly::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#spa","title":"spa","text":"<ul> <li>spa::spa_remap_file:  <ul> <li>description: File containing mapping data from the grid of spa_data_file to the model grid. Unused if the grid is the same.  </li> <li>type: file  </li> </ul> </li> <li>spa::spa_data_file:  <ul> <li>description: File containing aerosol data. Must be on same grid as the atm, or a coarser one  </li> <li>type: file  </li> </ul> </li> <li>spa::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>spa::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>spa::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>spa::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>spa::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>spa::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#rrtmgp","title":"rrtmgp","text":"<ul> <li>rrtmgp::rrtmgp_coefficients_file_sw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_coefficients_file_lw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_cloud_optics_file_sw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_cloud_optics_file_lw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::column_chunk_size:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::active_gases:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>rrtmgp::ch4vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::co2vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::n2ovmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::f11vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::f12vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::n2vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::covmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_year:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_eccentricity:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>rrtmgp::orbital_obliquity:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>rrtmgp::orbital_mvelp:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>rrtmgp::rad_frequency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::do_aerosol_rad:  <ul> <li>description: Flag to turn on/off considering aerosols in radiation calculations  </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::extra_clnclrsky_diag:  <ul> <li>description: Flag to turn on/off an extra clean-clear-sky (with neither clouds nor aerosols) radiation call  </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::extra_clnsky_diag:  <ul> <li>description: Flag to turn on/off an extra clean-sky (with no aerosols) radiation call  </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::do_subcol_sampling:  <ul> <li>description: Flag to turn on/off subcolumn sampling of optical properties; if false treat cells as either completely clear or cloudy  </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>rrtmgp::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>rrtmgp::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>rrtmgp::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#mac_aero_mic","title":"mac_aero_mic","text":"<ul> <li>mac_aero_mic::atm_procs_list:  <ul> <li>description: List of atm processes in this atm process group  </li> <li>type: array(string)  </li> </ul> </li> <li>mac_aero_mic::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> </ul> </li> <li>mac_aero_mic::Type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>mac_aero_mic::schedule_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: Sequential  </li> </ul> </li> <li>mac_aero_mic::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mac_aero_mic::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mac_aero_mic::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mac_aero_mic::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mac_aero_mic::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#cosp","title":"cosp","text":"<ul> <li>cosp::cosp_subcolumns:  <ul> <li>description: Number of subcolumns to use for COSP simulators; cosp_subcolumns=1 implies no subcolumn sampling  </li> <li>type: MISSING </li> </ul> </li> <li>cosp::cosp_frequency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>cosp::cosp_frequency_units:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: steps,hours  </li> </ul> </li> <li>cosp::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>cosp::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cosp::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cosp::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>cosp::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>cosp::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#tms","title":"tms","text":"<ul> <li>tms::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>tms::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>tms::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>tms::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>tms::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>tms::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#physics","title":"physics","text":"<ul> <li>physics::atm_procs_list:  <ul> <li>description: List of atm processes in this atm process group  </li> <li>type: array(string)  </li> </ul> </li> <li>physics::Type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>physics::schedule_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: Sequential  </li> </ul> </li> <li>physics::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>physics::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>physics::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>physics::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>physics::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>physics::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#initial-conditions-parameters","title":"Initial Conditions Parameters","text":"<ul> <li>initial_conditions::Filename:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>initial_conditions::topography_filename:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>initial_conditions::phis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_evap:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::precip_liq_surf_mass:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::precip_ice_surf_mass:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::cldfrac_liq:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sgs_buoy_flux:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::eddy_diff_mom:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::T_prev_micro_step:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qv_prev_micro_step:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qm:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::bm:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::ni_activated:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nc_nuceat_tend:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::tke:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dir_vis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dir_nir:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dif_vis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dif_nir:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_sens_flux:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_lw_flux_up:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_mom_flux:  <ul> <li>description: MISSING </li> <li>type: array(real)  </li> </ul> </li> <li>initial_conditions::dgnum:  <ul> <li>description: Dry aerosol particles diameters (one per mode) [m]  </li> <li>type: array(real)  </li> </ul> </li> <li>initial_conditions::dgnumwet:  <ul> <li>description: Wet aerosol particles diameter [m]  </li> <li>type: array(real)  </li> </ul> </li> <li>initial_conditions::wetdens:  <ul> <li>description: Wet density of interstitial aerosol [kg/m3]  </li> <li>type: array(real)  </li> </ul> </li> <li>initial_conditions::bc_c1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::bc_c3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::bc_c4:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::dst_c1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::dst_c3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::so4_c1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::so4_c2:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::so4_c3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::pom_c1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::pom_c3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::pom_c4:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::soa_c1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::soa_c2:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::soa_c3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::nacl_c1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::nacl_c2:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::nacl_c3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::mom_c1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::mom_c2:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::mom_c3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::mom_c4:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::num_c1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::num_c2:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::num_c3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::num_c4:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::wetdep_hydrophilic_bc:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::drydep_hydrophilic_bc:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::wetdep_hydrophilic_oc:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::drydep_hydrophilic_oc:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::wetdep_dust_bin1:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::wetdep_dust_bin2:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::wetdep_dust_bin3:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::wetdep_dust_bin4:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::qc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qi:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::ni:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::o3_volume_mix_ratio:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::perturbed_fields:  <ul> <li>description: IC fields (with level dimension) to apply a random perturbation to based on the parameters below.  </li> <li>type: array(string)  </li> </ul> </li> <li>initial_conditions::generate_perturbation_random_seed:  <ul> <li>description: Whether or not to generate a random seed for perturbation.  </li> <li>type: logical  </li> </ul> </li> <li>initial_conditions::perturbation_random_seed:  <ul> <li>description: Random seed used for perturbation. Will be overridded by generate_perturbation_random_seed=true.  </li> <li>type: integer  </li> </ul> </li> <li>initial_conditions::perturbation_limit:  <ul> <li>description: Defines a range [1-x, 1+x] which perturbation will be taken from.  </li> <li>type: real  </li> </ul> </li> <li>initial_conditions::perturbation_minimum_pressure:  <ul> <li>description: Minimum pressure (relative to a reference level pressure profile) for which perturbation will be applied.  </li> <li>type: real  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#atmosphere-driver-parameters","title":"Atmosphere Driver Parameters","text":"<ul> <li>driver_options::atmosphere_dag_verbosity_level:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::atm_log_level:  <ul> <li>description: Verbosity level for the atm logger  </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn,error  </li> </ul> </li> <li>driver_options::atm_flush_level:  <ul> <li>description: Verbosity level that triggers automatic flush of the atm logger  </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn,error  </li> </ul> </li> <li>driver_options::output_to_screen:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>driver_options::mass_column_conservation_error_tolerance:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::energy_column_conservation_error_tolerance:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::column_conservation_checks_fail_handling_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::check_all_computed_fields_for_nans:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>driver_options::property_check_data_fields:  <ul> <li>description: list of additional data fields to output in property checks (only for physics grid)  </li> <li>type: array(string)  </li> </ul> </li> <li>driver_options::enable_iop:  <ul> <li>description: Enable intensive observation period. Currently the only use case is DP-EAMxx  </li> <li>type: logical  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#scorpio-parameters","title":"Scorpio Parameters","text":"<ul> <li>Scorpio::output_yaml_files:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>Scorpio::model_restart::iotype:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> </ul>"},{"location":"EAMxx/common/eamxx_params/#homme-namelist","title":"Homme namelist","text":"<ul> <li>ctl_nl::cubed_sphere_map:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::disable_diagnostics:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::dt_remap_factor:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>constraints: ge 1  </li> </ul> </li> <li>ctl_nl::dt_tracer_factor:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>constraints: ge 1  </li> </ul> </li> <li>ctl_nl::hv_ref_profiles:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_order:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_scaling:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle_tom:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle_q:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::nu:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::nu_top:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::pgrad_correction:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ftype:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: 0,2  </li> </ul> </li> <li>ctl_nl::se_geometry:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_limiter_option:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne_x:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne_y:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_lx:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ly:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_nsplit:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_partmethod:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_topology:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_tstep:  <ul> <li>description: MISSING </li> <li>type: real  </li> </ul> </li> <li>ctl_nl::statefreq:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::theta_advect_form:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::theta_hydrostatic_mode:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::tstep_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::vert_remap_q_alg:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::transport_alg:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::vtheta_thresh:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>ctl_nl::mesh_file:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> </ul>"},{"location":"EAMxx/common/installation/","title":"Installation","text":"<p>Follow these simple instructions to build and test EAMxx's standalone configuration for yourself. This document makes use of the following paths:</p> <ul> <li><code>${RUN_ROOT_DIR}</code>: the root directory where EAMxx is built and run</li> <li><code>${EAMXX_SRC_DIR}</code>: the directory into which you've cloned the <code>scream</code> repo</li> </ul> <p>EAMxx's configuration and build system is based on CMake. CMake has been around a while and has gained a lot of traction in recent years, especially in the HPC community. It has good reference documentation, but it can be tricky to use if you've never encountered it. Ask a EAMxx team member for help if you're stuck on something CMake-related.</p> <p>If you see a <code>CMakeLists.txt</code> files or a file with a <code>.cmake</code> suffix, that's just part of the build system. You might also see files with <code>CTest</code> as part of their name. These files are related to CTest, CMake's testing tool.</p>"},{"location":"EAMxx/common/installation/#prerequisites","title":"Prerequisites","text":"<p>First, make sure you're on one of the machines supported by EAMxx, or that you have the following software installed:</p> <ul> <li>A working MPI installation (typically MPICH or Open-MPI)</li> <li>CMake and GNU Make</li> <li>A working set of C, C++, and Fortran compilers</li> <li>A recent version of Git</li> <li>A working installation of NetCDF,   including both C and   Fortran libraries.</li> </ul>"},{"location":"EAMxx/common/installation/#setting-up-your-environment","title":"Setting Up Your Environment","text":""},{"location":"EAMxx/common/installation/#configuring-and-building-scream","title":"Configuring and Building Scream","text":""},{"location":"EAMxx/common/installation/#1-start-from-a-trustworthy-commit","title":"1. Start From a Trustworthy Commit","text":"<p>First, make sure you've cloned the EAMxx repo (including all submodules) to <code>EAMXX_SRC_DIR</code> using the following command:</p> <pre><code>git clone --recurse-submodules https://github.com/E3SM-Project/scream\n</code></pre> <p>If you have already cloned the project and forgot to type <code>--recurse-submodules</code>, you can change to <code>$EAMXX_SRC_DIR</code> and using the following command to initialize, fetch and checkout all submodules:</p> <pre><code>git submodule update --init --recursive\n</code></pre> <p>If you're running a branch that's not <code>master</code>, check out this branch with</p> <pre><code>git checkout &lt;branch&gt;\n</code></pre>"},{"location":"EAMxx/common/installation/#2-configure-your-eamxx-build","title":"2. Configure Your EAMxx Build","text":"<p>Change to your <code>$RUN_ROOT_DIR</code> directory and use CMake to configure your build.</p> <p>If you're building SCREAM on one of our supported platforms, you can tell CMake to use the appropriate machine file using the <code>-C</code> flag. Machine files are located in <code>$EAMXX_SRC_DIR/components/eamxx/cmake/machine-files</code>. Take a look and see whether your favorite machine has one.</p> <p>For example, to configure SCREAM on the Quartz machine at LLNL:</p> <pre><code>cd $RUN_ROOT_DIR\ncmake \\\n    -DCMAKE_CXX_COMPILER=$(which mpicxx) \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -C ${EAMXX_SRC_DIR}/components/eamxx/cmake/machine-files/quartz.cmake \\\n    ${EAMXX_SRC_DIR}/components/eamxx\n</code></pre> <p>If you're building on a machine that doesn't have a ready-made machine file, you can try configuring your build by manually passing options to CMake. This usually looks something like the following, which configures EAMxx to compile CPU code using Kokkos's OpenMP backend: <pre><code>cd $RUN_ROOT_DIR\ncmake \\\n    -D CMAKE_BUILD_TYPE=Debug \\\n    -D CMAKE_C_COMPILER=mpicc \\\n    -D CMAKE_CXX_COMPILER=mpicxx \\\n    -D CMAKE_Fortran_COMPILER=mpif90 \\\n    -D MPIEXEC_EXECUTABLE=`which mpiexec` \\\n    -D EKAT_MPI_NP_FLAG:STRING=-n \\\n    -D SCREAM_DYNAMICS_DYCORE=HOMME \\\n    -D SCREAM_DOUBLE_PRECISION:BOOL=ON \\\n    -D SCREAM_INPUT_ROOT:PATH=/path/to/scream-input \\\n    -D Kokkos_ENABLE_DEBUG=TRUE \\\n    -D Kokkos_ENABLE_AGGRESSIVE_VECTORIZATION=OFF \\\n    -D Kokkos_ENABLE_SERIAL=ON \\\n    -D Kokkos_ENABLE_OPENMP=ON \\\n    -D Kokkos_ENABLE_LIBDL=OFF \\\n    -D Kokkos_ENABLE_PROFILING=OFF \\\n    -D Kokkos_ENABLE_DEPRECATED_CODE=OFF \\\n    -D KOKKOS_ENABLE_ETI:BOOL=OFF \\\n    -D NetCDF_C_PATHS=/path/to/netcdf-c-dir \\\n    -D NetCDF_Fortran_PATHS=/path/to/netcdf-f90-dir \\\n    -D PnetCDF_C_PATHS=/path/to/pnetcdf-dir \\\n    -D PnetCDF_Fortran_PATHS=/path/to/pnetcdf-f90-dir \\\n    ${EAMXX_SRC_DIR}/components/eamxx\n</code></pre></p> <p>In either case, EAMxx requires MPI-aware compilers. Let's examine these options (only some of which are required on any given machine) to make sure we know what they do:</p> <ul> <li><code>CMAKE_BUILD_TYPE</code>: specifies whether you are building EAMxx in a   developer-friendly configuration (<code>Debug</code>), for a production run (<code>Release</code>)   or for performance profiling or some other specialized purpose. Typically,   you'll set this option to <code>Debug</code> or <code>Release</code>.</li> <li><code>CMAKE_{C,CXX,Fortran}_COMPILER</code>: the name of the command used to invoke an   MPI-enabled C, C++, or Fortran compiler to build EAMxx</li> <li><code>MPIEXEC_EXECUTABLE</code>: the name of the command used to run EAMxx using MPI,   typically <code>mpiexec</code> or <code>mpirun</code>, but possibly different depending on your   desired machine</li> <li><code>EKAT_MPI_NP_FLAG</code>: the flag passed to <code>MPIEXEC_EXECUTABLE</code> that you use to   specify the number of desired MPI processes. This is typically <code>-n</code> for   <code>mpiexec</code> and <code>-np</code> for <code>mpirun</code>.</li> <li><code>SCREAM_DYNAMICS_DYCORE</code>: specifies the dycore used for configuring EAMxx,   which is <code>NONE</code> if you are not configuring EAMxx to run its dycore-related   tests, or <code>HOMME</code> if you want to use HOMMExx</li> <li><code>SCREAM_DOUBLE_PRECISION</code>: indicates whether EAMxx's <code>Real</code> type is a   double-precision (<code>ON</code>) or single-precision (<code>OFF</code>) floating point type</li> <li><code>SCREAM_INPUT_ROOT</code>: specifies the location of the top-level folder that   stores input data files for EAMxx. This folder is populated with input files   which are downloaded automatically during EAMxx's build process.</li> <li>The Kokkos-related build options (most of which begin with <code>Kokkos_</code>) are   described in the Kokkos Wiki</li> <li><code>NetCDF_C_PATHS</code>: specifies one or more folders in which the NetCDF C library   and headers are installed. In the simplest configuration, the headers should   be located in <code>${NetCDF_C_PATHS}/include</code> and the library should live in   <code>${NetCDF_C_PATHS}/lib</code>.</li> <li><code>NetCDF_Fortran_PATHS</code>: specifies one or more folders in which the NetCDF   Fortran library and modules are installed. Analogous to <code>${NetCDF_C_PATHS}</code>,   <code>.mod</code> files should be in <code>${NetCDF_Fortran_PATHS}/include</code>, and the library   should be installed in <code>${NetCDF_Fortran_PATHS}/lib</code>.</li> <li><code>PnetCDF_C_PATHS</code>: specifies one or more folders in which the pNetCDF C   library and headers are installed, analogous to <code>NetCDF_C_PATHS</code>.</li> <li><code>PnetCDF_Fortran_PATHS</code>: specifies one or more folders in which the pNetCDF   Fortran library and modules are installed, analogous to   <code>NetCDF_Fortran_PATHS</code>.</li> </ul> <p>Above, we've configured <code>Debug</code> builds to make it easier to find and fix errors. For performance testing, you should configure a <code>Release</code> build and make use of other options, depending on your architecture.</p>"},{"location":"EAMxx/common/installation/#3-build-scream","title":"3. Build SCREAM","text":"<p>Now you can build SCREAM from that same directory:</p> <pre><code>make -j\n</code></pre> <p>The <code>-j</code> flag tells Make to use threads to compile in parallel. If you like, you can set the number of threads by passing it as an argument to <code>-j</code> (e.g. <code>make -j8</code>).</p>"},{"location":"EAMxx/common/installation/#running-tests","title":"Running Tests","text":"<p>You can run EAMxx's tests to make sure your build works by following the instructions here.</p>"},{"location":"EAMxx/developer/","title":"EAMxx Developer Guide","text":""},{"location":"EAMxx/developer/#installation","title":"Installation","text":""},{"location":"EAMxx/developer/#style-guide","title":"Style Guide","text":""},{"location":"EAMxx/developer/#kokkos-and-ekat","title":"Kokkos and EKAT","text":""},{"location":"EAMxx/developer/#source-tree","title":"Source Tree","text":""},{"location":"EAMxx/developer/#important-data-structures","title":"Important Data Structures","text":"<ul> <li>Fields</li> <li>Grids and Remappers</li> <li>Atmosphere Processes</li> <li>Managers</li> </ul>"},{"location":"EAMxx/developer/#io","title":"I/O","text":""},{"location":"EAMxx/developer/#testing","title":"Testing","text":"<ul> <li>Standalone</li> <li>Full Model</li> <li>CI and Nightly Testing </li> </ul>"},{"location":"EAMxx/developer/ci_nightly/","title":"Continuous Integration and Nightly Testing","text":""},{"location":"EAMxx/developer/ci_nightly/#autotester","title":"Autotester","text":"<p>EAMxx using github actions and a Sandia product called Autotester 2 to run CI testing on a CPU and GPU machine for every github pull request. By default, we run the e3sm_scream_v1_at suite and the standalone eamxx tests (test-all-scream).</p>"},{"location":"EAMxx/developer/ci_nightly/#nightly-overview-cdash","title":"Nightly overview, CDash","text":"<p>Our nightly testing is much more extensive than the CI testing. You can see our dashboard here under the section \"E3SM_SCREAM\": https://my.cdash.org/index.php?project=E3SM</p> <p>We run a variety of CIME test suites and standalone testing on a number of platforms. We even do some performance testing on frontier.</p>"},{"location":"EAMxx/developer/cime_testing/","title":"Full Model Testing","text":"<p>Full model system testing of eamxx is done through CIME test cases (much like the rest of E3SM).</p> <p>We offer a number of test suites, including:</p> <ul> <li>e3sm_scream_v0: Test the full set of V0 (pre-C++) tests</li> <li>e3sm_scream_v1: Test the full set of V1 (C++) tests</li> <li>e3sm_scream_v1_at: A smaller and quicker set of tests for autotesting</li> <li>e3sm_scream_hires: A small number of bigger, longer-running tests to measure performance</li> </ul> <p>Example for running a suite:</p> <pre><code>cd $repo/cime/scripts\n./create_test e3sm_scream_v1_at --wait\n</code></pre> <p>Example for running a single test case:</p> <pre><code>cd $repo/cime/scripts\n./create_test SMS.ne4_ne4.F2010-SCREAMv1 --wait\n</code></pre> <p>There are many behavioral tweaks you can make to a test case, like changing the run length, test type, etc. Most of this is not specific to eamxx and works for any CIME case. This generic stuff is well-documentated here: http://esmci.github.io/cime/versions/master/html/users_guide/testing.html</p> <p>When it comes to things specific to eamxx, you have grids, compsets, and testmods.</p> <p>Common EAMxx grids are:</p> <ul> <li>ne4_ne4 (low resolution)</li> <li>ne4pg2_ne4pg2 (low resolution with phys grid)</li> <li>ne30_ne30 (med resolution)</li> <li>ne30pg2_ne30pg2 (med resolution with phys grid)</li> <li>ne1024pg2_ne1024pg2 (ultra high with phys grid)</li> </ul> <p>More grid info can be found here: https://acme-climate.atlassian.net/wiki/spaces/DOC/pages/933986549/ATM+Grid+Resolution+Summary</p> <p>Common EAMxx compsets are:</p> <ul> <li>F2010-SCREAM-LR: V0 low res compset with eamxx V0 atmosphere</li> <li>F2010-SCREAMv1: V1 standard compset with eamxx V1 atmosphere</li> <li>FIOP-SCREAMv1-DP: V1 with dpxx (doubly-periodic lateral boundary condition in C++)</li> <li>F2010-SCREAMv1-noAero: V1 without aerosol forcing</li> </ul> <p>Full info on supported compsets can be found by looking at this file: <code>$scream_repo/components/eamxx/cime_config/config_compsets.xml</code></p> <p>Common EAMxx testmods are:</p> <ul> <li>small_kernels: Enable smaller-granularity kernels,   can improve performance on some systems</li> <li>scream-output-preset-[1-6]: Our 6 output presets.   These turn some combination of our three output streams   (phys_dyn, phys, and diags),   various remaps, etc.</li> <li>bfbhash: Turns on bit-for-bit hash output: https://acme-climate.atlassian.net/wiki/spaces/NGDNA/pages/3831923056/EAMxx+BFB+hashing</li> </ul> <p>More info on running EAMxx can be found here: https://acme-climate.atlassian.net/wiki/spaces/DOC/pages/3386015745/How+To+Run+EAMxx+SCREAMv1</p>"},{"location":"EAMxx/developer/field/","title":"Field","text":"<p>In EAMxx, a <code>Field</code> is a data structure holding two things: pointers to the data and pointers to metadata. Both the data and metadata are stored in <code>std::shared_ptr</code> instances, to ensure consistency across all copies of the field. This allows for fast shallow copy semantic for this class.</p> <p>The data is stored on both CPU and device memory (these may be the same, depending on the Kokkos backend). In EAMxx, we always assume and guarantee that the device data is up to date. That implies that the data must be explicitly synced to host before using it on host, and explicitly synced to device after host manipulation, in order to ensure correctness. In order to access the data, users must use the <code>get_view</code>/ <code>get_strided_view</code> methods, which takes two template arguments: the data type, and an enum specifying whether CPU or device data is needed. The data type is used to reinterpret the generic pointer stored inside to a view of the correct scalar type and layout. It is a possibly const-qualified type, and if the field was marked as \"read-only\", the method ensures that the provided data type is const. A read-only field can be created via the <code>getConst</code> method, which returns a shallow copy of the field, but marked as read-only. The enum specifying host or device data is optional, with device being the default.</p> <p>The metadata is a collection of information on the field, such as name, layout, units, allocation size, and more. Part of the metadata is immutable after creation (e.g., name, units, or layout), while some metadata can be partially or completely modified. The metadata is contained in the <code>FieldHeader</code> data structure, which contains four parts:</p> <ul> <li><code>FieldIdentifier</code>: stores the field's name, layout, units, data type,   and name of the grid where it's defined. These information are condensed   in a single string, that can be used to uniquely identify a field, allowing   to distinguish between different version of the same field.   The layout is stored in the <code>FieldLayout</code> data structure, which includes:</li> <li>the field tags: stored as a <code>std::vector&lt;FieldTag&gt;</code>, they give context to the     field's extents.</li> <li>the field dims: stored both as a <code>std::vector&lt;int&gt;</code>, as well as a 1d <code>Kokkos::View</code>.</li> <li><code>FieldTracking</code>: stores information on the usage of the field, as well as its   possible connections to other fields. In particular, the tracked items are:</li> <li>the field time stamp: the time stamp when the field was last updated.</li> <li>the field accumulation start time: used for fields that are accumulated over     several time steps (or time step subcycles). For instance, it allows to     reconstruct fluxes from raw accumulations.</li> <li>the providers/customers: lists of atmosphere processes (see below) that     respectively require/compute the field in their calculations.</li> <li>the field groups: a list of field groups that this field belongs too. Field groups     are used to access a group of fields without explicit prior knowledge about the     number and/or names of the fields.</li> <li><code>FieldAllocProp</code>: stores information about the allocation. While the field is not   yet allocated, users can request special allocations for the field, for instance   to accommodate packing (for SIMD), which may require padding. Upon allocation,   this information is then used by the Field structure to extract the actual data,   wrapped in a properly shaped <code>Kokkos::View</code>. The alloc props are also   responsible of tracking additional information in case the field is a \"slice\" of   a higher-dimensional one, a fact that can affect how the data is accessed.</li> <li>Extra data: stored as a <code>std::map&lt;std::string,ekat::any&gt;</code>, allows to catch any   metadata that does not fit in the above structures. This is a last resort structure,   intended to accommodate the most peculiar corner cases, and should be used sparingly.</li> </ul>"},{"location":"EAMxx/developer/grid/","title":"Grids and Remappers","text":"<p>In EAMxx, the <code>AbstractGrid</code> is an interface used to access information regarding the horizontal and vertical discretization. The most important information that the grid stores is:</p> <ul> <li>the number of local/global DOFs: these are the degrees of freedom of the   horizontal grid only. Here, local/global refers to the MPI partitioning.</li> <li>the DOFs global IDs (GIDs): a list of GIDs of the DOFs on the current MPI rank,   stored as a Field</li> <li>the local IDs (LIDs) to index list: this list maps the LID of a DOF (that is,   the position of the DOF in the GID list) to a \"native\" indexing system for that   DOF. For instance, a <code>PointGrid</code> (a class derived from <code>AbstractGrid</code>) is a   simple collection of points, so the \"native\" indexing system coincides with the   LIDs. However, for a <code>SEGrid</code> (a derived class, for spectral element grids),   the \"native\" indexing is a triplet <code>(ielem,igp,jgp)</code>, specifying the element   index, and the two indices of the Gauss point within the element.</li> <li>geometry data: stored as a <code>std::map&lt;std::string,Field&gt;</code>, this represent any   data that is intrinsically linked to the grid (either along the horizontal or   vertical direction), such as lat/lon coordinates, vertical coordinates, area   associated with the DOF.</li> </ul> <p>Grids can also be used to retrieve the layout of a 2d/3d scalar/vector field, which allows certain downstream classes to perform certain operations without assuming anything on the horizontal grid.</p> <p>In general, grid objects are passed around the different parts of EAMxx as const objects (read-only). The internal data can only be modified during construction, which usually is handled by a <code>GridsManager</code> object.</p>"},{"location":"EAMxx/developer/io/","title":"Input-Output","text":"<p>In EAMxx, I/O is handled through the SCORPIO library, currently a submodule of E3SM. The <code>scream_io</code> library within eamxx allows to interface the EAMxx infrastructure classes with the SCORPIO library.</p>"},{"location":"EAMxx/developer/kokkos_ekat/","title":"Kokkos and EKAT","text":""},{"location":"EAMxx/developer/kokkos_ekat/#kokkos","title":"Kokkos","text":"<p>EAMxx uses Kokkos for performance portable abstractions for parallel execution of code and data management to various HPC platforms, including OpenMP, Cuda, HIP, and SYCL. Here we give a brief overview of the important concepts for understanding Kokkos in EAMxx. For a more in depth description, see the Kokkos wiki.</p>"},{"location":"EAMxx/developer/kokkos_ekat/#kokkosdevice","title":"Kokkos::Device","text":"<p><code>Kokkos::Device</code> is a struct which contain the type definitions for two main Kokkos concepts: execution space (<code>Kokkos::Device::execution_space</code>), the place on-node where parallel operations (like for-loops, reductions, etc.) are executed, and the memory space (<code>Kokkos::Device::memory_space</code>), the memory location on-node where data is stored. Given your machine architecture, Kokkos defines a default \"device\" space, given by</p> <pre><code>Kokkos::Device&lt;Kokkos::DefaultExecutionSpace,\n         Kokkos::DefaultExecutionSpace::memory_space&gt;\n</code></pre> <p>where all performance critical code should be executed (e.g., on an NVIDIA machine, this device would be the GPU accelerators) and a default \"host\" space, given by</p> <pre><code>Kokkos::Device&lt;Kokkos::DefaultHostExecutionSpace,\n         Kokkos::DefaultHostExecutionSpace::memory_space&gt;\n</code></pre> <p>where data can be accessed by the CPU cores and is necessary for I/O interfacing, for example. Currently, these default spaces are the ones used by EAMxx. On CPU-only machines, host and device represent the same space.</p>"},{"location":"EAMxx/developer/kokkos_ekat/#kokkos-views","title":"Kokkos Views","text":"<p>The main data struct provided by Kokkos used in EAMxx in the <code>Kokkos::View</code>. This is a multi-dimensional data array that can live on either device or host memory space. These Views are necessary when running on GPU architectures as data structures like <code>std::vector</code> and <code>std::array</code> will be unavailable on device.</p> <p>Views are constructed in EAMxx most commonly with the following template and input arguments</p> <pre><code>Kokkos::View&lt;DataType, LayoutType, DeviceType&gt;(const std::string&amp; label,\n                         int dim0, int dim1, ...)\n</code></pre> <p>where</p> <ul> <li><code>DataType</code>: scalar type of the view, given as <code>ScalarType</code>+<code>*</code>(x's number of   run-time dimensions). E.g., a 2D view of doubles will have <code>DataType =   double**</code>. There is also an ability to define compile-time dimensions by   using <code>[]</code>, see   [Kokkos wiki section on views]   (&lt;https://kokkos.org/kokkos-core-wiki/API/core/view/view.html).</li> <li><code>LayoutType</code>: mapping of indices into the underlying 1D memory storage. Types   are:</li> <li><code>LayoutRight</code> (used in EAMxx): strides increase from the right most to the   left most dimension, right-most dimension is contiguous</li> <li><code>LayoutLeft</code>: strides increase from the left most to the right most   dimension, left-most dimension is contiguous</li> <li><code>LayoutStride</code>: strides can be arbitrary for each dimension</li> <li><code>DeviceType</code>: provides space where data live, defaults to the default device</li> </ul> <p>The following example defines a view \"temperature\" which has dimensions columns and levels:</p> <pre><code>Kokkos::View&lt;double**, Kokkos::LayoutRight, Kokkos::DefaultDevice&gt; temperature(\n  \"temperature\", ncols, nlevs);\n</code></pre>"},{"location":"EAMxx/developer/kokkos_ekat/#deep-copy","title":"Deep Copy","text":"<p>Kokkos provides <code>Kokkos::deep_copy(dst, src)</code> which copies data between views of the same dimensions, or a scalar values into a view. Common uses</p> <pre><code>Kokkos::deep_copy(view0, view1); // Copy all data from view1 into view0\nKokkos::deep_copy(view0, 5); // Set all values of view0 to 5\n</code></pre> <p>As seen in the next section, we can use <code>deep_copy()</code> to copy data between host and device.</p>"},{"location":"EAMxx/developer/kokkos_ekat/#mirror-views","title":"Mirror Views","text":"<p>We will often need to have memory allocation the resides on device (for computation), and then need that identical data on host (say, for output). Kokkos has a concept of mirror views, where data can be copied from host to device and vice versa.</p> <p>Here is an example using the device view <code>temperature</code> from above</p> <pre><code>// Allocate view on host that exactly mirrors the size of layout of the device\nview\nauto host_temperature = Kokkos::create_mirror_view(temperature);\n\n// Copy all data from device to host\nKokkos::deep_copy(host_temperature, temperature);\n</code></pre> <p>Kokkos also offers an all-in-one option</p> <pre><code>// Note: must hand the host device instance as first argument\nauto host_temperature = Kokkos::create_mirror_view_and_copy(\n  Kokkos::DefaultHostDevice(), temperature);\n</code></pre>"},{"location":"EAMxx/developer/kokkos_ekat/#parallel-execution","title":"Parallel Execution","text":"<p>The most basic parallel execution pattern used by EAMxx is the <code>Kokkos::parallel_for</code> which defines a for-loop with completely independent iterations. The <code>parallel_for</code> takes in an optional label for debugging, an execution policy, which defines a range and location (host or device) for the code to be run, and a lambda describing the body of code to be executed. The following are execution policies used in EAMxx</p> <ul> <li><code>int count</code>: 1D iteration range <code>[0, count)</code></li> <li><code>RangePolicy&lt;ExecSpace&gt;(int beg, int end)</code>: 1D iteration range for indices   <code>[beg, end)</code></li> <li><code>MDRangePolicy&lt;ExecSpace, Kokkos::Rank&lt;N&gt;&gt;(int[N] beg, int[N] end)</code>: multi-   dimensional iteration range <code>[beg, end)</code></li> <li><code>TeamPolicy&lt;ExecSpace&gt;(int league_size, int team_size, int vector_size)</code>: 1D   iteration over <code>league_size</code>, assigned to thread teams of size <code>team_size</code>,   each with <code>vector_size</code> vector lanes. Both <code>team_size</code> and <code>vector_size</code> can   be given <code>Kokkos::AUTO</code> as input for Kokkos to automatically compute.</li> </ul> <p>If no <code>ExecSpace</code> template is given, the default execution space is used.</p> <p>For lambda capture, use <code>KOKKOS_LAMBDA</code> macro which sets capture automatically based on architecture.</p> <p>Example using <code>RangePolicy</code> to initialize a view</p> <pre><code>Kokkos::View&lt;double**, Kokkos::LayoutRight&gt; temperature(\"temperature\", ncols,\n                            nlevs);\nKokkos::parallel_for(\"Init_temp\",\n           Kokkos::RangePolicy(0, ncols*nlevs),\n           KOKKOS_LAMBDA (const int idx) {\n  int icol = idx/nlevs;\n  int ilev = idx%nlevs;\n\n  temperature(icol, ilev) = 0;\n});\n</code></pre> <p>Same example with <code>TeamPolicy</code></p> <pre><code>Kokkos::parallel_for(\"Init_temp\",\n           Kokkos::TeamPolicy(ncols*nlevs, Kokkos::AUTO, Kokkos::AUTO),\n           KOKKOS_LAMBDA (const TeamPolicy::member_type&amp; team) {\n  // league_rank() gives the index for this team\n  int icol = team.league_rank()/nlevs;\n  int ilev = team.league_rank()%nlevs;\n\n  temperature(icol, ilev) = 0;\n});\n</code></pre>"},{"location":"EAMxx/developer/kokkos_ekat/#hierarchical-parallelism","title":"Hierarchical Parallelism","text":"<p>Using <code>TeamPolicy</code>, we can have up to three nested levels of parallelism: team parallelism, thread parallelism, vector parallelism. These nested policies can be called within the lambda body using the following execution policies</p> <ul> <li><code>TeamThreadRange(team, begin, end)</code>: execute over threads of a team</li> <li><code>TeamVectorRange(team, begin, end)</code>: execute over threads and vector lanes of   a team</li> <li><code>ThreadVectorRange(team, begin, end)</code>: execute over vector lanes of a thread</li> </ul> <p>An example of using these policies</p> <pre><code>Kokkos::View&lt;double***&gt; Q(\"tracers\", ncols, ntracers, nlevs);\nKokkos::parallel_for(Kokkos::TeamPolicy(ncols, Kokkos::AUTO),\n           KOKKOS_LAMBDA (TeamPolicy::member_type&amp; team) {\n  int icol = team.league_rank();\n  Kokkos::parallel_for(Kokkos::TeamVectorRange(team, nlevs), [&amp;](int ilev) {\n  temperature(icol, ilev) = 0;\n  });\n\n  Kokkos::parallel_for(Kokkos::TeamThreadRange(team, nlevs), [&amp;](int ilev) {\n  Kokkos::parallel_for(Kokkos::ThreadVectorRange(team, ntracers), [&amp;](int iq) {\n    Q(icol, iq, ilev) = 0;\n  });\n  });\n});\n</code></pre> <p>IMPORTANT! Nested policies cannot be used in arbitrary order. <code>ThreadVectorRange</code> must be used inside a <code>TeamThreadRange</code>, and <code>TeamVectorRange</code> must be the only level of nested parallelism.</p> <pre><code>Kokkos::parallel_for(TeamPolicy(...), ... {\n   // OK\n   Kokkos::parallel_for(TeamThreadRange, ... {\n\n   });\n\n   // OK\n   Kokkos::parallel_for(TeamThreadRange, ... {\n   Kokkos::parallel_for(ThreadVectorRange, ... {\n\n   });\n   });\n\n   // OK\n   Kokkos::parallel_for(TeamVectorRange, ...{\n\n   });\n\n   // WRONG,ThreadVectorRange must be nested in TeamThreadRange\n   Kokkos::parallel_for(ThreadVectorRange, ...{\n\n   });\n\n   // WRONG, a TeamVectorRange must be the only nested level\n   Kokkos::parallel_for(TeamVectorRange, ...{\n   Kokkos::parallel_for(ThreadVectorRange, ... {\n\n   });\n   });\n});\n</code></pre> <p>Using these incorrectly can be very tricky to debug as the code almost certainly will not error out, but race conditions will exist among threads.</p>"},{"location":"EAMxx/developer/kokkos_ekat/#ekat","title":"EKAT","text":""},{"location":"EAMxx/developer/kokkos_ekat/#kokkostypes","title":"KokkosTypes","text":""},{"location":"EAMxx/developer/kokkos_ekat/#exespaceutils","title":"ExeSpaceUtils","text":""},{"location":"EAMxx/developer/kokkos_ekat/#vectorization-packs","title":"Vectorization: Packs","text":""},{"location":"EAMxx/developer/kokkos_ekat/#scratch-memory-worspacemanager","title":"Scratch Memory: WorspaceManager","text":""},{"location":"EAMxx/developer/kokkos_ekat/#algorithms","title":"Algorithms","text":""},{"location":"EAMxx/developer/managers/","title":"FieldManager and GridsManager","text":""},{"location":"EAMxx/developer/processes/","title":"Atmospheric Processes","text":"<p>In EAMxx, <code>AtmosphereProcess</code> (AP) is an abstract class representing a portion of the atmosphere timestep algorithm. In simple terms, an AP is an object that given certain input fields performs some calculations to compute some output fields. The concrete AP classes allow to create a buffer layer between particular packages (e.g., dynamics dycore, physics parametrizations) and the atmosphere driver (AD), allowing separation of concerns, so that the AD does not need to know details about the package, and the package does not need to know about the EAMxx infrastructure.</p> <p>To enhance this separation of concerns, EAMxx implements two more classes for handling APs:</p> <ul> <li>the concrete class <code>AtmosphereProcessGroup</code> (APG), which allows to group   together a set of AP's, which can be seen from outside as a single process;</li> <li>the <code>AtmosphereProcessFactory</code> class, which allows an APG to create its   internal processes without any knowledge of what they are.</li> </ul> <p>This infrastructure allows the AD to view the whole atmosphere as a single APG, and to be completely agnostic to what processes are run, and in which order. This design allows to have a code base that is cleaner, self-container, and easy to test via a battery of targeted unit tests.</p> <p>In EAMxx, we already have a few concrete AP's, interfacing the AD to the Hommexx non-hydrostatic dycore as well as some physics parametrizations (P3, SHOC, RRMTPG, etc). In the next section we describe the interfaces of an AP class, and we show an example of how to write a new concrete AP class.</p>"},{"location":"EAMxx/developer/processes/#atmosphere-process-interfaces","title":"Atmosphere process interfaces","text":"<p>An AP has several interfaces, which can be grouped into three categories:</p> <ul> <li>initialization: these interfaces are used to create the AP, as well as to   initialize internal data structures;</li> <li>run: these interfaces are used to make the AP compute its output fields from   its input fields;</li> <li>finalization: these interfaces are used to perform any clean up operation   (e.g., release files) before the AP is destroyed.</li> </ul> <p>Among the above, the initialization sequence is the most complex, and consists of several steps:</p> <ul> <li>The AD creates the APG corresponding to the whole atmosphere. As mentioned   above, this phase will make use of a factory, which allows the AD to be   agnostic to what is actually in the group. All AP's can start performing any   initialization work that they can, but at this point they are limited to use   only an MPI communicator as well as a list of runtime parameters (which were   previously read from an input file).</li> <li>The AD passes a <code>GridsManager</code> to the AP's, so that they can get information   about the grids they need. At this point, all AP's have all the information   they need to establish the layout of the input and output fields they need,   and can store a list of these \"requests\"</li> <li>After creating all fields (based on AP's requests), the AD passes a copy of   each input and output field to the AP's. These fields will be divided in   \"required\" and \"computed\", which differ in that the former are only passed   to the AP's as 'read-only' fields (see the field   documentation for more details)</li> <li>The AP's are queried for how much scratch memory they may need at run time.   After all AP's communicate their needs, the AD will provide a pointer to   scratch memory to the AP's. This is memory that can be used to initialize   temporary views/fields or other internal data structures. All AP's are given   the same pointer, which means no data persistence should be expected at run   time between one timestep and the next.</li> <li>The AD calls the 'initialize' method on each AP. At this point, all fields   are set, and AP's can complete any remaining initialization task</li> </ul> <p>While the base AP class provides an (empty) implementation for some methods, in case derived classes do not need a feature, some methods are purely virtual, and concrete classes will have to override them. Looking at existing concrete AP implementations is a good way to have a first idea of what a new AP class needs to implement. Here, we show go over the possible implementation of these methods in a hypothetical AP class. The header file may look something like this</p> <pre><code>#include &lt;share/atm_process/atmosphere_process.hpp&gt;\n\nclass MyProcess : public AtmosphereProcess\n{\npublic:\n  using gm_ptr = std::shared_ptr&lt;const GridsManager&gt;;\n\n  MyProcess(const ekat::Comm&amp; comm, const ekat::ParameterList&amp; pl);\n\n  std::string name () const override { return \"my_fancy_process\"; }\n  void set_grids (const gm_ptr&amp; grids_manager) override;\n  size_t requested_buffer_size_in_bytes () const override;\n  void init_buffers (const ATMBufferManager&amp; buffer_manager) override;\nprotected:\n\n  void initialize_impl (const RunType run_type) override;\n  void run_impl        (const double dt) override;\n  void finalize_impl   () override;\n\n  using view_1d = typename KokkosTypes&lt;DefaultDevice&gt;::view_1d&lt;Real&gt;;\n  using view_2d = typename KokkosTypes&lt;DefaultDevice&gt;::view_2d&lt;Real&gt;;\n\n  view_1d m_temp1;\n  view_2d m_temp2;\n\n  int m_ncols;\n  int m_nlevs;\n  bool m_has_blah;\n};\n</code></pre> <p>A few comments:</p> <ul> <li>we added two views to the class, which are meant to be used to store   intermediate results during calculations at runtime;</li> <li>there are other methods that the class can override (such as additional   operations when the AD sets a field in the AP), but most AP's only need to   override only these;</li> <li>we strongly encourage to add the keyword <code>override</code> when overriding a method;   in case of small typos (e.g., missing a <code>&amp;</code> or a <code>const</code>, the compiler will   be erroring out, since the signature will not match any virtual method in the   base class;</li> <li><code>finalize_impl</code> is often empty; unless the AP is managing external resources,   everything should be correctly released during destruction;</li> <li>the two methods for buffers can be omitted if the AP does not need any   scratch memory (and the default implementation from the base class will be   used).</li> </ul> <p>Here is a possible implementation of the methods, with some inline comments to explain</p> <pre><code>MyProcess::MyProcess (const ekat::Comm&amp; comm, const ekat::ParameterList&amp; pl)\n : AtmosphereProcess(comm,pl)\n{\n  // The base class copies pl into protected member m_params\n  m_has_blah = m_params.get&lt;bool&gt;(\"enable_blah\");\n}\n\nvoid MyProcess::set_grids (const std::shared_ptr&lt;GridsManager&gt;&amp; gm)\n{\n  using namespace ekat::units;\n  const auto nondim = Units::nondimensional();\n\n  auto grid = gm-&gt;get_grid(\"Physics\");\n  m_ncols = grid-&gt;get_num_local_dofs();\n  m_nlevs = grid-&gt;get_num_vertical_levels();\n\n  // In these names, 2d refers to \"horizontal only\", while 3d to \"horiz+vert\".\n  // But the grid stores dofs linearly, so there is only one array dimension\n  FieldLayout scalar2d = grid-&gt;get_2d_scalar_layout();\n  FieldLayout vector3d = grid-&gt;get_3d_vector_layout(true,2);\n\n  // Declare fields needed:\n  //  - Required: 'input' (read-only)\n  //  - Computed: 'output'\n  //  - Updated: 'input'+'output'\n  // Tell the AD we need 'velocity' to accommodate a Pack scalar type\n  add_field&lt;Required&gt;(\"coeff_2d\",scalar2d,nondim,grid-&gt;name);\n  add_field&lt;Updated&gt;(\"velocity\",vector3d,m/s,grid-&gt;name,SCREAM_PACK_SIZE);\n}\n\nsize_t MyProcess::requested_buffer_size_in_bytes ()\n{\n  // We use temp2 only if the blah feature is on\n  return m_ncols + (m_has_blah ? m_ncols*m_nlev : 0);\n}\n\nvoid MyProcess::init_buffers (const ATMBufferManager&amp; buffer_manager)\n{\n  auto mem = reinterpret_cast&lt;Real*&gt;(buffer_manager.get_memory());\n\n  m_temp1 = view_1d&lt;Real&gt;(mem,m_ncols);\n  mem += m_ncols;\n\n  if (m_has_blah) {\n    m_temp2 = view_2d&lt;Real&gt;(mem,m_ncols,m_nlevs);\n    mem += m_ncols*m_nlevs;\n  }\n\n  // Make sure we use exactly the mem we said we would\n  size_t used_mem = (mem - buffer_manager.get_memory())*sizeof(Real);\n  EKAT_REQUIRE_MSG(used_mem==requested_buffer_size_in_bytes(),\n    \"Error! Used memory != requested memory for MyProcess.\"\n    \"  used memory: \" + std::to_string(used_mem) + \"\\n\"\n    \"  requested: \" + std::to_string(requested_buffer_size_in_bytes()) + \"\\n\");\n}\n\nvoid MyProcess::initialize_impl(const RunType run_type)\n{\n  // Can complete any initialization of the background pkg\n  my_process_pkg_init(m_has_blah);\n}\n\nvoid MyProcess:run_impl (const double dt)\n{\n  using Policy = typename KokkosTypes&lt;DefaultDevice&gt;::TeamPolicy\n  using Member = typename KokkosTypes&lt;DefaultDevice&gt;::MemberType\n  using PackT  = ekat::Pack&lt;Real,SCREAM_PACK_SIZE&gt;;\n\n  // Create team policy\n  Policy policy(m_ncols,m_nlevs,1);\n\n  // Create local copies of class members (or else use KOKKOS_CLASS_LAMBDA)\n  auto temp1 = m_temp1;\n  auto temp2 = m_temp2;\n  auto do_blah = m_has_blah;\n\n  // Get views from fields. We \n  auto coeff2d  = get_field_in(\"coeff_2d\").get_view&lt;const Real*&gt;();\n  auto velocity = get_field_out(\"velocity\").get_view&lt;PackT**&gt;();\n\n  // Since we process velocity with a Pack scalar type, find out how many packs\n  // we have in each column\n  auto nlevs_packs = ekat::PackInfo&lt;SCREAM_PACK_SIZE&gt;::num_packs(m_nlevs);\n\n  // Call some function in the background pkg\n  do_some_work (coeff_2d,velocity,temp1,temp2,do_blah);\n\n  // Do some more work here\n  auto work = KOKKOS_LAMBDA (const Member&amp; team) {\n    int icol = team.league_rank();\n    auto col_work = [&amp;](const int ilev) {\n      velocity(icol,ilev) *= coeff_2d;\n    };\n    Kokkos::parallel_for(Kokkos::TeamVectorRange(team,nlevs_packs),col_work);\n  };\n  Kokkos::parallel_for(policy,work);\n  Kokkos::fence();\n}\n\nvoid MyProcess::finalize_impl ()\n{\n  // If the background package needs to cleanup something, do it now\n  my_process_pkg_cleanup();\n}\n</code></pre>"},{"location":"EAMxx/developer/source_tree/","title":"EAMxx's Source Tree","text":"<p>All EAMxx-specific code can be found in <code>components/eamxx</code> within the EAMxx repo. Here's how things are organized:</p> <ul> <li><code>cime_config</code>: Tools and XML files for integrating EAMxx with E3SM via the   CIME framework.</li> <li><code>cmake</code>: CMake functions and macros used by the configuration/build system.</li> <li><code>data</code>: Data files used by our tests.</li> <li><code>docs</code>: Documentation for the EAMxx project, including design documents,   instructions for building and testing EAMxx, and this document.</li> <li><code>scripts</code>: Miscellaneous scripts that implement workflows for running tests   and analyzing performance.</li> <li><code>src</code>: All C++ source code (and any bridges to Fortran) for EAMxx are stored   here. We describe the contents of this directory in greater detail below.</li> <li><code>tests</code>: Implements standalone, end-to-end tests for various EAMxx   components (RRTMG, HOMME, P3, SHOC, etc).</li> </ul> <p>In addition, you'll notice the following files in <code>components/eamxx</code>:</p> <ul> <li><code>CMakeLists.txt</code>: The CMake file that defines EAMxx's configuration/build   system.</li> <li><code>CTestConfig.cmake</code>: This CTest file contains parameters that determine how   our test results are reported to the E3SM CDash Site.</li> <li><code>README.md</code>: EAMxx's top-level README file, which describes the project and   its purpose.</li> <li><code>mkdocs.yml</code>: The configuration file for mkdocs,   the tool we currently use to build and publish our documentation.</li> </ul>"},{"location":"EAMxx/developer/source_tree/#the-src-directory","title":"The <code>src</code> Directory","text":"<p>Herein l\u0456es the source code for EAMxx. Broadly, here's where things are:</p> <ul> <li><code>control</code>: Contains the atmosphere driver and basic tests for it.</li> <li><code>dynamics</code>: Here's where HOMME lives within EAMxx, along with code for   interfacing with it using EAMxx's data structures.</li> <li><code>mct_coupling</code>: Glue code for embedding EAMxx within E3SM as an atmosphere   component using the MCT coupler.</li> <li><code>physics</code>: Source code for physics-related atmospheric processes, including</li> <li><code>p3</code>: The C++/Kokkos implementation of P3 microphysics within EAMxx.</li> <li><code>shoc</code>: The C++/Kokkos implementation of SHOC macrophysics within EAMxx.</li> <li><code>rrtmgp</code>: A stub for the radiation processes as represented in EAMxx.</li> <li><code>share</code>: Utilities and data structures common to these processes.</li> <li><code>share</code>: Utilities used by various components within EAMxx. Of note:</li> <li><code>io</code>: EAMxx's interface to the SCORPIO     library.</li> <li><code>diagnostics</code>: A collection of simple classes used to compute diagnostic   quantities.</li> </ul> <p>Each of these directories contains a <code>CMakeLists.txt</code> file for defining how things are build, and a <code>tests/</code> subdirectory that houses relevant unit and verification tests.</p> <p>You'll also see some other files in the <code>src/</code> directory itself, such as</p> <ul> <li><code>scream_config.h.in</code>: A template for generating a C++ header file with   EAMxx configuration information.</li> </ul>"},{"location":"EAMxx/developer/standalone_testing/","title":"Standalone EAMxx Testing","text":"<p>In this section we describe our testing methodology for standalone EAMxx configurations. We use several types of tests</p> <ul> <li>Unit tests are individual test programs that demonstrate that a small set   of code performs a single function or a set of related functions. We use   a C++ unit testing framework called Catch2   to implement unit tests.</li> <li>Property (verification) tests are test programs that configure code that   demonstrates that a part of EAMxx (for example, an atmospheric physics   parameterization or the dynamical core) is able to produce an answer that   satisfies some physical constraint or matches a known solution under specific   circumstances.</li> <li>Fortran-C++ \"bit-for-bit\" (BFB) tests are test programs, often implemented   as unit tests, that demonstrate that a set of C++ code ported from Fortran   produces bit-for-bit identical results to its Fortran counterpart, provided   certain compiler options are enabled (such as \"strict\" floating-point   arithmetic).</li> <li>Test Suites are named collections of tests that can be run on demand using   the ctest command.</li> </ul> <p>We also support a <code>test-all-scream</code> configuration that runs all of the standalone tests for an EAMxx configuration. Note, your current machine must be known to EAMxx before <code>test-all-scream</code> will work. A machine can be made known to EAMxx by editing the eamxx/scripts/machines_specs.py files. There are some instructions on what to do at the top of this file.</p> <p><code>test-all-scream</code> has a good help dump</p> <pre><code>cd $scream_repo/components/eamxx\n./scripts/test-all-scream -h\n</code></pre> <p>If you are unsure of the cmake configuration for you development cycle, one trick you can use is to run <code>test-all-scream</code> for the <code>dbg</code> test and just copy the cmake command it prints (then ctrl-C the process).</p> <pre><code>cd $scream_repo/components/eamxx\n./scripts/test-all-scream -t dbg -m $machine\n# wait for a few seconds*\n# Ctrl-C *\n# Copy the contents of DCMAKE_COMMAND that was passed to ctest *\n# Add \"cmake\" to beginning of contents and path to eamxx at the end. *\n</code></pre> <p>Considerations for using <code>test-all-scream</code>:</p> <ul> <li>Your machine must be known to our scripts, see above.</li> <li>If you try to run commands by-hand (outside of test-all-scream;   cmake, make, ctest, etc), you'll need to remember to   load the scream-env into your shell, which can be done like this:   <code>cd eamxx/scripts; eval $(./scripts/scream-env-cmd $machine)</code></li> <li>test-all-scream expects to be run from a compute node if you   are on a batch machine.</li> <li>You'll need to think about your baseline situation, as many of our   tests rely on pre-existing baselines. The -b option controls the baseline   location and can have the following values:</li> <li>AUTO: A common public baseline area shared by all developers</li> <li>LOCAL: A private baseline area for the current developer in the current repo</li> <li>$path: A specific arbitrary path</li> <li>None: If there is no -b at all, no baseline testing will be done</li> </ul>"},{"location":"EAMxx/developer/standalone_testing/#running-eamxxs-tests-with-ctest","title":"Running EAMxx's Tests with CTest","text":"<p>Before running the tests, generate a baseline file:</p> <pre><code>cd $RUN_ROOT_DIR\nmake baseline\n</code></pre> <p>The tests will run, automatically using the baseline file, which is located in the CMake-configurable path <code>${SCREAM_BASELINES_DIR}</code>. By default, this path is set to an invalid string. If baselines tests are enabled, we check that a valid path has been provided.</p> <p>To run all of SCREAM's tests, make sure you're in <code>$RUN_ROOT_DIR</code> and type</p> <pre><code>ctest -VV\n</code></pre> <p>This runs everything and reports results in an extra-verbose (<code>-VV</code>) manner.</p> <p>You can also run subsets of the SCREAM tests. For example, to run only the P3 regression tests (again, from the <code>$RUN_ROOT_DIR</code> directory), use</p> <pre><code>ctest -R p3_regression\n</code></pre>"},{"location":"EAMxx/developer/standalone_testing/#grouping-tests-with-labels","title":"Grouping Tests with Labels","text":"<p>We can create groupings of tests by using labels. For example, we have a <code>driver</code> label that runs tests for SCREAM's standalone driver. You can see a list of available labels by typing</p> <pre><code>ctest --print-labels\n</code></pre> <p>To see which tests are associated with a given label (e.g. <code>driver</code>), use</p> <pre><code>ctest -L driver -N\n</code></pre>"},{"location":"EAMxx/developer/standalone_testing/#eamxx-test-suites","title":"EAMxx Test Suites","text":""},{"location":"EAMxx/developer/standalone_testing/#the-p3_regression-suite","title":"The <code>p3_regression</code> Suite","text":"<p><code>p3_regression</code> uses a baseline file to compare any new or altered implementations with our P3 Fortran reference implementation. If you're working on the C++/Kokkos implementation, you can invoke any new tests to the function <code>Baseline::run_and_cmp</code> in <code>${SCREAM_SRC_DIR}/components/eamxx/p3/tests/p3_run_and_cmp.cpp</code>.</p> <p>If the reference Fortran implementation changes enough that a new baseline file is required, make sure to let other SCREAM team members know, in order to minimize disruptions.</p>"},{"location":"EAMxx/developer/style_guide/","title":"SCREAM C++ Style Guide","text":"<p>Here's our style guide. Let the holy wars begin!</p>"},{"location":"EAMxx/developer/style_guide/#types","title":"Types","text":""},{"location":"EAMxx/developer/style_guide/#functions-and-methods","title":"Functions and Methods","text":""},{"location":"EAMxx/developer/style_guide/#variables","title":"Variables","text":""},{"location":"EAMxx/technical/","title":"EAMxx Technical Guide","text":"<p>The goal of this document is to describe the specific equations, parameterizations, and numerical methods used in the current version of EAMxx. Because our master-branch implementation changes every time we make a new commit, this documentation will also evolve continuously. As such, documentation for master should always be considered to be preliminary and under construction. If you want trustworthy documentation, pull it from an official model release.</p>"},{"location":"EAMxx/technical/#overview","title":"Overview","text":"<p>Currently, EAMxx is only configured for km-scale convection-permitting runs. In order to provide scientifically-credible simulations at lower resolution, parameterizations for the following processes would be needed:</p> <ol> <li>deep convection</li> <li>gravity-wave drag</li> <li>energy fixer</li> </ol> <p>The only configuration of EAMxx that is currently implemented is the convection-permitting version, commonly known as the Simple Cloud-Resolving E3SM Atmosphere Model (SCREAM). Processes in EAMxx-SCREAM are:</p> <ol> <li>a non-hydrostatic version of the spectral-element dynamical core used by other E3SM Atmosphere Model versions[@Taylor_et20] with semi-Lagrangian tracer advection as described by Bradley et al. (2022)[@Bradley_et22]</li> <li>turbulent mountain stress is crudely parameterized following Fiedler and Panofsky (1072)[@Fiedler_Panofsky72] to reduce excessive winds around topography</li> <li>the Simple Higher-Order Closure (SHOC) parameterization from Bogenschutz and Krueger (2013)[@Bogenschutz_Krueger13], which handles turbulent diffusion, condensation/evaporation, and liquid cloud fraction</li> <li>an all-or-nothing ice cloud fraction parameterization that sets ice cloud fraction to 100% whenever cloud ice mass q<sub>i</sub> is less than a user-specified threshold set by default to 1e-5 kg/kg. This scheme also sets the total cloud fraction (used by microphysics) to the maximum of the liquid and ice cloud fraction.</li> <li>the effects of aerosol are prescribed via the Simple Prescribed Aerosol (SPA) scheme, which is very similar to MACv2-SP[@Stevens_et17]</li> <li>the P3 microphysics scheme from Morrison and Milbrandt (2015)[@Morrison_Milbrandt15] modified as described by Caldwell et al. (2021)[@Caldwell_et21] to assume instantaneous liquid saturation adjustment for consistency with SHOC</li> <li>RTE/RRTMGP radiation from Pincus et al. (2019)[@Pincus_et19] rewritten in C++ for consistency and performance</li> <li>the CFMIP Observation Simulator Package (COSP) is also integrated into EAMxx, but currently only the ISCCP output is enabled</li> </ol> <p>By default processes are called in this order, but which processes to include and in what order is modifiable at run time. After all atmospheric processes are called, output is written.  Surface components are then called before the next atmosphere step starts. These processes are described in more detail in Caldwell et al. (2021)[@Caldwell_et21].  As in EAM, dynamics operates on a spectral element grid and all other processes use a finite-volume grid that divides each spectral element into 4 quadrilaterals. This physics grid is described in Hannah et al. (2021)[@Hannah_et21].</p>"},{"location":"EAMxx/technical/aerocom_cldtop/","title":"The AeroCom algorithm","text":"<p>The goal of the AeroCom algorithm is to calculate properties at cloud top based on the AeroCom recommendation. There are two main parts of the algorithm: probabilistically determining \"cloud top\" and then \"calculating properties\" at said cloud top.</p> <p>We treat model columns independently, so we loop over all columns in parallel. We then loop over all layers in serial (due to needing an accumulative product), starting at 2 (second highest) layer because the highest is assumed to have no clouds. Let's take a photonic approach from above the model top. Let's say that \\(p_{k}\\) is the probability of a photon passing through the layer \\(k\\). We follow the maximum-random overlap assumption. In all cases, we assume the cloudiness (or cloudy fraction) is completely opaque.</p> <p>We assume the highest layer has no clouds, thus the \\(p_{k} = 1\\) for the highest layer. Note that \\(p_{k}\\) is initialized as 1 for all layers. We also clip the cloudy fraction \\(C_{i,k}\\) to ensure that \\(C_{i,k} \\in [0+\\epsilon, 1-\\epsilon]\\), where \\(\\epsilon = 0.001\\). Starting at the second highest layer, \\(k+1\\), we check if some \"cloudy\" conditions are met. These conditions are now arbitrarily defined by a cloudiness threshold of \\(\\epsilon\\) (i.e., \\(C_{i,k}&gt;\\epsilon\\)) and a non-zero threshold on the total (both liquid and ice) droplet number concentration (i.e., \\(cQ_{i,k} + iQ_{i,k} &gt; 0\\)). If the conditions are met, we estimate the cloud-top cloud fraction using an accumulative product following the maximum-random overlap assumption.</p> \\[c_{i} = 1 - \\prod_{k=2}^{K} p_{k} = 1 - \\prod_{k=2}^{K} \\frac{1 - \\max(C_{i,k}, C_{i,k-1})}{1-C_{i,k-1}}\\] <p>In order to estimate cloud-top properties, we weight by the probability of \"remaining cloudiness\" or \\(p_{k-1} - p_{k}\\).</p> Type Equation cloud property \\(x_{i} = \\sum_{k=2}^{K} X_{i,k} \\Phi_{i,k} (p_{k-1} - p_{k})\\) cloud content \\(x_{i} = \\sum_{k=2}^{K} \\Phi_{i,k} (p_{k-1} - p_{k})\\) other property \\(x_{i} = \\sum_{k=2}^{K} X_{i,k} (p_{k-1} - p_{k})\\) <p>In the above, \\(\\Phi_{i,k}\\) is the thermodynamic phase defined by the cloud droplet number concentration ratios.</p> \\[i\\Phi_{i,k} = \\frac{iQ_{i,k}}{iQ_{i,k} + cQ_{i,k}}\\] \\[c\\Phi_{i,k} = \\frac{cQ_{i,k}}{iQ_{i,k} + cQ_{i,k}}\\] <p>The thermodynamic phase is used only for cloud properties (e.g., cloud-top cloud droplet number concentration) or cloud content (e.g., cloud liquid content). Further, \\(X_{i,k}\\) is the three-dimensional cloud property of interest which is needed if we are converting a property from three-dimensional (\\(X\\)) to its two-dimensional counterpart (\\(x\\)). \"Other\" properties here include temperature and pressure which are not dependent on the thermodynamic phase.</p> <p>Most studies in this topic refer a technical report by Tiedtke et al. (1979)[@tiedtke_ecmwf_1979]. Another more recent general reference that may be of interest is that of R\u00e4is\u00e4nen et al. (2004)[@raisanen2004stochastic].</p>"},{"location":"EAMxx/user/","title":"EAMxx User Guide","text":"<p>This section contains documentation on how to create, setup, and run CIME cases with EAMxx as the atmosphere component. It is assumed that the reader has a familiarity with CIME case control system. In particular, we assume that the user knows how to create a case, and what the <code>case.setup</code>, <code>case.build</code>, and <code>case.submit</code> commands do.</p> <p>This user guide is still under construction. In the meantime, in case you can't find the information you need, you may visit our public confluence EAMxx user guide.</p>"},{"location":"EAMxx/user/#eamxx-case-basics","title":"EAMxx case basics","text":""},{"location":"EAMxx/user/#model-input","title":"Model input","text":""},{"location":"EAMxx/user/#model-output","title":"Model output","text":""},{"location":"EAMxx/user/#nudging","title":"Nudging","text":""},{"location":"EAMxx/user/#extra-radiation-calls","title":"Extra radiation calls","text":""},{"location":"EAMxx/user/#cosp","title":"COSP","text":""},{"location":"EAMxx/user/#regionally-refined-eamxx","title":"Regionally Refined EAMxx","text":""},{"location":"EAMxx/user/#doubly-periodic-eamxx","title":"Doubly Periodic EAMxx","text":""},{"location":"EAMxx/user/#pyscream","title":"PySCREAM","text":""},{"location":"EAMxx/user/clean_clear_sky/","title":"Clean- and clean-clear-sky diagnostics","text":"<p>In order to decompose the aerosol effective radiative forcing, additional diagnostic radiation calls are needed. These extra diagnostics are optionally added to the main radiation call. The extra diagnostics are:</p> <ul> <li>Clean-clear-sky fluxes: the fluxes that would be present if there were neither aerosols nor clouds, and are calculated by adding an additional radiation call at the very beginning of the logic before the optics class is endowed with aerosol and cloud properties.</li> <li>Clean-sky fluxes: the fluxes that would be present if there were no aerosols, and are calculated by adding an additional radiation call after substantiating an additional optics class, but not endowing it with aerosol properties.</li> </ul>"},{"location":"EAMxx/user/clean_clear_sky/#example-setup-current-as-of-april-2024","title":"Example setup (current as of April 2024)","text":"<p>The extra calls are controlled by runtime flags <code>extra_clnclrsky_diag</code> and <code>extra_clnsky_diag</code> (they take either <code>true</code> or <code>false</code> as their values).</p> <pre><code>    ./atmchange extra_clnclrsky_diag=true\n    ./atmchange extra_clnsky_diag=true\n</code></pre> <p>Below is an example output file to output the extra (clean and clean-clear-sky) radiation diagnostics atop the atmosphere.</p> <pre><code>%YAML 1.1\n---\nfilename_prefix: monthly.outputs\nAveraging Type: Average\nMax Snapshots Per File: 1\nFields:\n  Physics PG2:\n    Field Names:\n    - SW_clnclrsky_flux_up_at_model_top\n    - LW_clnclrsky_flux_up_at_model_top\n    - SW_clnsky_flux_up_at_model_top\n    - LW_clnsky_flux_up_at_model_top\noutput_control:\n  Frequency: 1\n  frequency_units: nmonths\n  MPI Ranks in Filename: false\n</code></pre>"},{"location":"EAMxx/user/cosp/","title":"CFMIP Observation Simulator Package (COSP) in EAMxx","text":"<p>COSP is partially implemented and supported in EAMxx. Currently, minimal outputs from the ISCCP, MODIS, and MISR simulators have been enabled.</p>"},{"location":"EAMxx/user/cosp/#running-with-cosp","title":"Running with COSP","text":"<p>Turning COSP on simply requires adding the <code>cosp</code> process to <code>atm_procs_list</code> via <code>atmchange</code> in a case directory: <pre><code>./atmchange physics::atm_procs_list=\"mac_aero_mic,rrtmgp,cosp\"\n</code></pre> Additionally, the frequency at which COSP is run can be configured via <code>atmchange</code>: <pre><code>./atmchange physics::cosp::cosp_frequency_units=\"steps\"\n./atmchange physics::cosp::cosp_frequency=1\n</code></pre></p> <p>COSP can be run with or without subcolumn sampling. This is configured by changing the <code>cosp_subcolumns</code> namelist variable via <code>atmchange</code>. A value of 1 implies no subcolumn sampling, while values greater than 1 specify the number of subcolumns to use for subcolumn sampling (assuming maximum-random overlap). E.g., <pre><code>./atmchange physics::cosp:cosp_subcolumns=1\n</code></pre> would disable subcolumn sampling, while <pre><code>./atmchange physics::cosp::cosp_subcolumns=10\n</code></pre> would use 10 subcolumns for the COSP internal subcolumn sampling using <code>SCOPS</code>/<code>PREC_SCOPS</code>. The default for high resolution cases (e.g., ne1024) should be to not use subcolumns, while lower resolutions (e.g., ne30) should enable subcolumn sampling.</p> <p>Output streams need to be added manually. A minimal example: <pre><code>./atmchange output_yaml_files=scream_daily_output.yaml\ncat &lt;&lt; EOF &gt; scream_cosp_daily_output.yaml\nAveraging Type: Average\nFields:\n  Physics PG2:\n    Field Names:\n    - isccp_cldtot\n    - isccp_ctptau\n    - modis_ctptau\n    - misr_cthtau\n    - cosp_sunlit\nMax Snapshots Per File: 1\nfilename_prefix: eamxx\noutput_control:\n  Frequency: 1\n  frequency_units: ndays\nEOF\n</code></pre></p>"},{"location":"EAMxx/user/cosp/#available-output-fields","title":"Available output fields","text":"<p>The following output fields are available:</p> <ul> <li>isccp_cldtot (total cloud area from ISCCP simulator)</li> <li>isccp_ctptau (ISCCP-simulated cloud top pressure/optical depth joint histogram)</li> <li>modis_ctptau (MODIS-simulated cloud top pressure/optical depth joint histogram)</li> <li>misr_cthtau  (MISR-simulated cloud top height/optical depth joint histogram)</li> <li>cosp_sunlit  (sunlit flag aggregated at COSP frequency for renormalizing daytime averages)</li> </ul> <p>ISCCP, MODIS, and MISR outputs are valid only for daytime/sunlit columns (to be consistent with available satellite retrievals). In order to aggregate only daytime columns in time averages, these outputs are multiplied by the sunlit flag (0 or 1) at each COSP calculation time. Time averages of these quantities are then aggregated, along with the cosp sunlit flag each time COSP is called. In order to back out the daytime-only time averages from the outputs, one needs to divide the output fields by <code>cosp_sunlit</code>. E.g., <pre><code>isccp_ctptau = mean(isccp_ctptau) / mean(cosp_sunlit)\n</code></pre></p>"},{"location":"EAMxx/user/dp_eamxx/","title":"Doubly Periodic (DP) EAMxx","text":"<p>To run the DP configuration of EAMxx (DP-EAMxx) please refer to the official DP resource page.  At this location you will find full documentation of case descriptions and access to run scripts.  Using these scripts, you should be able to get DP-EAMxx up and running in a matter of minutes on any machine that EAMxx currently runs on (CPU or GPU).</p>"},{"location":"EAMxx/user/eamxx_cases/","title":"Basics of EAMxx cases","text":"<p>This section explains how to create a case which uses EAMxx as the atmosphere model, as well as what are the currently supported compsets and grids for EAMxx.</p>"},{"location":"EAMxx/user/model_input/","title":"Model inputs","text":"<p>This section explains how input parameters are passed to EAMxx, and how the user can change their value. The full list of the currently configuraable runtime parameters for EAMxx can be found here.</p> <p>The infrastructure for reading inputs into EAMxx involves a few scripts/files:</p> <ol> <li><code>atmchange</code> and <code>atmquery</code>: these scripts are located in <code>SRCDIR/components/eamxx/scripts</code>,     and are soft-linked in the case folder. As their names suggest, they can be used to query     and change the runtime configuration parameter of EAMxx. Since these two scripts are the     only scripts that the average user needs to know and interact with, in the next sections     we give a brief overview of how they can be used and how their output can be interpreted.     Additionally, for both of the scripts a short help can also be obtained using the <code>-h</code> flag.</li> <li> <p><code>buildnml</code>: this script, located in <code>SRCDIR/components/eamxx/cime_config</code>, is called by CIME's     case management scripts (<code>case.setup</code>, <code>case.build</code>, and <code>case.submit</code>), and is responsible for creating     the input files that EAMxx will read to load its runtime parameters. Users should not have to modify this script,     nor should they have to manually call it, but it is useful to know what it does.     When <code>buildnml</code> runs, it creates a few files, containing EAMxx input parameters:</p> <ul> <li><code>scream_input.yaml</code>: this YAML file is located in the <code>RUNDIR/data</code> folder,     and will be read by EAMxx at runtime to load all of its configuration parameters. More precisely,     this file contains parameters that need to be used inside the EAMxx interfaces.</li> <li><code>namelist.nl</code>: this namelist file is     located in the <code>RUNDIR/data</code> folder, and will be parsed at runtime to get all the parameters for the     HOMME dycore (ADD REF). This file only contains dycore-specific parameters that are only recognized     inside HOMME, and does not contain any parameter pertaining EAMxx infrastructure.</li> <li><code>namelist_scream.xml</code>: this XML file is located in the case directory, and contains all the runtime parameters that EAMxx     will read in at runtime. <code>buildnml</code> uses this XML file as an intermediate file during the generation of     <code>scream_input.yaml</code> and <code>namelist.nl</code>. More specifically, <code>buildnml</code> generates this file using case information to select the     proper configurations from the file <code>namelist_defaults_scream.xml</code>, located in <code>SRCDIR/components/eamxx/cime_config</code>.     Despite the fact that the only files that are needed at runtime are <code>scream_input.yaml</code> and <code>namelist.nl</code>,     we generate and keep this XML file around to make the implementation of <code>atmquery</code> easier.</li> </ul> <p>Since these files are automatically generated when <code>buildnml</code> runs, users should not manually modify them. Any manual modification will be lost the next time <code>buildnml</code> runs (e.g., at <code>case.submit</code> time).</p> </li> </ol>"},{"location":"EAMxx/user/model_input/#querying-model-inputs-atmquery","title":"Querying model inputs: atmquery","text":"<p>This script is the simplest way for the user to check the value and properties of EAMxx input parameters. A basic usage of the script is</p> <pre><code>$ ./atmquery my_param\n</code></pre> <p>which will retrieve the value of the parameter called <code>my_param</code>, by locating the XML node \"my_param\" in the file <code>namelist_scream.xml</code> in the RUNDIR folder. Obviously, an XML file can have multiple nodes with the same tag, and the script is implemented to error out if multiple matches are found. In such a scenario, the user needs to provide also the parents nodes names, using enough parents to uniquely identify the node (in most cases, one parent is enough). To specify a parent, the user can prepend the parent name and <code>::</code> to the node name:</p> <pre><code>$ ./atmquery foo::my_param\n</code></pre> <p>The output will contain the fully scoped parameter name, along with the value. E.g.,</p> <pre><code>$ ./atmquery foo::my_param\n    namelist_defaults::node1::node2::foo::my_param:   10\n</code></pre> <p>It is sometimes desirable to query all the nodes that have a particular name, or that contain a particular string. We can do that by using the <code>--grep</code> flag:</p> <pre><code>$ ./atmquery --grep sub\n    iop_options::iop_dosubsidence: false\n    ctl_nl::hypervis_subcycle: 1\n    ctl_nl::hypervis_subcycle_tom: 1\n    ctl_nl::hypervis_subcycle_q: 6\n    atmosphere_processes::number_of_subcycles: 1\n    sc_import::number_of_subcycles: 1\n    homme::number_of_subcycles: 1\n    physics::number_of_subcycles: 1\n</code></pre> <p>TODO: This difference between basic and <code>--grep</code> is not really intuitive: as pointed out in this issue, we should change this. If we do, don't forget to update this following part of the docs. Using the <code>--grep</code> option has another effect: if the match is not a leaf of the XML tree, all its subelements are printed:</p> <pre><code>$ ./atmquery --grep homme\n  homme\n      Moisture: moist\n      BfbHash: 18\n      number_of_subcycles: 1\n      enable_precondition_checks: true\n      enable_postcondition_checks: true\n      repair_log_level: trace\n      internal_diagnostics_level: 0\n      compute_tendencies: None\n</code></pre> <p>Similarly to the CIME utility <code>xmlchange</code>, the options <code>--value</code>, <code>--type</code>, <code>--valid-values</code>, and <code>--full</code> can be used to respectively retrieve just the parameter value (useful for shell scripting), the parameter's type, a list of valid values for parameter (when applicable), or all of the above:</p> <pre><code>$ ./atmquery atm_log_level --value\n    info\n$ ./atmquery atm_log_level --type\n    namelist_defaults::driver_options::atm_log_level: string\n$ ./atmquery atm_log_level --valid-values\n    namelist_defaults::driver_options::atm_log_level: ['trace', 'debug', 'info', 'warn', 'error']\n$ ./atmquery atm_log_level --full\n      namelist_defaults::driver_options::atm_log_level\n        value: info\n        type: string\n        valid values: ['trace', 'debug', 'info', 'warn', 'error']\n</code></pre> <p>Finally, the option <code>--listall</code> can be used to list the whole content of the XML file, which will be displayed with each node indented in its parent scope:</p> <pre><code>$ ./atmquery --listall\n    namelist_defaults\n        grids_manager\n            Type: Homme\n            physics_grid_type: PG2\n            physics_grid_rebalance: None\n            dynamics_namelist_file_name: ./data/namelist.nl\n            vertical_coordinate_filename: /some/path/to/coords/file.nc\n        initial_conditions\n            Filename: /some/path/to/ic/file.nc\n            topography_filename: /some/path/to/topo/file.nc\n    ...\n</code></pre>"},{"location":"EAMxx/user/model_input/#changing-model-inputs-atmchange","title":"Changing model inputs: atmchange","text":"<p>When <code>buildnml</code> runs, the model inputs are deduced from the case configuration settings (e.g., the grid, the compset, etc.) and the <code>namelist_scream_defaults.xml</code> file, located in the eamxx source tree. The user can change any of these parameters using the <code>atmchange</code> script. A basic usage of the script is</p> <pre><code>$ ./atmchange my_param=10\n</code></pre> <p>As for <code>atmquery</code>, if there are multiple matches for a given parameter name, the user must specify a unique scoped name, which allows <code>atmchange</code> to uniquely identify the XML node to modify:</p> <pre><code>$ ./atmquery homme::number_of_subcycles\n    namelist_defaults::atmosphere_processes::homme::number_of_subcycles: 1\n$ ./atmchange number_of_subcycles=10\nERROR: internal_diagnostics_level is ambiguous. Use ANY in the node path to allow multiple matches. Matches:\n  namelist_defaults::atmosphere_processes::number_of_subcycles\n  namelist_defaults::atmosphere_processes::sc_import::number_of_subcycles\n  namelist_defaults::atmosphere_processes::homme::number_of_subcycles\n  namelist_defaults::atmosphere_processes::physics::number_of_subcycles\n  namelist_defaults::atmosphere_processes::physics::mac_aero_mic::number_of_subcycles\n  namelist_defaults::atmosphere_processes::physics::mac_aero_mic::tms::number_of_subcycles\n  namelist_defaults::atmosphere_processes::physics::mac_aero_mic::shoc::number_of_subcycles\n  namelist_defaults::atmosphere_processes::physics::mac_aero_mic::cldFraction::number_of_subcycles\n  namelist_defaults::atmosphere_processes::physics::mac_aero_mic::spa::internal_diagnostics_level\n  namelist_defaults::atmosphere_processes::physics::mac_aero_mic::p3::number_of_subcycles\n  namelist_defaults::atmosphere_processes::physics::rrtmgp::number_of_subcycles\n  namelist_defaults::atmosphere_processes::sc_export::number_of_subcycles\n$ ./atmchange homme::number_of_subcycles=10\nRegenerating /path/to/namelist_scream.xml. Manual edits will be lost.\n$ ./atmquery homme::number_of_subcycles\n    namelist_defaults::atmosphere_processes::homme::number_of_subcycles: 10\n</code></pre> <p>In some cases, the user may be interested in changing all nodes with a given name. In that case, you can use 'ANY' as a node name:</p> <p><pre><code>$ ./atmquery --grep number_of_subcycles\n    atmosphere_processes::number_of_subcycles: 1\n    sc_import::number_of_subcycles: 1\n    homme::number_of_subcycles: 1\n    physics::number_of_subcycles: 1\n    mac_aero_mic::number_of_subcycles: 24\n    tms::number_of_subcycles: 1\n    shoc::number_of_subcycles: 1\n    cldFraction::number_of_subcycles: 1\n    spa::number_of_subcycles: 1\n    p3::number_of_subcycles: 1\n    rrtmgp::number_of_subcycles: 1\n    sc_export::number_of_subcycles: 1\n$ ./atmchange ANY::number_of_subcycles=3\nRegenerating /path/to/namelist_scream.xml. Manual edits will be lost.\n$ ./atmquery --grep number_of_subcycles\n    atmosphere_processes::number_of_subcycles: 3\n    sc_import::number_of_subcycles: 3\n    homme::number_of_subcycles: 3\n    physics::number_of_subcycles: 3\n    mac_aero_mic::number_of_subcycles: 3\n    tms::number_of_subcycles: 3\n    shoc::number_of_subcycles: 3\n    cldFraction::number_of_subcycles: 3\n    spa::number_of_subcycles: 3\n    p3::number_of_subcycles: 3\n    rrtmgp::number_of_subcycles: 3\n    sc_export::number_of_subcycles: 3\n</code></pre> In addition, \"ANY\" can be used in a \"scoped\" string, to limit the set of matches: <pre><code>$ ./atmchange mac_aero_mic::ANY::number_of_subcycles=1\nRegenerating /path/to/namelist_scream.xml. Manual edits will be lost.\n$ ./atmquery --grep number_of_subcycles\n    atmosphere_processes::number_of_subcycles: 3\n    sc_import::number_of_subcycles: 3\n    homme::number_of_subcycles: 3\n    physics::number_of_subcycles: 3\n    mac_aero_mic::number_of_subcycles: 1\n    tms::number_of_subcycles: 1\n    shoc::number_of_subcycles: 1\n    cldFraction::number_of_subcycles: 1\n    spa::number_of_subcycles: 1\n    p3::number_of_subcycles: 1\n    rrtmgp::number_of_subcycles: 3\n    sc_export::number_of_subcycles: 3\n</code></pre></p> <p>Since the XML file stores constraints on the parameter value (like its type or valid values), attempting to use the wrong type will cause an error:</p> <pre><code>$ ./atmquery --type se_ne\n    namelist_defaults::ctl_nl::se_ne: integer\n$ ./atmchange se_ne=hello\nERROR: Could not refine 'hello' as type 'integer':\n</code></pre> <p>There are three main types supported: integer, float, string, logical. When passing a string to <code>atmchange</code>, the script will try to interpret it acoording to the parameter type, and throw an error if that's not possible: for \"string\", anything works; for \"integer\", only digits are allowed, possibly with a negative sign in front; for \"float\", only digits are allowed, possibly with a negative sign in front and a decimal point; for \"logical\", only the strings \"true\" and \"false\" are allowed (case insensitive). There are two additional types supported: \"file\" and \"array(T)\", where \"T\" is any of the other supported types (but not another array):  - \"file\" is used to inform CIME of the input files that have to be download from E3SM data servers, like initial conditions files, or certain lookup tables.  - \"array(T)\" allows to specify a list of items (of the same type), which will be parsed inside EAMxx as    a <code>std::vector&lt;T&gt;</code>.</p> <p>For type \"string\" and \"array(T)\", it is also possible to append to the currently stored value</p> <pre><code>$ ./atmquery homme::compute_tendencies\n    namelist_defaults::atmosphere_processes::homme::compute_tendencies:\n        value: a, b\n        type: array(string)\n        valid values: []\n$ ./atmchange homme::compute_tendencies+=c\n$ ./atmquery homme::compute_tendencies --full\n    namelist_defaults::atmosphere_processes::homme::compute_tendencies\n        value: a, b, c\n        type: array(string)\n        valid values: []\n</code></pre>"},{"location":"EAMxx/user/model_input/#modifying-the-list-of-atmosphere-processes","title":"Modifying the list of atmosphere processes","text":"<p>The <code>atmchange</code> script can be used to change any of the runtime parameters of EAMxx. In particular, it can be used to add, remove, or reorder atmosphere processes. When adding an atmosphere process, we must first make sure that the defaults for that process are present in <code>namelist_defaults_scream.xml</code>. For instance, the default settings for the \"physics\" atmosphere process group include the following:</p> <pre><code>$ ./atmquery physics::atm_procs_list\n    namelist_defaults::atmosphere_processes::physics::atm_procs_list: mac_aero_mic,rrtmgp\n</code></pre> <p>where \"mac_aero_mic\" is itself an atmosphere process group, consisting of macrophysics, aerosols, and microphysics processes. If one wanted to add the \"cosp\" atmosphere process to this list, and change the number of its subcycles, it could do so via</p> <pre><code>$ ./atmchange physics::atm_procs_list+=cosp\n$ ./atmchange cosp::number_of_subcycles=3\n</code></pre> <p>Notice that if we swapped the two commands, we would get an error, since the node \"cosp\" is not present in the XML generated from the defaults until we decide to add it.</p> <p>It is also possible to declare a new (empty) atmosphere process group, which can then be filled with valid atmosphere processes via subsequent calls to <code>atmchange</code>. The syntax to trigger this behavior consists in specifying a process name that begins and ends with an underscore:</p> <pre><code>$ ./atmchange physics::atm_procs_list+=_my_group_\n</code></pre> <p>This adds a new process to the list of processes in \"physics\", called \"_my_group_\", and which is itself an atmosphere process group. Hence, we can then do</p> <pre><code>$ ./atmchange _my_group_::atm_procs_list+=A,B\n</code></pre> <p>where A and B must be valid atmosphere process names (i.e., present in <code>namelist_defaults_scream.xml</code>) or be themselves new atmosphere process groups (i.e., beginning/ending with an underscore)</p> <p><code>atmchange</code> can also be used to completely change a list of atmosphere processes:</p> <pre><code>$ ./atmchange physics::atm_procs_list=A,B,C\n</code></pre> <p>Notice that we used \"=\" instead of \"+=\", which means we will be overwriting the value, rather than appending. Any atmosphere process that was previously in the list but is no longer in it will be removed from the generated <code>namelist_defaults.xml</code> (and <code>scream_input.yaml</code>) files, along with all their nested parameters.</p>"},{"location":"EAMxx/user/model_output/","title":"Model output","text":"<p>EAMxx allows the user to configure the desired model output via YAML files, with each YAML file associated to a different output file. In order to add an output stream, one needs to run <code>atmchange output_yaml_files+=/path/to/my/output/yaml</code> (more information on how to use <code>atmchange</code> can be found here). During the <code>buildnml</code> phase of the case management system, a copy of these YAML files will be copied into the RUNDIR/data folder. During this process, the files will be parsed, and any CIME-related variable will be resolved accordingly. Therefore, it is not advised to put the original YAML files in RUNDIR/data, since upon <code>buildnml</code> execution, all the CIME vars will no longer be available in the YAML file, making it harder to tweak it, and even harder to share with other users/cases. Another consequence of this is that the user should not modify the YAML files in RUNDIR/data, since any modification will be lost on the next run of <code>buildnml</code>.</p>"},{"location":"EAMxx/user/model_output/#basic-output","title":"Basic output","text":"<p>The following is a basic example of an output request.</p> <pre><code>%YAML 1.1\n---\nfilename_prefix: my_output\nAveraging Type: Average\nMax Snapshots Per File: 10\nFields:\n  Physics:\n    Field Names:\n      - T_mid\n      - qv\n  Dynamics:\n    Field Names:\n      - dp3d_dyn\n      - omega_dyn\noutput_control:\n  Frequency: 6\n  frequency_units: nhours\n</code></pre> <p>Notice that lists can be equivalently specified in YAML as <code>Field Names: [f1, f2, f3]</code>. The user can specify fields to be outputted from any of the grids used in the simulation. In the example above, we requested fields from both the Physics and Dynamics grid. The meaning of the other parameters is as follows:</p> <ul> <li> <p><code>Averaging Type</code>: how the fields are integrated in time before being saved. Valid   options are</p> <ul> <li>Instant: no integration, each time frame saved corresponds to instantaneous values   of the fields</li> <li>Average/Max/Min: the fields undergo the corresponding operation over the time   interval specified in the <code>output_control</code> section. In the case above, each snapshot   saved to file corresponds to an average of the output fields over 6h windows.</li> </ul> </li> <li> <p><code>filename_prefix</code>: the prefix of the output file, which will be created in the run   directory. The full filename will be <code>$prefix.$avgtype.$frequnits_x$freq.$timestamp.nc</code>,   where $timestamp corresponds to the first snapshot saved in the file for Instant output,   or the beginning of the first averaging window for the other averaging types</p> </li> <li><code>Max Snapshots Per File</code>: specifies how many time snapshots can be put in a file. Once   this number is reached, EAMxx will close the file and open a new one.</li> <li><code>Frequency</code>: how many units of time are between two consecutive writes to file. For   Instant output the fields are \"sampled\" at this frequency, while for other averaging   types the fields are \"integrated\" in time over this window</li> <li><code>frequency_units</code>: units of the output frequency. Valid options are <code>nsteps</code> (the   number of atmosphere time steps), <code>nsecs</code>, <code>nmins</code>, <code>nhours</code>, <code>ndays</code>, <code>nmonths</code>,   <code>nyears</code>.</li> </ul>"},{"location":"EAMxx/user/model_output/#diagnostic-output","title":"Diagnostic output","text":"<p>In addition to the fields computed by EAMxx as part of the timestep, the user can request to output derived quantities, which will be computed on the fly by the I/O interface of EAMxx. There are two types of diagnostic outputs:</p> <ul> <li> <p>quantities computed as a function of EAMxx fields. These are simply physical quantities   that EAMxx does not keep in persistent storage. As of May 2024, the available   derived quantities are (case sensitive):</p> <ul> <li><code>PotentialTemperature</code></li> <li><code>AtmosphereDensity</code></li> <li><code>Exner</code></li> <li><code>VirtualTemperature</code></li> <li><code>z_int</code></li> <li><code>z_mid</code></li> <li><code>geopotential_int</code></li> <li><code>geopotential_mid</code></li> <li><code>dz</code></li> <li><code>DryStaticEnergy</code></li> <li><code>SeaLevelPressure</code></li> <li><code>LiqWaterPath</code></li> <li><code>IceWaterPath</code></li> <li><code>VapWaterPath</code></li> <li><code>RainWaterPath</code></li> <li><code>RimeWaterPath</code></li> <li><code>ShortwaveCloudForcing</code></li> <li><code>LongwaveCloudForcing</code></li> <li><code>RelativeHumidity</code></li> <li><code>ZonalVapFlux</code></li> <li><code>MeridionalVapFlux</code></li> <li><code>precip_liq_surf_mass_flux</code></li> <li><code>precip_ice_surf_mass_flux</code></li> <li><code>precip_total_surf_mass_flux</code></li> <li><code>surface_upward_latent_heat_flux</code></li> <li><code>wind_speed</code></li> <li><code>AerosolOpticalDepth550nm</code></li> <li><code>NumberPath</code></li> <li><code>AeroComCld</code></li> </ul> </li> </ul> <p>TODO: add some information about what each diagnostic is, perhaps a formula</p> <ul> <li> <p>lower-dimensional slices of a field. These are hyperslices of an existing field or of   another diagnostic output. As of August 2023, given a field X, the available options   are:</p> <ul> <li><code>X_at_lev_N</code>: slice the field <code>X</code> at the N-th vertical level index. Recall that   in EAMxx N=0 corresponds to the model top.</li> <li><code>X_at_model_bot</code>, <code>X_at_model_top</code>: special case for top and bottom of the model.</li> <li><code>X_at_Ymb</code>, <code>X_at_YPa</code>, <code>X_at_YhPa</code>: interpolates the field <code>X</code> at a vertical position   specified by the give pressure <code>Y</code>. Available units are <code>mb</code> (millibar), <code>Pa</code>, and <code>hPa</code>.</li> <li><code>X_at_Ym_above_Z</code>: interpolates the field <code>X</code> at a vertical height of <code>Y</code> meters above   <code>Z</code>, with <code>Z=surface</code> or <code>Z=sealevel</code>.</li> </ul> </li> </ul>"},{"location":"EAMxx/user/model_output/#remapped-output","title":"Remapped output","text":"<p>The following options can be used to to save fields on a different grid from the one they are computed on.</p> <ul> <li><code>horiz_remap_file</code>: a path to a map file (as produced by <code>ncremap</code>) between the grid   where the fields are defined and a coarser grid. EAMxx will use this to remap fields   on the fly, allowing to reduce the size of the output file. Note: with this feature,   the user can only specify fields from a single grid.</li> <li><code>vertical_remap_file</code>: similar to the previous option, this map file is used to   refine/coarsen fields in the vertical direction.</li> <li><code>IOGrid</code>: this parameter can be specified inside one of the grids sections, and will   denote the grid (which must exist in the simulation) where the fields must be remapped   before being saved to file. This feature is really only used to save fields on the   dynamics grid without saving twice the DOFs at the interface of two spectral elements.   E.g., for a scalar quantity defined only in the horizontal direction, native output   from the Dynamics grid would produce arrays of length <code>nelems*ngp*ngp</code>, where <code>ngp</code>    is the number of Gauss points along each axis in the 2d spectral element, and <code>nelems</code>   is the number of horizontal elements. However, due to continuity, the values on the   Gauss points on the element boundary must match the values on the neighboring element,   resulting in duplicated data. By remapping to a \"unique\" version of the dynamics grid   (which in EAMxx is referred to as \"Physics GLL\"), we can save roughly 45% of storage.   Note: this feature cannot be used along with the horizontal/vertical remap.</li> </ul>"},{"location":"EAMxx/user/model_output/#tendencies-output","title":"Tendencies output","text":"<p>It is also possible to request tendencies of fields that are updated by atmosphere processes, on a per-process basis (here, \"updated\" means that the field is both an input as well as an output of the atmosphere process). Since the term \"tendency\" can be used with slightly different connotations, we clarify what we mean by that when it comes to model output: if process P updates field A, by the tendency of A from process P we mean <code>(A_after_P - A_before_P) / dt</code>, where <code>dt</code> is the atmosphere timestep.</p> <p>As of May 2024, the user needs two things in order to get tendencies from a process. E.g., to get the tendencies of <code>T_mid</code> and <code>horiz_winds</code> from the process <code>shoc</code>, one needs:</p> <ul> <li><code>atmchange shoc::compute_tendencies=T_mid,horiz_winds</code>;</li> <li>add <code>shoc_T_mid_tend</code> and <code>shoc_horiz_winds_tend</code> to the list of fields in the desired output YAML file.</li> </ul>"},{"location":"EAMxx/user/model_output/#additional-options","title":"Additional options","text":"<p>The YAML file shown at the top of this section, together with the remap options in the following section, covers most of the options used in a typical run. There are however particular use cases that require some less common options, which we list here (in parentheses, the location in the YAML file and the type of the parameter value).</p> <ul> <li><code>flush_frequency</code> (toplevel list, integer): this parameter  can be used to specify how often the IO   library should sync the in-memory data to file. If not specified, the IO library is free to decide   when it should flush the data. This option can be helpful for debugging, in case a crash is occurring   after a certain number of steps, but before the IO library would automatically flush to file.</li> <li><code>Floating Point Precision</code> (toplevel list, string): this parameter specifies the precision to be used for floating   point variables in the output file. By default, EAMxx uses single precision. Valid values are   <code>single</code>, <code>float</code>, <code>double</code>, and <code>real</code>. The first two are synonyms, while the latter resolves   to <code>single</code> or <code>double</code> depending on EAMxx cmake configuration parameter <code>SCREAM_DOUBLE_PRECISION</code>.</li> <li><code>file_max_storage_type</code> (toplevel list, string): this parameter determines how the capacity of the file is specified.   By default, it is set to <code>num_snapshots</code>, which makes EAMxx read <code>Max Snapshots Per File</code> (explained   in the first section). However, the user can specify <code>one_year</code> or <code>one_month</code>, which will make   EAMxx create one output file per year/month of simulation, fitting however many snapshots are needed   in each file (depending on the output frequency). If <code>one_year</code> or <code>one_month</code> are used, the option   <code>Max Snapshots Per File</code> is ignored.</li> <li><code>MPI Ranks in Filename</code> (toplevel list, boolean): this option specifies whether the number of MPI ranks in the atm   communicator should be put inside the output file name. By default, this is <code>false</code>, since it is   usually not important. This option is mostly important for standalone unit testing, where several   versions of the same test (corresponding to different numbers of MPI ranks) are running concurrently,   so that different file names are needed to avoid resource contention.</li> <li><code>save_grid_data</code> (<code>output_control</code> sublist, boolean): this option allows to specify whether grid data   (such as <code>lat</code>/<code>lon</code>) should be added to the output stream. By default, it is <code>true</code>.</li> <li><code>iotype</code> (toplevel list, string): this option allows the user to request a particular format for the output   file. The possible values are <code>default</code>, <code>netcdf</code>, <code>pnetcdf,</code>adios<code>,</code>hdf5<code>, where</code>default` means   \"whatever is the PIO type from the case settings\".</li> <li><code>skip_t0_output</code> (<code>output_control</code> sublist, boolean): this option is relevant only for <code>Instant</code> output,   where fields are also outputed at the case start time (i.e., after initialization but before the beginning   of the first timestep). By default it is set to <code>false</code>.</li> <li>restart options: when performing a restart, EAMxx attempts to restart every output stream listed in   the <code>output_yaml_files</code> atm option (which can be queried via <code>atmquery output_yaml_files</code>). The user   can specify a few options, in order to tweak the restart behavior:</li> <li><code>Perform Restart</code> (<code>Restart</code> sublist, boolean): this parameter is <code>true</code> by default, but can be set     to <code>false</code> to force the model to ignore any history restart files, and start the output stream from     scratch, as if this was an initial run.</li> <li><code>filename_prefix</code> (<code>Restart</code> sublist, string): by default, this parameter is set to match the value     of <code>filename_prefix</code> from the toplevel list. It can be set to something else in case we want to     restart a previous simulation that was using a different filename prefix.</li> <li><code>force_new_file</code> (<code>Restart</code> sublist, boolean): this parameter allows to start a fresh new output file     upon restarts. By default, is is set to <code>false</code>, so that EAMxx will attempt to resume filling the     last produced output file (if any, and if it can accommodate more snapshots).</li> </ul>"},{"location":"EAMxx/user/nudging/","title":"Nudging in EAMxx","text":"<p>Nudging is supported in EAMxx. Currently, it is possible to nudge EAMxx to the output from a different EAMxx run or to reanalysis. Nudging data can be on your model grid or an arbitrary coarser grid. Inline interpolating of finer-grid nudging data to a coarser model resolution isn't implemented yet but may be in the future.</p>"},{"location":"EAMxx/user/nudging/#data-to-nudge-towards","title":"Data to nudge towards","text":"<p>The user is expected to prepapre (and then use <code>atmchange</code> to point to) nudging data files that are compliant with EAMxx specification. In practice, this means that the data files must contain variable names known to EAMxx (only U, V, T_mid, and qv are supported now). The files can be specified with an explicit list or via pattern matching. The files must contain an arbitary global attribute <code>case_t0</code>, and it is recommended to be the same as the time dimension unit (the files must be time-dimensioned). Finally, the dimension order must be such that <code>lev</code> is the last dimension, so most likely, the user must transpose the dimensions.</p>"},{"location":"EAMxx/user/nudging/#pressure-in-the-nudging-data","title":"Pressure in the nudging data","text":"<p>Pressure can be explicitly provided in the nudging data as time-varying <code>p_mid</code> corresponding to the option <code>TIME_DEPENDENT_3D_PROFILE</code> for <code>source_pressure_type</code>. Alternatively, the data can contain a time-invariant pressure variable <code>p_lev</code> corresponding to the option <code>TIME_DEPENDENT_3D_PROFILE</code> for <code>source_pressure_type</code>.</p>"},{"location":"EAMxx/user/nudging/#weighted-nudging-for-rrm-applications","title":"Weighted nudging for RRM applications","text":"<p>In regionally refined model applications, it is possible to use weighted nudging, for example, to avoid nudging the refined region. To achieve that, the user can use <code>atmchange</code> to set <code>use_nudging_weights</code> (boolean) and provide <code>nudging_weights_file</code> that has the weight to apply for nudging (for example, zeros in the refined region). Currently, weighted nudging is only supported if the user provides the nudging data at the target grid.</p>"},{"location":"EAMxx/user/nudging/#example-setup-current-as-of-april-2024","title":"Example setup (current as of April 2024)","text":"<p>To enable nudging as a process, one must declare it in the <code>atm_procs_list</code> runtime parameter.</p> <pre><code>./atmchange physics::atm_procs_list=\"mac_aero_mic,rrtmgp,cosp,nudging\"\n</code></pre> <p>The following options are needed to specify the nudging.</p> <pre><code>./atmchange nudging::nudging_filenames_patterns=\"/pathto/nudging_files/*.nc\" # can provide file name explicitly here instead (or multiple patterns)\n./atmchange nudging::source_pressure_type=TIME_DEPENDENT_3D_PROFILE # see section on pressure\n./atmchange nudging::nudging_fields=U,V # can include qv, T_mid as well\n./atmchange nudging::nudging_timescale=21600 # in seconds\n</code></pre> <p>To gain a deeper understanding of these parameters and options, please refer to code implementation of the nudging process.</p>"},{"location":"EAMxx/user/pyscream/","title":"PySCREAM","text":"<p>PySCREAM is currently under heavy development and may contain some rough edges. If you encounter any issues, please report them on the team on github discussions. Likewise, if you have questions or would like to request features, please post them on the github discussions.</p>"},{"location":"EAMxx/user/pyscream/#quick-start","title":"Quick Start","text":"<p>For now, the only way to use pyscream is to either build it on your own or use our prebuilt conda binaries. We prefer for you to use the latter. In a conda environment, please use the following command to install it:</p> <pre><code>conda install -c mahf708 pyscream=0.0.2\n</code></pre> <p>It is recommended to use the latest version of pyscream, wich is currently 0.0.2. As you can see, it is a young package with a lot of potential. We do not guarantee that the API will remain stable, but we will try to document any changes as frequently as we could.</p>"},{"location":"EAMxx/user/pyscream/#examples","title":"Examples","text":"<p>We provide an example to demo calling the radiation process (RRTMGP). More examples are on the way. If you'd like to add your example, please feel free to submit a PR.</p>"},{"location":"EAMxx/user/pyscream/#rrtmgp","title":"RRTMGP","text":"<pre><code>from mpi4py import MPI\nimport pyscream\n\npyscream.init()\n\ndt = 1800\nt0_str = \"2020-10-10-00000\"\n\nic_file = \"/lcrc/group/e3sm/public_html/inputdata/atm/scream/init/screami_unit_tests_ne2np4L72_20220822.nc\"\nncols = 218\nnlevs = 72\npyscream.create_grids_manager(ncols,nlevs, ic_file)\n\nrad_dict = {\n    \"column_chunk_size\": 123,\n    \"active_gases\": [\"h2o\", \"co2\", \"o3\", \"n2o\", \"co\" , \"ch4\", \"o2\", \"n2\"],\n    \"orbital_year\": 1990,\n    \"log_level\": \"info\",\n    \"do_aerosol_rad\": False,\n    \"rrtmgp_coefficients_file_sw\": \"/lcrc/group/e3sm/data/inputdata/atm/scream/init/rrtmgp-data-sw-g112-210809.nc\",\n    \"rrtmgp_coefficients_file_lw\": \"/lcrc/group/e3sm/data/inputdata/atm/scream/init/rrtmgp-data-lw-g128-210809.nc\",\n    \"rrtmgp_cloud_optics_file_sw\": \"/lcrc/group/e3sm/data/inputdata/atm/scream/init/rrtmgp-cloud-optics-coeffs-sw.nc\",\n    \"rrtmgp_cloud_optics_file_lw\": \"/lcrc/group/e3sm/data/inputdata/atm/scream/init/rrtmgp-cloud-optics-coeffs-lw.nc\",\n}\n\nrad = pyscream.AtmProc(rad_dict, 'RRTMGP')\nrad.read_ic(ic_file)\nrad.initialize(t0_str)\n\nt = rad.get_field(\"T_mid\")\ntm = t.get()\n\nprint(tm[5,5], flush=True)\n\nrad.run(dt)\nrad.run(dt)\n\nprint(tm[5,5], flush=True)\n</code></pre>"},{"location":"EAMxx/user/rrm_eamxx/","title":"Running EAMxx with a Regionally Refined Mesh (RRM)","text":"<p>Running EAMxx with a RRM allows you run a select region of the globe at high resolution (i.e. 3 km) with the remainder of the globe at a lower resolution (i.e. 25 or 100 km).  This document will point you to the steps required and resources available to assist in developing and running a new RRM.</p>"},{"location":"EAMxx/user/rrm_eamxx/#choose-your-rrm","title":"Choose Your RRM","text":"<p>What region of the globe do you want to refine?  Your first step should be to check library of RRM grids/cases that have already been developed to potentially avoid duplicate work.  If you found a RRM that suits your needs, you can skip the next step (\"Generate Your RRM\").</p>"},{"location":"EAMxx/user/rrm_eamxx/#generate-your-rrm","title":"Generate Your RRM","text":"<p>Please refer to the offical E3SM guide for developing new atmosphere grids, which provides detailed guidance for developing your RRM.</p> <p>After you have made all the necessary files for your RRM, you will need to configure your code branch so that it knows about your new grid.  The steps required to do this are documented at the top of the library of RRM grids/cases page.</p>"},{"location":"EAMxx/user/rrm_eamxx/#make-your-initial-condition-file","title":"Make Your Initial Condition File","text":"<p>The easiest way to generate an initial condition is to use the HICCUP tool, which is a set of flexible and robust python routines to streamline the task of generating a new atmospheric initial condition for E3SM.  Otherwise, please see the step-by-step instuctions if you prefer to manually generate your initial condition.</p>"},{"location":"EAMxx/user/rrm_eamxx/#assemble-nudging-data-optional","title":"Assemble Nudging Data (Optional)","text":"<p>If you wish to nudge your simulation, assemble your nudging data in the format required by EAMxx.  Please refer to the nudging documentation.</p> <p>In the event that you only want to nudge a portion of your domain, then you will need to generate a nudging weights file.  A common use case for this is when you want the high-resolution region to remain free-running (unnudged) while nudging the coarse domain towards reanalysis or model data.  Please use this script as an example of how to generate your nudging weights file.</p>"},{"location":"EAMxx/user/rrm_eamxx/#run-your-rrm","title":"Run your RRM","text":"<p>Congratulations, you are now ready to run your EAMxx RRM.  If you are running your RRM in free running mode (not using any nudging) then you simply need to modify an existing EAMxx script and change the resolution to match the one you created for your RRM.</p> <p>If you are using nudging, then please see this example script of how to run a nudged EAMxx RRM run.  This example script uses the California 3-km RRM, which is on the master branch.</p>"},{"location":"ELM/","title":"The E3SM Land Model (ELM)","text":"<p>Some introductory text here</p> <ul> <li>The ELM User Guide explains how to control ELM when its running within E3SM and how to run in Coupler-bypass mode</li> <li>The ELM Developer Guide explains ELM data structures and how to develop new code.</li> <li>The ELM Technical Guide explains the science behind ELM's code</li> </ul>"},{"location":"ELM/dev-guide/","title":"Developer Guide","text":"<p>This guide contains information for developing ELM and MOSART.</p>"},{"location":"ELM/dev-guide/#_1","title":"Developer Guide","text":"<ul> <li>Testing development branches: Generating baselines and comparing new development against baselines</li> </ul>"},{"location":"ELM/dev-guide/testing/","title":"Testing","text":"<p>When a developer is ready to issue a PR to integrate their new developments into E3SM's <code>master</code> branch, they need to test their code development to ensure the new development does not introduce unexpected bugs. A land developer needs to atleast run the <code>e3sm_land_developer</code> test suite that involves following two steps: </p> <ul> <li>Step-1: Generate the baselines using the hash on <code>master</code> that was the starting point of the    development branch, and</li> <li>Step-2: Switch to the development branch and re-run the test suite to compare against    the baselines generated in Step-1.</li> </ul> <p>For the purpose of these document, let's assume the developer branch is <code>bishtgautam/lnd/emi-example</code>.</p>"},{"location":"ELM/dev-guide/testing/#step-1-generate-baselines","title":"Step-1: Generate Baselines","text":"<p>Find the starting hash on <code>master</code> by switching to the developer branch and looking at the Git graph.</p> <pre><code>cd &lt;e3sm-dir&gt;\n\n# Switch to your branch\ngit checkout bishtgautam/lnd/emi-example\n\n# Let's look at the graph\ngit log --oneline --decorate --graph\n* 9a2cd8459 (HEAD -&gt; bishtgautam/lnd/emi-example, origin/bishtgautam/lnd/emi-example) Updates the Stub EM code\n* d11fb8c52 Adds a readme and makefile for EMI Demo code\n* 15a0e4b8d Minor update to the EMI demo code\n* 63e2f6dcd Minor fix to ELM configure script\n* 551fc79cc Updates ELM stub and demo code to use CNCarbonStateType\n* 8c9d41f87 Adds code to exchange CNCarbonStateType\n* 0000ded51 Minor fix\n* 2baa4ebec Adds fixes to cmake\n* f77ae2cea Rename few cmake files\n* b48b66dd6 Adds a demo for a Stub EM\n* fa94aea0d Fixes length of variable to store name of EMI data\n* cca0e0be1 Adds capability to print all EMI Data in a list\n* beb1fe9ee Adds .gitignore files for EMI\n* 301acfe7a Renames ExternalModelInterfaceDataMod.F90\n* f0eb5b40b Renames ExternalModelInterfaceDataDimensionMod.F90\n* 076100882 Restructures ELM's EMI directory\n*   cfb7fc2b2 Merge branch 'qzhu-lbl/lnd/ch4_inundation_bugfix' (PR #2814)\n|\\\n| * ec99b1cb4 (origin/qzhu-lbl/lnd/ch4_inundation_bugfix)  - fix ch4 inundatation parameter read in bug\n* |   c59c98116 Merge branch 'darincomeau/mpaso/enable_eddystats' (PR #2821)\n|\\ \\\n| * | c21bb46a4 Turn on eddy stats for oEC60to30v3 and oEC60to30v3wLI ocn grids by default\n* | |   a2dd2fce5 Merge pull request #2811 from E3SM-Project/jayeshkrishna/pio2_cime_changes\n</code></pre> <p>The above Git graph tells us that <code>bishtgautam/lnd/emi-example</code> started with the <code>cfb7fc2b2</code> hash on the <code>master</code>. So, we will generate the baselines using <code>cfb7fc2b2</code>. Checkout <code>cfb7fc2b2</code> and update the submodels via:</p> <pre><code>git checkout cfb7fc2b2\nNote: checking out 'cfb7fc2b2'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b &lt;new-branch-name&gt;\n\nHEAD is now at cfb7fc2b2... Merge branch 'qzhu-lbl/lnd/ch4_inundation_bugfix' (PR #2814)\n\ngit submodule update --init\n</code></pre> <p>Now we will use <code>cime/scripts/create_test</code> to generate baseline for the <code>e3sm_land_developer</code> test suite.</p> <pre><code>cd cime/scripts\n</code></pre> <p>A few things that you need to decide at this stage include the directory location where the baselines will be saved, the name and ID for the baselines, the project allocation that you will use for running the simulation, if you would like to receive email notifications about tests, etc.</p> <pre><code># Define the directory to hold the baseline \nexport MY_BASELINE_DIR=/global/cscratch1/sd/gbisht/e3sm_baselines\n\n# Do you want to use a name for the baseline? \n# One choice could be the git hash that is being used to generate the baselines.\nexport BASELINE_NAME=cfb7fc2b2\n\n# Let's set TEST_ID to be same as BASELINE_NAME\nexport TEST_ID=${BASELINE_NAME}\n\n# If you are a member of E3SM, you could use 'e3sm' project allocation\nexport PROJECT=e3sm\n\n# Set your email\nexport MAIL_USER=&lt;your-mail@something&gt;\n</code></pre> <p>Use <code>./create_test --help</code> to get a complete list of arguments. Below are some additional useful arguments for <code>./create_test</code>:</p> <pre><code># Other arguments\n# -v         : Verbose option\n# -g         : Generate the baseline\n# -q         : If you want to use a particular job queue (e.g. 'debug' queue on NERSC)\n# --walltime : Specify the wall time for jobs (e.g. 30 min is max allowable for 'debug' queue on NERSC)\n# --mail-user: If you want to receive emails about your jobs\n# --mail-type: When to receive emails. Options are: never, all, begin, end, fail.\n# -j         : Number of parallel jobs\n</code></pre> <p>Now run the <code>e3sm_land_developer</code></p> <pre><code>./create_test e3sm_land_developer  \\\n--baseline-root ${MY_BASELINE_DIR} \\\n-b ${BASELINE_NAME}                \\\n-t ${TEST_ID}                      \\\n-q regular                         \\\n-p ${PROJECT}                      \\\n--walltime 00:30:00                \\\n--mail-user $MAIL_USER             \\\n--mail-type all                    \\\n-g                                 \\\n-v                                 \\\n-j 4\n</code></pre> <p>The cases would be named <code>*.G.*</code> to denote one is generating the baselines. It will take a while to compile all the cases and submit the code. It can take a long time (&gt;30mins) for the test suite to run. To avoid interrupting the test suite in the middle, one can run the test suite within a <code>screen</code> command. After the cases have been successfully compiled and submitted, you can check that  status of test by running the <code>cs.status.${TEST_ID}</code> file that was created in the scratch directory.</p>"},{"location":"ELM/dev-guide/testing/#step-2-compare-against-previously-generated-baselines","title":"Step-2: Compare against previously generated baselines","text":"<p>Now, switch to the development branch and be sure to update submodules.</p> <pre><code>cd &lt;e3sm-dir&gt;\ngit checkout bishtgautam/lnd/emi-example\nPrevious HEAD position was cfb7fc2b2... Merge branch 'qzhu-lbl/lnd/ch4_inundation_bugfix' (PR #2814)\nSwitched to branch 'bishtgautam/lnd/emi-example'\nYour branch is up-to-date with 'origin/bishtgautam/lnd/emi-example'.\n\n# Checkout the appropriate submodules\ngit submodule update --init\n</code></pre> <p>Again initialize few settings.</p> <pre><code>cd cime/scripts\n\n# Let's use the settings as the last time\nexport MY_BASELINE_DIR=/global/cscratch1/sd/gbisht/e3sm_baselines\n\n# IMPORTANT: One needs to use the same BASELINE_NAME as in Step-1 because one wants\n#            to compare against the baselines previously generated in Step-1.\nexport BASELINE_NAME=cfb7fc2b2\n\n# You can use the hash at the tip of your branch as the ID\nexport TEST_ID=9a2cd8459\n</code></pre> <p>Run the test suite and compare (via <code>-c</code>) against previously generated baselines.</p> <pre><code>./create_test e3sm_land_developer  \\\n--baseline-root ${MY_BASELINE_DIR} \\\n-b ${BASELINE_NAME}                \\\n-t ${TEST_ID}                      \\\n-q debug                           \\\n--walltime 00:30:00                \\\n--mail-user $MAIL_USER             \\\n--mail-type all                    \\\n-c                                 \\\n-v                                 \\\n-j 4\n</code></pre> <p>The cases would be named <code>*.C.*</code> to denote one is comparing against previously generated baselines. Similar to the last time, a new <code>cs.status.${TEST_ID}</code> would be created and you can check the status of test by running it.</p>"},{"location":"ELM/tech-guide/","title":"Technical Guide","text":"<p>This Technical Guide describes the physics of ELM.</p> <ul> <li>TOP Parameterization: Parameterization of sub-grid topographical effects on solar radiation.</li> </ul>"},{"location":"ELM/tech-guide/top_solar_parameterization/","title":"Top solar parameterization","text":"<p>The TOP solar radiation parameterization in ELM accounts for the effects of sub-grid topography on solar radiation flux, including the shadow effects and multi-scattering between adjacent terrain<sup>1</sup>.</p>"},{"location":"ELM/tech-guide/top_solar_parameterization/#overview","title":"Overview","text":"<p>The incoming solar radiation for a flat surface is composed of direct radiation (\\(F_{dir}^{PP}\\)) from sun, diffuse radiation (\\(F_{dif}^{PP}\\)) from sky, and coupled radiation (\\(F_{couple}^{PP}\\)) that represents surface reflected radiation that is further reflected or scattered by atmospheric particles. ELM v1.0 and ELM v2.0 assume flat surfaces and accounts for \\(F_{dir}^{PP}\\) and \\(F_{dif}^{PP}\\), while neglecting \\(F_{couple}^{PP}\\). The solar radiation scheme of ELM v1.0 and  ELM v2.0 uses the two-stream approximations<sup>2</sup>. In contrast, the incoming solar radiation parametrization of Lee et al. (2011)<sup>3</sup> over mountainous regions includes five components (illustrated in Fig. 1): </p> <ol> <li>direct flux (\\(F_{dir}^{TOP}\\)) represents photons that are transmitted from the sun to the ground surface without encountering any reflection or scattering, </li> <li>the direct-reflected flux (\\(F_{rdir}^{TOP}\\)) represents photons that are not scattered photons reflected by surrounding terrain, </li> <li>diffuse flux (\\(F_{dif}^{TOP}\\)) represents photons that are scattered by atmospheric particles but are not reflected by the ground surface, </li> <li>diffuse-reflected flux (\\(F_{rdif}^{TOP}\\)) represents scattered photons reflected by surrounding terrain, and </li> <li>coupled flux (\\(F_{couple}^{TOP}\\)) represents remaining photons that are reflected multiple times or scattered by ground surface and atmospheric particles.</li> </ol> <p> </p>    Fig 1.: A schematic diagram of the five components of incoming solar radiation over mountains adapted from Lee et al. (2011)[^3]. The components of incoming solar radiation included are (1) direct flux, (2) diffuse flux, (3) direct-reflected flux, (4) diffuse-reflected flux, and (5) coupled flux. Local solar zenith angle (\u03b8), sky view factor (V<sub>d</sub>), and terrain configuration factor (C<sub>T</sub>) are also marked.    <p>\\(F_{dir}^{TOP}\\) is different from \\(F_{dir}^{PP}\\) because of the adjustment of solar illumination geometry and shadowing effects. \\(F_{dif}^{PP}\\) is different from \\(F_{dif}^{TOP}\\) because the sky hemisphere is occluded by adjacent terrain. Lee et al. (2011)<sup>3</sup> used the radiation fluxes over flat surfaces (i.e., \\(F_{dir}^{PP}\\) and \\(F_{dif}^{PP}\\)) to calculate the radiation fluxes over mountainous terrain based on sub-grid topographic factors. The relative deviation (\\(f_{dir}\\)) of direct flux between flat surfaces and mountains under the same atmospheric condition is defined as follows</p> \\[ \\label{eqn_fdir} f_{dir} = \\frac{F_{dir}^{TOP} - F_{dir}^{PP}}{F_{dir}^{PP}} \\] <p>The relative deviation (\\(f_{rdir}\\)) of direct-reflected flux over mountains to direct flux over flat surfaces is defined as follows:</p> \\[ \\label{eqn_frdir} f_{rdir} = \\frac{F_{rdir}^{TOP}}{F_{dir}^{PP}} \\] <p>Similarly, the relative deviations (\\(f_{dif}\\) and \\(f_{rdif}\\)) of diffuse and diffuse-reflected fluxes are expressed as follows:</p> \\[ \\label{eqn_fdif} f_{dif} = \\frac{F_{dif}^{TOP} - F_{dif}^{PP}}{F_{dir}^{PP}} \\] \\[ \\label{eqn_frdif} f_{rdif} = \\frac{F_{rdif}^{TOP}}{F_{dif}^{PP}} \\]"},{"location":"ELM/tech-guide/top_solar_parameterization/#multiple-linear-regression-model-of-lee-et-al-2011","title":"Multiple Linear Regression Model of Lee et al. (2011)","text":"<p>In theory, these four relative deviations (i.e., \\(f_{dir}\\), \\(f_{rdir}\\), \\(f_{dif}\\) and \\(f_{rdif}\\)) depend on solar illumination geometry and sub-grid topographic distribution. Based on a series of 3D Monte Carlo photon tracing simulations, Lee et al. (2011)<sup>3</sup> built a multiple linear regression parameterization to predict these four relative deviations well. The parameterization of Lee et al. (2011)<sup>3</sup> uses four variables that include the standard deviation of elevation (\\(\\sigma_h\\)) within a grid cell, grid-averaged values of cosine of the local solar incident angle (\\(\\mu\\)), sky view factor (\\(\\overline{V_d}\\)), and terrain configuration factor (\\(\\overline{C_T}\\)). Lee et al. (2011)<sup>3</sup> parameterization is given as follows:</p> \\[\\begin{bmatrix} f_{dir} \\\\ f_{dif} \\\\ f_{rdir} \\\\ f_{rdif} \\end{bmatrix} = \\mathbf{A} \\cdot  \\begin{bmatrix} \\overline{\\mu} \\\\ \\sigma_h \\\\ \\overline{V_d} \\\\ \\overline{C_T} \\\\ 1 \\end{bmatrix} \\] <p>where \\(\\mathbf{A}\\) represents the fitted parameter matrix, which was obtained based on the data generated by the 3D Monte Carlo simulations. The sky view factor (\\(V_d\\)) represents the portion of visible sky limited by surrounding terrain<sup>4</sup>, while the terrain configuration factor (\\(C_T\\)), the counterpart of the sky view factor, represents the portion of surrounding terrain which is visible to the ground target<sup>5</sup>. For an unobstructed infinite slope with the slope of \\(\\alpha\\) and aspect of \\(\\beta\\) and a given solar illumination geometry (i.e., solar zenith angle, \\(SZA\\), and solar azimuth angle, \\(SAA\\)), the cosine of the local solar incident angle (\\(\\mu\\)) can be calculated by</p> \\[ \\mu = \\cos(SZA) \\cos(\\alpha) + \\sin(SZA) \\sin(\\alpha) \\cos(SAA-\\beta) \\] <p>The \\(SZA\\) and \\(SAA\\) are assumed to be constant within a grid cell, but \\(\\alpha\\) and \\(\\beta\\) vary within a grid cell. The grid cell average solar incident angle, , can be expressed as follows:</p> \\[ \\begin{eqnarray} \\overline{\\mu} &amp;=&amp; \\overline{\\cos(SZA) \\cos(\\alpha)} + \\overline{\\sin(SZA) \\sin(\\alpha) \\cos(SAA-\\beta)} \\nonumber \\\\ &amp;=&amp; \\cos(SZA)  \\overline{\\cos(\\alpha)} +  \\sin(SZA) \\cos(SAA) + \\overline{\\sin(\\alpha) \\cos(\\beta)} + \\nonumber \\\\ &amp; &amp; \\sin(SZA) \\sin(SAA) + \\overline{\\sin(\\alpha) \\sin(\\beta)} \\end{eqnarray} \\] <p>where overlines represent grid-averaged values. To further improve the regression parameterization, \\(\\mu\\), \\(V_d\\), and \\(C_T\\) are normalized by \\(\\cos(\\alpha)\\). The land surface albedo is adjusted, instead of modifying incoming solar radiation, to maintain the surface energy conservation and the consistency between the surface and the first levels of atmosphere above the surface (Lee et al., 2015). Specifically, to keep the absorbed solar radiation of the ground surface unchanged, Lee et al. (2015) built the relationship between direct (\\(\\alpha_{dir}^{TOP}\\)) and diffuse (\\(\\alpha_{dif}^{TOP}\\)) albedo over mountains and those (\\(\\alpha_{dir}^{PP}\\) and \\(\\alpha_{dif}^PP\\)) over flat surfaces as follows:</p> \\[ \\begin{eqnarray} F_{dir}^{PP} (1 - \\alpha_{dir}^{TOP}) &amp;=&amp; (F_{dir}^{TOP} + F_{rdir}^{TOP})(1 - \\alpha_{dir}^{PP}) \\label{eqn_fdir_pp} \\\\ F_{dif}^{PP} (1 - \\alpha_{dif}^{TOP}) &amp;=&amp; (F_{dif}^{TOP} + F_{rdif}^{TOP})(1 - \\alpha_{dif}^{PP}) \\label{eqn_fdif_pp} \\end{eqnarray} \\] <p>Substituting Eqns \\eqref{eqn_fdir}-\\eqref{eqn_frdif} into Eqs \\eqref{eqn_fdir_pp}-\\eqref{eqn_fdif_pp} leads to</p> \\[ \\begin{eqnarray} \\alpha_{dir}^{TOP} &amp;=&amp; 1 - (1 + f_{dir} + f_{rdir}) (1 - \\alpha_{dir}^{PP}) \\label{eqn_alb_dir_top} \\\\ \\alpha_{dif}^{TOP} &amp;=&amp; 1 - (1 + f_{dif} + f_{rdif}) (1 - \\alpha_{dif}^{PP}) \\label{eqn_alb_dif_top} \\end{eqnarray} \\] <p>The parameterizations represented by Eqs. \\eqref{eqn_linear_reg}, \\eqref{eqn_alb_dir_top}, and \\eqref{eqn_alb_dif_top} are implemented in ELM to account for the sub-grid topographic effects on solar radiation fluxes.</p> <ol> <li> <p>Dalei Hao, Gautam Bisht, Yu Gu, Wei-Liang Lee, Kuo-Nan Liou, and L Ruby Leung. A parameterization of sub-grid topographical effects on solar radiation in the e3sm land model (version 1.0): implementation and evaluation over the tibetan plateau. Geoscientific Model Development, 14(10):6273\u20136289, 2021. doi:https://doi.org/10.5194/gmd-14-6273-2021.\u00a0\u21a9</p> </li> <li> <p>K. Oleson, D. Lawrence, G. Bonan, B. Drewniak, M. Huang, C. Koven, Z. M. Subin, and S. C. Swenson. Technical description of version 4.5 of the community land model (clm), ncar technical note. Technical Report NCAR/TN-503+ STR, National Center for Atmospheric Research (NCAR), Boulder, CO, USA, 2013. doi:https://doi.org/10.5065/D6RR1W7M.\u00a0\u21a9</p> </li> <li> <p>Wei-Liang Lee, KN Liou, and Alex Hall. Parameterization of solar fluxes over mountain surfaces for application to climate models. Journal of Geophysical Research: Atmospheres, 2011. doi:https://doi.org/10.1029/2010JD014722.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Klemen Zak\u0161ek, Kristof O\u0161tir, and \u017diga Kokalj. Sky-view factor as a relief visualization technique. Remote sensing, 3(2):398\u2013415, 2011. doi:https://doi.org/10.3390/rs3020398.\u00a0\u21a9</p> </li> <li> <p>Jeff Dozier and James Frew. Rapid calculation of terrain parameters for radiation modeling from digital elevation data. IEEE Transactions on geoscience and remote sensing, 28(5):963\u2013969, 1990. doi:https://doi.org/10.1109/36.58986.\u00a0\u21a9</p> </li> </ol>"},{"location":"ELM/user-guide/","title":"ELM User's Guide","text":"<p>This User's Guide describes how to set up and run ELM.</p>"},{"location":"ELM/user-guide/#steps-to-build-and-run-elm","title":"Steps to build and run ELM","text":"<p>A step-by-step instruction on how to run fully coupled E3SM can be found here. Here we describe running ELM driven by atmospheric forcings provided via the data atmosphere (DATM) model for configurations that are used in the E3SM water cycle v3 campaign.</p> <p>The water cycle campaigns of E3SM v1 and v2 used ELM's satellite phenology mode (SP-mode) in which a prescribed leaf area index is used in ELM. However, the E3SM v3 water cycle campaign uses an interactive phenology by including an active biogeochemistry (BGC) cycle in ELM. Additionally, a parameterization of sub-grid topographical effects on solar radiation is included within ELM.</p>"},{"location":"ELM/user-guide/#scientifically-supported-compsets","title":"Scientifically supported compsets","text":"<p>The land-only compsets are referred to as \"I\"-compset and are supported for the following time periods: pre-industrial (1850) and historical transient (20TR). Additionally, multiple atmospheric forcing datasets can be used to drive the ELM simulations. The supported compsets are:</p> <ol> <li><code>I1850GSWCNPRDCTCBCTOP</code>: Pre-industrial ELM simulation using atmospheric forcings from GSWP3 reanalysis dataset</li> <li><code>I20TRGSWCNPRDCTCBCTOP</code>: Historical ELM simulation using GSWP atmospheric forcings with time varying greenhouse gas forcing and land use, land cover dataset (year 1850-2014).</li> </ol> <p>The E3SM coupler output forcings are most commonly used as an offline land model spinup step, in preparation for a fully-coupled E3SM experiment.</p>"},{"location":"ELM/user-guide/#supported-grid","title":"Supported grid","text":"<p>The <code>r05_r05</code> is the supported grid resolution for performing offline ELM simulation.</p>"},{"location":"ELM/user-guide/#customizing-runs","title":"Customizing runs","text":"<p>Few useful changes to <code>user_nl_elm</code></p>"},{"location":"ELM/user-guide/#changing-monthly-output-file","title":"Changing monthly output file","text":"<p>ELM by default outputs monthly history file in <code>*elm.h0.**.nc</code> files that include many variables (&gt;200). At times, many of the default output variables may not be of interest, thus one could remove all default variables (via <code>hist_empty_htapes</code>) and only include select variables (via <code>hist_fincl1</code>) to the monthly history files by</p> <pre><code>   &amp;elm_inparm\n     hist_empty_htapes = .true.\n     hist_fincl1 = 'TG', 'TV', 'FSA'\n   /\n</code></pre>"},{"location":"ELM/user-guide/#saving-additional-output-files","title":"Saving additional output files","text":"<p>ELM can output additional history files (such as <code>*elm.h1.*.nc</code>, <code>*elm.h2.*.nc</code>) that have different temporal averaging (e.g. daily, hourly, every model timestep) via <code>hist_nhtfrq</code> where</p> <ul> <li><code>-24</code> corresponds to daily average</li> <li><code>-1</code> corresponds to hourly average</li> <li><code>0</code> corresponds to monthly average</li> <li><code>1</code> corresponds to each model time step</li> </ul> <p>The number of time slices in these additional files can be controlled vai <code>hist_mfilt</code>.</p> <pre><code>   &amp;elm_inparm\n     hist_fincl2 = 'TG'\n     hist_fincl3 = 'TV'\n     hist_fincl4 = 'TG', 'TV', 'FSA'\n     hist_nhtfrq = 0, -24, -1, 1\n     hist_mfilt  = 12, 30, 24, 48\n   /\n</code></pre> <p>Using the above-mentioned settings:</p> <ul> <li>Each <code>*.elm.h1.*.nc</code> will include 30 daily average values of <code>TG</code></li> <li>Each <code>*.elm.h2.*.nc</code> will include 24 hourly average values of <code>TV</code></li> <li>Each <code>*.elm.h3.*.nc</code> will include 48 values of <code>TG</code>, <code>TV</code>, and <code>FSA</code> at   each model time step, which is typically is 30 min.</li> </ul>"},{"location":"ELM/user-guide/#running-with-fates","title":"Running with FATES","text":"<p>FATES can be run in various modes with ELM through the use of namelist settings. The FATES User's Guide section on namelist options provides guidance on enabling these different FATES run modes.</p>"},{"location":"ELM/user-guide/#create-land-surface-dataset","title":"Create land surface dataset","text":"<p>A new surface dataset for ELM is generated using <code>mksurfdata_map</code> and the notes about it are available here</p>"},{"location":"ELM/user-guide/#generate-land-initial-condition","title":"Generate land initial condition","text":"<p>Initial ELM condition can be generated using <code>interpinic</code> and the notes about it are available here.</p>"},{"location":"ELM/user-guide/fates/","title":"FATES","text":"<p>FATES (Functionally Assembled Terrestrial Ecosystem Simulator) is a numerical terrestrial ecosystem model hat can be utilized as a component with various host land models such as ELM.  It is incorporated as an external module, the development of which is primarily supported by the Department of Energy\u2019s Office of Science, through the Next Generation Ecosystem Experiment - Tropics (NGEE-T) project.</p> <p>The FATES code is hosted online through a github repository at https://github.com/NGEET/fates.</p>"},{"location":"ELM/user-guide/fates/#technical-document","title":"Technical Document","text":"<p>The full FATES documentation detailing the scientific underpinnings of the model can be found in the FATES Technical Document hosted on ReadTheDocs.</p>"},{"location":"ELM/user-guide/fates/#users-and-developers-guide","title":"User's and Developer's Guide","text":"<p>The FATES team also provides a User's guide and a Developer's guide also hosted on ReadTheDocs.  Both guides and the technical documentation can be reached from the top level User's Guide</p>"},{"location":"ELM/user-guide/interpinic/","title":"Creating an ELM initial condition file","text":"<p>An ELM initial condition (IC) file can be created by remapping an existing IC file from one resolution to another using the <code>interpinic</code>, located at <code>components/elm/tools/interpinic</code>. An ELM IC file is in the same format as an ELM restart file. The composet of the remapped IC file will be the same as that of the input IC file. So, for a new ELM SP-mode IC file, use an ELM input file corresponding to the SP-mode.</p> <p>The steps involved in creating a new IC files are as follows:</p> <ol> <li>Identifying an input ELM IC or restart file that will be remapped.</li> <li>Obtaining an ELM restart file at the new resolution.</li> <li>Compiling <code>interpinic</code> on the machine of interest.</li> <li>Running <code>interpinic</code> to perform the interpolation.</li> </ol> <p>The notes below provide an example of creating 1850 ELM IC file for the NARRM grid using E3SM v3 LR piControl from year = 0101. These notes are provided for Chrysalis.</p>"},{"location":"ELM/user-guide/interpinic/#1-identification-of-the-input-elm-ic-file","title":"1. Identification of the input ELM IC file","text":"<p>The identified input land condition file for this case is the following:</p> <pre><code>/lcrc/group/e3sm2/ac.golaz/E3SMv3/v3.LR.piControl/archive/rest/0101-01-01-00000/v3.LR.piControl.elm.r.0101-01-01-00000.nc\n</code></pre>"},{"location":"ELM/user-guide/interpinic/#2-obtaining-an-elm-restart-file","title":"2. Obtaining an ELM restart file","text":"<p>Using an existing NARRM land IC and making a copy of it</p> <pre><code>cd components/elm/tools/interpinic\n\ncp /lcrc/group/e3sm/data/inputdata/lnd/clm2/initdata_map/elmi.v3-NARRM.northamericax4v1pg2_r025_IcoswISC30E3r5.1870-01-01-00000.c20240704.nc \\\nelmi.v3-NARRM.northamericax4v1pg2_r025_IcoswISC30E3r5.1850-01-01-00000.c`date \"+%Y%m%d\"`.nc\n</code></pre>"},{"location":"ELM/user-guide/interpinic/#3-compiling-interpinic","title":"3. Compiling <code>interpinic</code>","text":"<pre><code># Load relevant modules\ncd &lt;e3sm-dir&gt;\neval $(./cime/CIME/Tools/get_case_env)\n\n# change directory\ncd components/elm/tools/interpinic/src\n\nexport USER_LDFLAGS=\"-L$NETCDF_C_DIR/lib -lnetcdf -L$NETCDF_F_DIR/lib -lnetcdff  -L$HDF5_DIR/lib -lhdf5\"\n\nUSER_FC=ifort LIB_NETCDF=\"`nc-config --flibs`\" INC_NETCDF=\"`nf-config --includedir`\" make VERBOSE=1\n\ncd ../\n</code></pre>"},{"location":"ELM/user-guide/interpinic/#4-run-interpinic","title":"4. Run <code>interpinic</code>","text":"<p>The <code>interpinic</code> can then be run via the following batch job (e.g., <code>remap.r025_RRSwISC6to18E3r4.1850.batch</code>) to generate the initial condition.</p> <pre><code>&gt;cat remap.r025_RRSwISC6to18E3r4.1850.batch\n\n#!/bin/sh\n#SBATCH  --job-name=remap\n#SBATCH  --nodes=1\n#SBATCH  --exclusive\n#SBATCH  --time 24:00:00\n#SBATCH  -p slurm\n#SBATCH  --account esmd\n\n# Load relevant modules.\ncd &lt;e3sm-dir&gt;\neval $(./cime/CIME/Tools/get_case_env)\n\n# Change dir to `interpinic`\ncd components/elm/tools/interpinic/\n\nsrun -n 1 ./interpinic \\\n-i /lcrc/group/e3sm2/ac.golaz/E3SMv3/v3.LR.piControl/archive/rest/0101-01-01-00000/v3.LR.piControl.elm.r.0101-01-01-00000.nc \\\n-o elmi.v3-NARRM.northamericax4v1pg2_r025_IcoswISC30E3r5.1850-01-01-00000.c20240903.nc\n</code></pre>"},{"location":"ELM/user-guide/surface_dataset/","title":"Creating an ELM surface dataset","text":"<p>The notes describe the steps in creating an ELM surface dataset at 0.5x0.5 resolution for 1950 on Perlmutter.</p>"},{"location":"ELM/user-guide/surface_dataset/#1-load-the-appropriate-modules","title":"1. Load the appropriate modules","text":"<pre><code>cd &lt;e3ms-dir&gt;\neval $(./cime/CIME/Tools/get_case_env)\n</code></pre>"},{"location":"ELM/user-guide/surface_dataset/#2-compile-mksurfdata_map","title":"2. Compile <code>mksurfdata_map</code>","text":"<pre><code>cd components/elm/tools/mksurfdata_map/src/\n\nmake clean\nexport USER_LDFLAGS=\"-L$NETCDF_DIR/lib -lnetcdf -lnetcdff -lnetcdf_intel\"\nexport USER_LDFLAGS=$USER_LDFLAGS\" -L$HDF5_DIR/lib -lhdf5 -lhdf5_fortran -lhdf5_hl_intel -lhdf5hl_fortran_intel\"\n\nUSER_FC=ifort LIB_NETCDF=\"`nc-config --flibs`\" INC_NETCDF=\"`nf-config --includedir`\" make VERBOSE=1\n</code></pre>"},{"location":"ELM/user-guide/surface_dataset/#build-the-namelist","title":"Build the namelist","text":"<p>This step assumes that the resolution for which the new surface dataset is being created is a supported resolution. If the surface dataset is being created for an unsupported resolution, 16 mapping files will have to be created to map the raw datasets onto this unsupported resolution. The <code>namelist</code> file with default number of glaciers (equal to zero) can be generated as:</p> <pre><code>cd ../\n\nRES=0.5x0.5\nYR=1950\nDIN_LOC_ROOT=/global/cfs/cdirs/e3sm/inputdata\n\n./mksurfdata.pl -res $RES -years $YR -d -dinlc $DIN_LOC_ROOT\n</code></pre> <p>An example of generating the namelist for 0.25 deg (<code>r025</code>) resolution for 1980 with 10 glacier layers is as follows:</p> <pre><code>RES=r025\nYR=1980\nDIN_LOC_ROOT=/global/cfs/cdirs/e3sm/inputdata\n\n./mksurfdata.pl -res $RES -years $YR -d -dinlc $DIN_LOC_ROOT -glc_nec 10\n</code></pre>"},{"location":"ELM/user-guide/surface_dataset/#run-mksurfdata_map-via-an-interactive-job","title":"Run <code>mksurfdata_map</code> via an interactive job","text":"<pre><code>salloc --nodes 1 --qos interactive --time 01:00:00 --constraint cpu --account e3sm\n\nsrun -n 1 ./mksurfdata_map &lt; namelist\n</code></pre>"},{"location":"MOSART/","title":"Model for Scale Adaptive River Transport (MOSART)","text":"<p>MOSART is the river model of E3SM. It routes the runoff genrated by ELM and provides freshwater input to the ocean model.</p> <ul> <li>The MOSART User Guide explains how to control MOSART when its running within E3SM</li> <li>The MOSART Developer Guide explains MOSART data structures and how to develop new code.</li> <li>The MOSART Technical Guide explains the science behind MOSART's code</li> </ul>"},{"location":"MOSART/dev-guide/","title":"MOSART Developer's Guide","text":"<p>This guide provides MOSART data structures and how to develop new code for MOSART.</p> <p>Coming soon...</p>"},{"location":"MOSART/tech-guide/","title":"MOSART Technical Guide","text":"<p>This guide provides scientific and technical details about MOSART.</p>"},{"location":"MOSART/tech-guide/#physics","title":"Physics","text":"<p>MOSART is a one-dimension river transport model that is designed for river routing at local, regional, and global scales (Li et al., 2013). Its primary function is to supply freshwater inputs to ocean models within coupled Earth System Models.</p> <p>MOSART divides each spatial unit, such as a latitude/longitude grid or a sub-basin, into three hydrologic categories: hillslopes, tributaries, and a main channel (see figure below). The hillslopes receive runoff and send into tributaries, which then converge into a single main channel. This main channel connects adjacent upstream and downstream units through the river network. MOSART simplifies the multiple tributaries within a spatial unit into a single hypothetical sub-network channel, which has a transport capacity equivalent to all combined tributaries.</p> <p></p> <ul> <li> <p>Hillslope Routing: Within each spatial unit, surface runoff is directed as overland flow to the sub-network channel, while subsurface runoff enters the sub-network channel directly.</p> </li> <li> <p>Sub-network Channel Routing: This channel aggregates water from the hillslopes, routes it through the channel system, and discharges it into the main channel.</p> </li> <li> <p>Main Channel Routing: The main channel collects water from the sub-network channel and any inflow from upstream spatial units, eventually discharging the accumulated water downstream to the next spatial unit or directly to the ocean.</p> </li> </ul>"},{"location":"MOSART/tech-guide/#parameters","title":"Parameters","text":""},{"location":"MOSART/tech-guide/#main-parameters-required-in-the-mosart-parameter-file","title":"Main parameters required in the MOSART parameter file","text":"Variable Name Description [unit] fdir Flow direction [unitless] lat Latitude at cell center [degree] lon Longitude at cell center [degree] frac fraction of the unit draining to the outlet [0-1] rslp main channel slope [unitless] rlen main channel length [m] tslp mean tributary channel slope averaged through the unit [unitless] area local drainage area [m^2] areaTotal total upstream drainage area, local unit included; multi flow direction [m^2] areaTotal2 total upstream drainage area, local unit included; single flow direction [m^2] rdep bankfull depth of main channel [m] rwid bankfull width of main channel [m] rwid0 floodplain width linked to main channel [m] gxr drainage density [m^-1] hslp topographic slope [unitless] twid bankfull width of local tributaries [m] nr Manning''s roughness coefficient for main channel flow [unitless] nt Manning''s roughness coefficient for tributary channel flow [unitless] nh Manning''s roughness coefficient for overland flow [unitless]"},{"location":"MOSART/tech-guide/#parameters-required-by-additional-mosart-features","title":"Parameters required by additional MOSART features","text":"<p>Coming soon.</p>"},{"location":"MOSART/user-guide/","title":"MOSART User's Guide","text":"<p>This guide describes how to set up and run MOSART.</p>"},{"location":"MOSART/user-guide/#steps-to-build-and-run-mosart","title":"Steps to build and run MOSART","text":"<p>A step-by-step instruction on how to run fully coupled E3SM can be found here. Here we describe running MOSART driven by runoff forcings provided via the data land mode(DLND). Although the default runoff forcing is predefined by the DLND compsets, the users is able to use other runoff forcing to drive MOSART.</p> <p>MOSART in the water cycle campaigns of E3SM v1, v2, and v3 was.</p>"},{"location":"MOSART/user-guide/#scientifically-supported-compsets","title":"Scientifically supported compsets","text":"<p>The mosart-only compsets are supported for multiple runoff forcing datasets that covers different domains and time periods:</p> <ol> <li><code>RMOSQIAN</code>: A 57-year (1948-2004, no leap year) global Qian runoff forcings. The native resolutions are 192*288 at daily time scale. The path to the stream file is <code>$input_data_dir/lnd/dlnd7/hcru_hcru/QIAN.daily.1948-2004.nc</code></li> <li><code>RMOSGPCC</code>: A one-year (1979) global GPCC runoff forcing. The native resoultions are 192*288 at daily time scale. The path to the stream file is <code>$input_data_dir/lnd/dlnd7/hcru_hcru/GPCC.daily.nc</code></li> <li><code>RMOSNLDAS</code>: A one-year (1975) CLM runoff forcing for NLDAS domain (North America between 25N and 53N) and spatial resolution (1/8th degree). The time scale is 3-hourly. The path to the stream file is <code>$input_data_dir/lnd/dlnd7/NLDAS/mosart_nldas_hist_1975.clm2.h1.1975-01-01-00000.nc</code>.</li> </ol>"},{"location":"MOSART/user-guide/#supported-grid","title":"Supported grid","text":"<p>The <code>r05_r05</code>, <code>NLDAS_NLDAS</code>, and <code>MOS_USRDAT</code> are the supported grid resolutions for performing offline MOSART simulations.</p>"},{"location":"MOSART/user-guide/#user-defined-runoff-forcing","title":"User-defined runoff forcing","text":"<p>Once the case is created based on the above compsets. The users can create a <code>user_dlnd.streams.txt</code> file in the <code>case_scripts</code> directory following the format below:</p> <pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;file id=\"stream\" version=\"1.0\"&gt;\n&lt;dataSource&gt;\n  GENERIC\n&lt;/dataSource&gt;\n&lt;domainInfo&gt;\n  &lt;variableNames&gt;\n    time     time\n    lon      lon\n    lat      lat\n  &lt;/variableNames&gt;\n  &lt;filePath&gt;\n    /path/to/forcing/file\n  &lt;/filePath&gt;\n  &lt;fileNames&gt;\n    Runoff_forcing.nc\n  &lt;/fileNames&gt;\n&lt;/domainInfo&gt;\n&lt;fieldInfo&gt;\n   &lt;variableNames&gt;\n    QDRAI     rofsub\n    QOVER     rofsur\n   &lt;/variableNames&gt;\n   &lt;filePath&gt;\n    /path/to/forcing/file\n   &lt;/filePath&gt;\n   &lt;fileNames&gt;\n    Runoff_forcing.nc\n   &lt;/fileNames&gt;\n   &lt;offset&gt;\n    0\n   &lt;/offset&gt;\n&lt;/fieldInfo&gt;\n&lt;/file&gt;\n</code></pre>"},{"location":"MOSART/user-guide/#customizing-runs","title":"Customizing runs","text":"<p>For default river routing simulation in MOSART (i.e. natural flow routing), one parameter file defined by <code>frivinp_rtm</code> is required. The geographic domain and spatial resolution must match the domain defined in the simulation case. Additional parameter/input files will be needed for some extra features.</p>"},{"location":"MOSART/user-guide/#output-variables-and-frequency","title":"Output variables and frequency","text":"<p>MOSART by default outputs monthly history file in <code>*mosart.h0.**.nc</code> files that include all key variables. User could choose to output additional history files (such as <code>*mosart.h1.*.nc</code>, <code>*mosart.h2.*.nc</code>) that have different temporal averaging (e.g. daily, hourly, every model timestep) via <code>rtmhist_nhtfrq</code> where</p> <ul> <li><code>-24</code> corresponds to daily average</li> <li><code>-1</code> corresponds to hourly average</li> <li><code>0</code> corresponds to monthly average</li> <li><code>1</code> corresponds to each model time step</li> </ul> <p>The number of time slices in these additional files can be controlled vai <code>rtmhist_mfilt</code>.</p> <pre><code>   &amp;mosart_inparm\n     rtmhist_fincl2 = 'FLOODPLAIN_FRACTION'\n     rtmhist_fincl3 = 'RIVER_DISCHARGE_OVER_LAND_LIQ'\n     rtmhist_nhtfrq = 0, -24, -1\n     rtmhist_mfilt  = 12, 30, 24\n   /\n</code></pre> <p>Using the above-mentioned settings:</p> <ul> <li>Each <code>*.mosart.h1.*.nc</code> will include 30 daily average values of <code>FLOODPLAIN_FRACTION</code></li> <li>Each <code>*.mosart.h2.*.nc</code> will include 24 hourly average values of <code>RIVER_DISCHARGE_OVER_LAND_LIQ</code></li> </ul>"},{"location":"MOSART/user-guide/#additional-options","title":"Additional options","text":"<p>The table below lists avaiable options defined by users through <code>user_nl_mosart</code>.</p> Flag Name Description <code>routingmethod</code> <code>1</code> for kenematic wave routing (default); <code>2</code> for diffusion wave routing <code>wrmflag</code> <code>.true.</code> for active water management; <code>.false.</code> for no water management (default) <code>inundflag</code> <code>.true.</code> for active flood inundation; <code>.false.</code> for no flood inundation (default) <code>sediflag</code> <code>.true.</code> for active sediment transport; <code>.false.</code> for no sediment transport (default) <code>heatflag</code> <code>.true.</code> for active heat transport; <code>.false.</code> for no heat transport (default)"},{"location":"MOSART/user-guide/#additional-mosart-features","title":"Additional MOSART features","text":"<p>There are some options only made available for specific features. They can be defined through <code>user_nl_mosart</code>.</p>"},{"location":"MOSART/user-guide/#water-management","title":"Water management","text":"<ul> <li> <p>Parameter file: when water management is active, one additional parameter file <code>parafile</code> is required. This file defines the location and specifics for the dams/reservoirs simulated in this scheme.</p> </li> <li> <p><code>damconstructionflag</code>: <code>0</code> - dam always exist; <code>1</code> - dam construction year is considered.</p> </li> <li> <p><code>externaldemandflag</code>: <code>0</code> - no external water demand for the WM scheme; <code>1</code> - external water demand files are required.</p> </li> <li> <p>Note if <code>externaldemandflag</code> is set to <code>1</code>, paths to monthly water demand files are requried in the <code>usr_nl_mosart</code> file through <code>demandpath = '/path/to/demand/files/</code>.</p> </li> </ul>"},{"location":"MOSART/user-guide/#flood-inundation","title":"Flood inundation","text":"<ul> <li> <p><code>opt_eleprof</code>: <code>1</code> - use actural elevation profiles derived from DEM; <code>2</code> - use hypothetical elevation profile.</p> </li> <li> <p>Note if <code>opt_eleprof</code> is set to <code>1</code>, the elevation profile data must be included in the MOSART parameter file.</p> </li> </ul>"},{"location":"MOSART/user-guide/#sediment-transport","title":"Sediment transport","text":"<ul> <li>If sediment feature is activated, D50 data must be included in the MOSART parameter file. In addition, <code>rof_sed = .true.</code> has to be defined in <code>./user_nl_cpl</code> to allow sediment flux passing into the river model through the coupler.</li> </ul>"},{"location":"MPAS-Ocean/","title":"Model for Prediction Across Scales-Ocean","text":"<p>The Model for Prediction Across Scales-Ocean (MPAS-Ocean) is the ocean component of the Energy Exascale Earth System Model (E3SM), developed by the U.S. Department of Energy.</p> <ul> <li>The MPAS-Ocean User Guide explains how to run and customize MPAS-Ocean within E3SM.</li> <li>The MPAS-Ocean Developer Guide explains MPAS-Ocean data structures and how to write new code.</li> <li>The MPAS-Ocean Technical Guide explains the science behind MPAS-Ocean.</li> </ul>"},{"location":"MPAS-Ocean/dev-guide/","title":"MPAS-Ocean Developer Guide","text":"<p>The E3SM developer guide may be found at https://e3sm.org/model/running-e3sm/developing-e3sm/.</p> <p>The MPAS developers guide is at https://mpas-dev.github.io/files/documents/MPAS-DevelopersGuide.pdf.</p>"},{"location":"MPAS-Ocean/tech-guide/","title":"MPAS-Ocean Technical Guide","text":"<p>This Technical Guide describes the governing equations, physics, and numerical discretizations of MPAS-Ocean.</p>"},{"location":"MPAS-Ocean/tech-guide/#guides-design-documents-and-documentation","title":"Guides, Design Documents, and documentation","text":"<p>MPAS-Ocean may be run as either a stand-alone model, or within the E3SM coupled climate model. The MPAS-Ocean code for both stand-alone and coupled is housed in the repository https://github.com/E3SM-Project/E3SM within the directory <code>components/mpas-ocean</code>. The stand-alone executable may be built within that directory using the make command with the required libraries, as described in Chapter 1 of the User's Guide.</p> <p>The MPAS-Ocean User's Guide provides a description of the MPAS Framework in Part I, the Governing equations for MPAS-Ocean in Chapter 8, and describes the physics behind each term and parameterization in chapter 11.</p> <p>All new features are created with design documents. The location of these documents have moved over the years, but can still be found in these locations:</p> <ol> <li>MPAS Documents repository</li> <li>E3SM repository MPAS-Ocean docs</li> <li>Documents for the new Omega model are similar to MPAS-Ocean and may be found in the Omega documentation.</li> </ol> <p>All test cases are housed in the Compass repository and, more recently, the Polaris repository. The corresponding documentation is housed in the Compass docs and Polaris docs pages.</p>"},{"location":"MPAS-Ocean/tech-guide/#publications","title":"Publications","text":"<p>Beyond the documentation, there are many publications that describe the inner workings of MPAS-Ocean:</p> <p>Ringler, T., Petersen, M., Higdon, R.L., Jacobsen, D., Jones, P.W., Maltrud, M., 2013. A multi-resolution approach to global ocean modeling. Ocean Modelling 69, 211-232.</p> <p>Petersen, M.R., D.W. Jacobsen, T.D. Ringler, M.W. Hecht, M.E. Maltrud, Evaluation of the arbitrary Lagrangian\u2013Eulerian vertical coordinate method in the MPAS-Ocean model, Ocean Modelling, Volume 86, February 2015, Pages 93-113, ISSN 1463-5003.</p> <p>Petersen, M. R., Asay\u2010Davis, X. S., Berres, A. S., Chen, Q., Feige, N., Hoffman, M. J., et al. (2019). An evaluation of the ocean and sea ice climate of E3SM using MPAS and interannual CORE\u2010II forcing. Journal of Advances in Modeling Earth Systems, 11, 1438\u2013 1458.</p>"},{"location":"MPAS-Ocean/user-guide/","title":"MPAS-Ocean Quick Start","text":"<p>This MPAS-Ocean Quick Start Guide describes how to set up and run MPAS-Ocean within E3SM. More details can be found in the MPAS-Ocean User's Guide, as well as instructions on running the stand-alone ocean model.</p>"},{"location":"MPAS-Ocean/user-guide/#steps-to-build-and-run-mpas-ocean","title":"Steps to build and run MPAS-Ocean","text":"<p>Step-by-step instructions on how to run E3SM can be found at https://docs.e3sm.org/running-e3sm-guide.</p> <p>This MPAS-Ocean Quick Start guide provides the additional information to run configurations that are not fully-coupled (e.g. C-case: active ocean only; G-case: active ocean and sea ice) within E3SM. This is done by changing the compset. Certain parameters, including the mesh, namelist parameters, input data files, and output file specifcations can also be modified. These are described below as ways to customize runs.</p> <p>Templates of 1-month example E3SM run-scripts for a G-case and C-case are provided. Key information for the user to modify includes:</p> <ul> <li><code>MACHINE</code> and <code>PROJECT</code> if applicable</li> <li>Paths for code repository in <code>CODE_ROOT</code> and case directory in <code>CASE_ROOT</code>, which includes the run directory for output.</li> <li>Simulation compsets, resolution and name (see below)</li> <li>Wallclock duration in <code>WALLTIME</code> and simulation duration with <code>STOP_OPTION</code> and <code>STOP_N</code>.</li> </ul> <p>Additional runscript examples can be found here for v3.LR.</p>"},{"location":"MPAS-Ocean/user-guide/#scientifically-supported-compsets-and-meshes","title":"Scientifically supported compsets and meshes","text":""},{"location":"MPAS-Ocean/user-guide/#compsets","title":"Compsets","text":"<p>The compsets below are typical ocean and sea ice-focused compsets supported by E3SM:</p> <p><code>GMPAS-JRA1p5</code> - Active ocean-sea ice configuration forced by data atmosphere based on JRA55 v1.5 (covers 63 years, 1958-2020)</p> <p><code>GMPAS-IAF</code> - Active ocean-sea ice configuration forced by data atmosphere based on CORE-II (covers 62 years, 1948-2009)</p> <p><code>GMPAS-JRA1p5-DIB-DISMF</code> - Active ocean-sea ice configuration forced by JRA55 v1.5 atmosphere (as above), with data iceberg and data ice-shelf melt</p> <p><code>GMPAS-JRA1p5-DIB-PISMF</code> - Active ocean-sea ice configuration forced by JRA55 v1.5 atmosphere (as above), with data iceberg and prognostic ice-shelf melt</p> <p><code>CMPASO-JRA1p4</code> - Active ocean configuration forced by data atmosphere based on JRA55 v1.4 (covers 61 years, 1958-2018)</p> <p><code>CMPASO-IAF</code> - Active ocean configuration forced by data atmosphere based on CORE-II (covers 62 years, 1948-2009)</p> <p>Additional compsets can be found in the mpas-ocean <code>config_compsets.xml</code>. Note that the fully coupled compsets and their aliases can be found in the cime allactive <code>config_compsets.xml</code>. For more information on the schemes used within MPAS-Ocean, refer to the MPAS-Ocean User's Guide.</p> <p>A full list of Compsets in the current repository can be listed using</p> <pre><code>cd cime/scripts\n./query_config --compsets\n</code></pre>"},{"location":"MPAS-Ocean/user-guide/#meshes","title":"Meshes","text":"<p>Some supported meshes for G- and C-cases include:</p> <p><code>TL319_IcoswISC30E3r5</code> - Icosahedral 30 km mesh with ice shelves cavities (wISC), E3SMv3 (E3) revision r5, TL319 is the grid for JRA.</p> <p><code>T62_IcoswISC30E3r5</code> - Icosahedral 30 km mesh with ice shelves cavities (wISC), E3SMv3 (E3) revision r5, T62 is the grid for CORE-II.</p> <p><code>T62_oQU240</code> - Quasi uniform 2-degree ocean mesh, to be used with CORE-II only. Good for rapid testing, used in nightly testing not production runs.  This grid is not scientifically validated .</p> <p>Note: the mesh should be consistent with the compset (e.g. JRA vs CORE). Additional mesh information can be found here.</p> <p>A full list of Meshes in the current repository can be listed using</p> <pre><code>cd cime/scripts\n./query_config --grids\n</code></pre>"},{"location":"MPAS-Ocean/user-guide/#customizing-runs","title":"Customizing runs","text":""},{"location":"MPAS-Ocean/user-guide/#namelist-changes","title":"Namelist changes","text":"<p>Without additional input, E3SM will generate the namelist file <code>mpaso_in</code> in the run directory using the default values for the compset and mesh requested. Namelist parameters can be changed from default values by modifying the <code>user_nl_mpaso</code> file, found in the <code>case_scripts</code> directory. This is done by entering <code>[namelist option] = [changed value]</code> as separate lines in the <code>user_nl_mpaso</code> file. All other options will remain defaults. These changes can be added at run time and will take effect in the next submission.</p> <p>Refer to the MPAS-Ocean User's Guide (Chapter 10) for a comprehensive description of the namelist parameters and the options that they correspond to. Namelist options may also be found in the code repository in the file <code>components/mpas-ocean/src/Registry.xml</code> for general flags, <code>components/mpas-ocean/src/tracer_groups/Registry_*.xml</code> for specific tracer group flags, and <code>components/mpas-ocean/src/analysis_members/Registry_*.xml</code> for analysis member flags.</p>"},{"location":"MPAS-Ocean/user-guide/#example-of-a-namelist-change-via-user_nl_mpaso","title":"Example of a namelist change via <code>user_nl_mpaso</code>","text":"<pre><code> config_GM_closure = 'constant'\n config_gm_constant_kappa = 900\n config_time_integrator = 'split_explicit'\n config_am_timeseriesstatsmonthly_compute_interval = '00-00-01_00:00:00'\n</code></pre> <p>In this example, the namelist changes include changing the eddy closure (first 2 options for the type of closure and a parameter value), switching the time integration scheme, and modifying an analysis member (in this case, the interval from which the monthly analysis member is computed).</p> <p>Reminder: <code>user_nl_mpaso</code> can be empty. All options not specified are defaults (given the compset and mesh). Some options (like interior restoring) require extra fields to be present in the input file.  </p>"},{"location":"MPAS-Ocean/user-guide/#configuring-input-and-output-for-mpas-ocean","title":"Configuring input and output for MPAS-Ocean","text":"<p>The reading and writing of model fields in MPAS is handled by user-configurable streams. A stream represents a fixed set of model fields, together with dimensions and attributes, that are all written or read together to or from the same file or set of files. They are used for reading initial conditions, for writing and reading restart fields, and for writing additional model history fields. Streams are defined in XML configuration files that are created at build time for each model core. The name of this XML file for the ocean core is <code>streams.ocean</code> (the sea ice has a similar <code>streams.seaice</code>). Importantly, the stream file is generated in the run directory during the <code>./case.setup</code> step, but changes made into the run directory will not take effect. To make changes to the output fields, copy the <code>streams.ocean</code> file from the run directory into the<code>case_scripts/SourceMods/src.mpaso/</code> directory. Changes to the stream file made into the <code>SourceMods</code> sub-directory will take effect on the next case submission (there is no need to re-compile after making modifications to the XML file). Alternatively, changes to the streams file can be made directly in the code in <code>components/mpas-ocean/cime_config/buildnml</code>.</p>"},{"location":"MPAS-Ocean/user-guide/#checking-initial-conditions","title":"Checking initial conditions","text":"<p>Key information to check regarding the input data typically include:</p> <pre><code>&lt;immutable_stream name=\"mesh\"\n                  type=\"none\"\n                  io_type=\"pnetcdf\"\n                  filename_template=\"/lcrc/group/e3sm/data/inputdata/ocn/mpas-o/IcoswISC30E3r5/mpaso.IcoswISC30E3r5.20231120.nc\"\n/&gt;\n&lt;immutable_stream name=\"input\"\n                  type=\"input\"\n                  io_type=\"pnetcdf\"\n                  input_interval=\"initial_only\"\n                  filename_template=\"/lcrc/group/e3sm/data/inputdata/ocn/mpas-o/IcoswISC30E3r5/mpaso.IcoswISC30E3r5.20231120.nc\"\n/&gt;\n</code></pre> <p>The <code>mesh</code> filename points to the mesh file used. The <code>input</code> filename points to the file containing the ocean initial conditions (if the run type is <code>initial</code>). The streams file can be large, it is often useful to rely on the search function to navigate it. For larger meshes (millions of horizontal cells) the flag <code>io_type=\"pnetcdf\"</code> must be changed to <code>io_type=\"pnetcdf,cdf5\"</code>.</p>"},{"location":"MPAS-Ocean/user-guide/#checking-and-modifying-the-output-data","title":"Checking and modifying the output data","text":"<p>By default, MPAS-Ocean will output a set of monthly-averaged variables. The streams file can be modified to include additional variables in the existing output files, produce additional output files, or change the output frequency (e.g. high frequency files shifting between daily or 5-daily frequencies).</p> <p>The XML file is organized into blocks describing each stream. Typical streams for output include:</p> <p><code>timeSeriesStatsMonthlyOutput</code> - monthly averaged output</p> <p><code>highFrequencyOutput</code> - high frequency snapshots (not averaged) output with frequency <code>output_interval</code></p> <p>Under each block header is the list of variables (individual variables, variable structure, or variable arrays) that will be output within the relevant stream.</p>"},{"location":"MPAS-Ocean/user-guide/#example-workflow-for-modifying-the-output-fields","title":"Example workflow for modifying the output fields","text":"<ul> <li>copy the <code>streams.ocean</code> file from the run directory to the <code>SourceMods</code> directory (see above)</li> <li>identify the variable name for the variable of interest. You can find the variable name by searching the ocean Registry.xml (in the <code>src</code> directory) or Registry_package.xml in the <code>tracer</code> and <code>analysis_member</code> sub-directories. Note whether the variable of interest is included within a <code>var_array</code> or a <code>var_struct</code>.</li> <li>identify the output stream of interest (e.g. monthly averages, high frequency, others). You can search for a stream name, known output filename, or output interval.</li> <li>check whether the variable of interest is included in the <code>streams.ocean</code> file. Search for the <code>var name</code>, or the <code>var_array</code> and <code>var_struct</code> if applicable. If it is, copy the variable line from other streams into the stream of interest. If it is not included, copy it from the Registry.xml.</li> <li>check whether the relevant stream is turned on. This includes checking that <code>output_interval</code> in the stream header is not <code>None</code>.</li> <li>make further modifications: e.g. you can modify the <code>output_interval</code> for the high-frequency stream. If you are turning on a new stream, remove unnecessary variables from the stream.</li> </ul>"},{"location":"MPAS-Ocean/user-guide/#excerpts-from-a-streamsocean-file","title":"Excerpts from a <code>streams.ocean</code> file","text":"<pre><code>&lt;stream name=\"timeSeriesStatsMonthlyOutput\"\n        type=\"output\"\n        precision=\"single\"\n        io_type=\"pnetcdf\"\n        useMissingValMask=\"true\"\n        filename_template=\"GMPAS-JRA.TL319_IcoswISC30E3r5.anvil.mpaso.hist.am.timeSeriesStatsMonthly.$Y-$M-$D.nc\"\n        filename_interval=\"00-01-00_00:00:00\"\n        reference_time=\"01-01-01_00:00:00\"\n        output_interval=\"00-01-00_00:00:00\"\n        clobber_mode=\"truncate\"\n        packages=\"timeSeriesStatsMonthlyAMPKG\"\n        runtime_format=\"single_file\"&gt;\n\n    &lt;var name=\"daysSinceStartOfSim\"/&gt;\n    &lt;var name=\"binBoundaryMerHeatTrans\"/&gt;\n    &lt;var name=\"binBoundaryZonalMean\"/&gt;\n    &lt;var name=\"ssh\"/&gt;\n    &lt;var_struct name=\"tracers\"/&gt;\n    &lt;var name=\"velocityMeridional\"/&gt;\n    &lt;var name=\"velocityZonal\"/&gt;\n    &lt;var name=\"layerThickness\"/&gt;\n...\n&lt;/stream&gt;\n</code></pre> <pre><code>&lt;stream name=\"highFrequencyOutput\"\n        type=\"output\"\n        precision=\"single\"\n        io_type=\"pnetcdf\"\n        filename_template=\"GMPAS-JRA.TL319_IcoswISC30E3r5.anvil.mpaso.highFrequencyOutput.$Y-$M-$D_$h.$m.$s.nc\"\n        filename_interval=\"00-01-00_00:00:00\"\n        reference_time=\"01-01-01_00:00:00\"\n        output_interval=\"00-00-05_00:00:00\"\n        clobber_mode=\"truncate\"\n        packages=\"highFrequencyOutputAMPKG\"&gt;\n\n    &lt;var name=\"xtime\"/&gt;\n    &lt;var name=\"daysSinceStartOfSim\"/&gt;\n    &lt;var_array name=\"activeTracersAtSurface\"/&gt;\n    &lt;var_array name=\"activeTracersAt250m\"/&gt;\n    &lt;var_array name=\"activeTracersAtBottom\"/&gt;\n    &lt;var name=\"kineticEnergyAtSurface\"/&gt;\n    &lt;var name=\"kineticEnergyAt250m\"/&gt;\n    &lt;var name=\"relativeVorticityAt250m\"/&gt;\n    &lt;var name=\"ssh\"/&gt;\n    &lt;var name=\"pressureAdjustedSSH\"/&gt;\n    &lt;var name=\"boundaryLayerDepth\"/&gt;\n    &lt;var name=\"dThreshMLD\"/&gt;\n    &lt;var name=\"tThreshMLD\"/&gt;\n    &lt;var name=\"columnIntegratedSpeed\"/&gt;\n    &lt;var name=\"barotropicSpeed\"/&gt;\n    &lt;var name=\"landIceFreshwaterFlux\"/&gt;\n    &lt;var name=\"pressureAdjustedSSH\"/&gt;\n    &lt;var name=\"atmosphericPressure\"/&gt;\n&lt;/stream&gt;\n</code></pre> <p>A more comprehensive description of the streams options can be found in Chapter 6 of the MPAS-Ocean User's Guide.</p>"},{"location":"MPAS-seaice/","title":"The E3SM Sea Ice Model (MPAS-seaice)","text":"<p>MPAS-seaice is an unstructured-mesh sea-ice model that uses the Modeling for Prediction Across Scales (MPAS) framework, allowing enhanced horizontal resolution in regions of interest. MPAS-seaice incorporates many of the methods used in the Los Alamos CICE sea-ice model, but adapted to the Spherical Centroidal Vornoi Tesselation (SCVT) meshes used by the MPAS framework.</p> <ul> <li>The MPAS-seaice User's Guide outlines the MPAS Framework, on which MPAS-seaice is built, and Icepack, the column physics submodule in MPAS-seaice, and it provides guidance for controlling MPAS-seaice within E3SM.</li> <li>The MPAS-seaice Technical Guide describes the mesh and major physics components underlying MPAS-seaice code and its coupling to E3SM.</li> <li>The MPAS-seaice Developer's Guide provides additional information relevant for model development, including the Icepack interface and development/testing scripts.</li> </ul>"},{"location":"MPAS-seaice/#icepack","title":"Icepack","text":"<p>MPAS-seaice incorporates the Icepack software package for sea ice column physics, developed by the CICE Consortium, as a submodule. Icepack documentation. provides a complete description of the column physics and instructions for using Icepack as a standalone model. The source code for this documentation is maintained in E3SM's Icepack fork (navigate to the desired branch, then to doc/source/, etc).  This is the documentation associated with the latest Icepack version that has been merged into E3SM, plus any documentation changes made within E3SM itself. This documentation is fully rendered in E3SM's Icepack readthedocs.</p> <p>Guidance for developing Icepack documentation includes instructions for building the readthedocs documentation yourself.</p>"},{"location":"MPAS-seaice/#mpas-seaice-code-structure","title":"MPAS-seaice code structure","text":"<p>Some MPAS-seaice functionality is sourced from the MPAS Framework: <code>E3SM/components/mpas-framework</code>.  In particular, see <code>E3SM/components/mpas-framework/core_seaice</code>.</p> <p>Code structure within the <code>mpas-seaice/</code>component-level directory:</p> Directories Function <code>bld</code> namelist configuration files <code>cime_config</code> build and configuration scripts <code>docs</code> this documentation <code>driver</code> coupling modules <code>src</code> source code for the model physics and output <code>src/analysis_members</code> source code for model output <code>src/column</code> source code for the (original) <code>column_package</code> <code>src/icepack</code> link to the icepack submodule <code>src/model_forward</code> top-level mpas-seaice modules <code>src/shared</code> dynamics and general-purpose modules (e.g. mesh, constants) <code>testing</code> testing scripts"},{"location":"MPAS-seaice/references/","title":"References","text":"<p>Bitz, C. M., and W. H. Lipscomb (1999). An energy-conserving thermodynamic model of sea ice, Journal of Geophysical Research: Oceans, 104(C7), 15,669\u201315,677, doi: 10.1029/1999JC900100.</p> <p>Briegleb, B. P., and B. Light (2007). A Delta-Eddington multiple scattering parameterization for solar radiation in the sea ice component of the Community Climate Sys- tem Model, Tech. Rep. NCAR/TN-472+STR, National Center for Atmospheric Research, Boulder, Colorado USA.</p> <p>Dang, C., C. S. Zender, and M. G. Flanner (2019). Intercomparison and improvement of two-stream shortwave radiative transfer schemes in earth system models for a unified treatment of cryospheric surfaces. The Cryosphere, 13:2325\u20132343. doi:10.5194/tc-13-2325-2019.</p> <p>Dasgupta, G. (2003). Interpolants within convex polygons: Wachpress' shape functions. Journal of Aerospace Engineering, 16, 1\u20138. https://doi.org/10.1061/(ASCE)0893-1321(2003)16:1(1)</p> <p>Dukowicz, J. K., &amp; Baumgardner, J. R. (2000). Incremental remapping as a transport/advection algorithm. Journal of Computational Physics, 160(1), 318\u2013335. https://doi.org/10.1006/jcph.2000.6465</p> <p>Dunavant, D. A. (1985). High degree efficient symmetrical Gaussian quadrature rules for the triangle. International Journal for Numerical Methods in Engineering, 21(6), 1129\u20131148. https://doi.org/10.1002/nme.1620210612</p> <p>Flocco, D., D. L. Feltham, and A. K. Turner (2010). Incorporation of a physically based melt pond scheme into the sea ice component of a climate model, Journal of Geophysi- cal Research: Oceans, 115(C8), doi:10.1029/2009JC005568, C08012.</p> <p>Golaz, J.-C., Caldwell, P. M.,\u2028Van Roekel, L. P., Petersen, M. R., Tang, Q., Wolfe, J. D., et al. (2019). The DOE E3SM coupled model version 1: Overview and evaluation at\u2028standard resolution. Journal of Advances in Modeling Earth\u2028Systems, 11, 2089\u20132129. https://doi.org/10.1029/2018MS001603</p> <p>Golaz, J.-C., Van Roekel, L. P., Zheng, X., Roberts, A. F., Wolfe, J. D., Lin, W., et al. (2022). The DOE E3SM Model version 2: Overview of the physical model and initial model evaluation. Journal of Advances in Modeling Earth Systems, 14, e2022MS003156. https://doi.org/10.1029/2022MS003156</p> <p>Hibler, W. D. III (1979). A dynamic thermodynamic sea ice model. Journal of Physical Oceanography, 9(4), 815\u2013846. https://doi.org/10.1175/1520-0485(1979)009&lt;0815:ADTSIM&gt;2.0.CO;2</p> <p>Holland, M. M., D. A. Bailey, B. P. Briegleb, B. Light, and E. Hunke (2012). Improved sea ice shortwave radiation physics in CCSM4: The impact of melt ponds and aerosols on arctic sea ice, Journal of Climate, 25(5), 1413\u20131430, doi:10.1175/JCLI-D-11-00078.1.</p> <p>Hunke, E., et al. (2018). CICE-Consortium/Icepack. Zenodo. https://doi.org/10.5281/zenodo.1213462</p> <p>Hunke, E. C., &amp; Dukowicz, J. K. (1997). An elastic-viscous-plastic model for sea ice dynamics. Journal of Physical Oceanography, 27(9), 1849\u20131867. https://doi.org/10.1175/1520-0485(1997)027&lt;1849:AEVPMF&gt;2.0.CO;2</p> <p>Hunke, E. C., &amp; Dukowicz, J. K. (2002). The elastic-viscous-plastic sea ice dynamics model in general orthogonal curvilinear coordinates on a sphere\u2014Incorporation of metric terms. Monthly Weather Review, 130(7), 1848\u20131865.</p> <p>Hunke, E. C., Hebert, D. A., &amp; Lecomte, O. (2013). Level-ice melt ponds in the Los Alamos sea ice model, CICE. Ocean Modelling, 71, 26\u201342. https://doi.org/10.1016/j.ocemod.2012.11.008</p> <p>Lipscomb, W. H. (2001). Remapping the thickness distribution in sea ice models, Journal of Geophysical Research: Oceans, 106(C7), 13,989\u201314,000, doi:10.1029/2000JC000518.</p> <p>Lipscomb, W. H., &amp; Hunke, E. C. (2004). Modeling sea ice transport using incremental remapping. Monthly Weather Review, 132(6), 1341\u20131354.</p> <p>Lipscomb, W. H., Hunke, E. C., Maslowski, W., &amp; Jakacki, J. (2007). Ridging, strength, and stability in high-resolution sea ice models. Journal of Geophysical Research, 112. C03S91. https://doi.org/10.1029/2005JC003355</p> <p>Lipscomb, W. H., &amp; Ringler, T. D. (2005). An incremental remapping transport scheme on a spherical geodesic grid. Monthly Weather Review, 133(8), 2335\u20132350. https://doi.org/10.1175/MWR2983.1</p> <p>Turner, A. K., and E. C. Hunke (2015). Impacts of a mushy-layer thermodynamic ap- proach in global sea-ice simulations using the CICE sea-ice model, Journal of Geophys- ical Research: Oceans, 120(2), 1253\u20131275, doi:10.1002/2014JC010358.</p> <p>Turner, A. K., E. C. Hunke, and C. M. Bitz (2013). Two modes of sea-ice gravity drainage: A parameterization for large-scale modeling, Journal of Geophysical Research: Oceans, 118(5), 2279\u20132294, doi:10.1002/jgrc.20171.</p> <p>Turner, A. K., Lipscomb, W. H., Hunke, E. C., Jacobsen, D. W., Jeffery, N., Engwirda, D., Ringer, T. D., Wolfe, J. D. (2021). MPAS-seaice (v1.0.0): Sea-ice dynamics on unstructured Voronoi meshes. Geoscientific Model Development Discussions, 1\u201346. https://doi.org/10.5194/gmd-2021-355</p>"},{"location":"MPAS-seaice/dev-guide/","title":"Developer's Guide","text":"<p>Development of the MPAS-seaice component should follow the general procedures outlined by the E3SM project.</p> <p>Development Guide for E3SM Code Development Guide for E3SM Documentation</p>"},{"location":"MPAS-seaice/dev-guide/#configuration-controls","title":"Configuration Controls","text":"<p>MPAS-seaice is controlled using namelist options.  Namelist files for E3SM runs are found in <code>E3SM/components/mpas-seaice/bld/namelist_files/</code>.  However, the values in these files are drawn from the Registry, following the convention of all MPAS components. Registry files are used directly for stand-alone MPAS-seaice runs, and E3SM scripts pass information from them into E3SM's namelist files when a PR is merged.  E3SM's namelist files need to be changed for development purposes.  It's easiest to change all of them when needed, to keep them consistent, taking care not to unintentionally change standalone MPAS-seaice configurations.</p>"},{"location":"MPAS-seaice/dev-guide/#mpas-framework","title":"MPAS Framework","text":"<p>MPAS-seaice is built on the MPAS Framework.</p> <p>The MPAS Framework provides the foundation for a generalized geophysical fluid dynamics model on unstructured spherical and planar meshes. On top of the framework, implementations specific to the modeling of a particular physical system (e.g., sea ice, ocean) are created as MPAS cores. The MPAS design philosophy is to leverage the efforts of developers from the various MPAS cores to provide common framework functionality with minimal effort, allowing MPAS core developers to focus on development of the physics and features relevant to their application.</p> <p>The framework code includes shared modules for fundamental model operation. Significant capabilities include:</p> <ul> <li>Description of model data types. MPAS uses a handful of fundamental Fortran derived types for basic model functionality. Core-specific model variables are handled through custom groupings of model fields called pools, for which custom access routines exist. Core-specific variables are defined in XML syntax in a Registry, and the framework parses the Registry, defines variables, and allocates memory as needed.</li> <li>Mesh specification. MPAS requires 36 fields to fully describe the mesh used in a simulation. These include the position, area, orientation, and connectivity of all cells, edges, and vertices in the mesh. The mesh specification can flexibly describe both spherical and planar meshes. For more information about the meshes, see the Users Guide.</li> <li>Distributed memory parallelization and domain decomposition. The MPAS Framework provides needed routines for exchanging information between processors in a parallel environment using Message Passing Interface (MPI). This includes halo updates, global reductions, and global broadcasts. MPAS also supports decomposing multiple domain blocks on each processor to optimize model performance by minimizing transfer of data from disk to memory. Shared memory parallelization through OpenMP is also supported, but the implementation is left up to each core.</li> <li>Parallel input and output capabilities. MPAS performs parallel input and output of data from and to disk through the commonly used libraries of NetCDF, Parallel NetCDF (pnetcdf), and Parallel Input/Output (PIO). The Registry definitions control which fields can be input and/or output, and a framework \"streams\" functionality provides run-time configuration of what fields are to be written to what file name and at what frequency through an XML streams file. The MPAS framework includes additional functionality specific to providing a flexible model restart capability.</li> <li>Advanced timekeeping. MPAS uses a customized version of the timekeeping functionality of the Earth System Modeling Framework (ESMF), which includes a robust set of time and calendar tools used by many Earth System Models (ESMs). This allows explicit definition of model epochs in terms of years, months, days, hours, minutes, seconds, and fractional seconds and can be set to three different calendar types: Gregorian, Gregorian no leap, and 360 day. This flexibility helps enable multi-scale physics and simplifies coupling to ESMs. To manage the complex date/time types that ensue, MPAS framework provides routines for arithmetic of time intervals and the definition of alarm objects for handling events (e.g., when to write output, when the simulation should end).</li> <li>Run-time configurable control of model options. Model options are configured through namelist files that use standard Fortran namelist file format, and input/output are configured through streams files that use XML format. Both are completely adjustable at run time.</li> <li>Online, run-time analysis framework. A system for defining analysis of model states during run time, reducing the need for post-processing and model output.</li> </ul> <p>Additionally, a number of shared operators exist to perform common operations on model data. These include geometric operations (e.g., length, area, and angle operations on the sphere or the plane), interpolation (linear, barycentric, Wachspress, radial basis functions, spline), vector and tensor operations (e.g., cross products, divergence), and vector reconstruction (e.g., interpolating from cell edges to cell centers). Most operators work on both spherical and planar meshes.</p>"},{"location":"MPAS-seaice/dev-guide/#coupling-of-mpas-seaice-within-e3sm","title":"Coupling of MPAS-seaice within E3SM","text":"<p>Several files within MPAS-SI control the coupling of fields between MPAS-SI and other E3SM components via the coupler. A list of all variables being passed to and from MPAS-SI can be found in <code>components/mpas-seaice/driver/mpassi_cpl_indices.F</code>. Variables named with the prefix <code>x2i</code> are passed from the coupler to MPAS-SI, variables with the prefix <code>i2x</code> are passed from MPAS-SI to the coupler. For example, all coupled variables are named with the following convention: <code>index_i2x_Si_ithick</code> refers to a state variable of ice (<code>Si</code>) that gets passed from MPAS-SI to the coupler (<code>i2x</code>) for the ice thickness (<code>ithick</code>). <code>index_x2i_So_t</code> refers to an ocean state variable (<code>So</code>) passed from the the coupler to MPAS-SI (<code>x2i</code>) for ocean temperature (<code>t</code>).</p>"},{"location":"MPAS-seaice/dev-guide/#icepack","title":"Icepack","text":"<p>For changes to Icepack, please consult the CICE Consortium's recommendations for code contributions.</p> <p>To access the column physics in Icepack, MPAS-seaice uses methods defined in <code>icepack_intfc.F90</code>. The 'init' and 'query' methods are used to set and retrieve Icepack values. A 'write' method is also available for documenting these values. MPAS-seaice follows the 'icepack_warnings' methodology where <code>icepack_warnings_aborted</code> is checked and <code>icepack_warnings_flush</code> is called after every call to an Icepack method. It does not directly \u201cuse\u201d Icepack data, accessing Icepack data only through these interfaces.</p> <p>Basic Icepack development can be done in standalone mode using Icepack's testing scripts, directly in the submodule branch in MPAS-seaice. We recommend that Icepack developments be thoroughly tested within E3SM's coupled framework throughout the development process, including fully coupled simulations.</p>"},{"location":"MPAS-seaice/dev-guide/#e3sm-polar-developer-script","title":"E3SM-Polar-Developer Script","text":"<p>To accelerate early development stages, a script is available for configuring and testing MPAS-seaice (including the Icepack submodule) in D compsets, which have the sea ice component active and data models for the other components.</p>"},{"location":"MPAS-seaice/dev-guide/#view-helpful-information-including-default-values-for-duration-configuration-etc","title":"View helpful information, including default values for duration, configuration, etc","text":"<pre><code>git clone git@github.com:E3SM-Project/SimulationScripts.git\ncd SimulationScripts/archive/PolarGroup\n./E3SM-Polar-Developer.sh -h\n</code></pre> <p>For debugging E3SM, search the script for 'debug' and follow the instructions.</p> <p>The following examples describe how to use the script for development in Icepack.  Similar procedures could be used for any MPAS-SI physics development.</p>"},{"location":"MPAS-seaice/dev-guide/#set-up-and-run-baselines","title":"Set up and run baselines","text":"<p>Create a file containing modified namelist options. The file <code>nset01.nlk</code> in this example creates baselines for two types of column physics and turns off the <code>snicar_ad</code> radiation scheme.</p> <pre><code>$ less nset01.nlk\n[mpassi]\nconfig_column_physics_type = {'column_package','icepack'}\nconfig_use_snicar_ad = {.false.}\n</code></pre> <p>Notes:</p> <ul> <li>A .nlk file without any config settings will create a baseline using default settings.</li> <li>The <code>column_package</code> option is still available but is no longer being supported in MPAS-seaice.</li> </ul> <p>Fetch E3SM (choose any name for the directory baselines01):</p> <pre><code>./E3SM-Polar-Developer.sh -s baselines01 -f git@github.com:E3SM-Project/E3SM\n</code></pre> <p>Set up a new case and build it:</p> <pre><code>./E3SM-Polar-Developer.sh -s baselines01 -k nset01.nlk -e -n -b\n</code></pre> <p>Submit:</p> <pre><code>./E3SM-Polar-Developer.sh -s baselines01 -k nset01.nlk -e -q\n</code></pre> <p>Examine the diagnostic output (compares the icepack run with the column_package run in this example):</p> <pre><code>./E3SM-Polar-Developer.sh -s baselines01 -k nset01.nlk -e -a -v\n</code></pre>"},{"location":"MPAS-seaice/dev-guide/#set-up-a-sandbox-for-model-development-to-be-compared-with-the-baselines","title":"Set up a sandbox for model development, to be compared with the baselines","text":"<p>Fetch E3SM (choose any name for the directory newdev01):</p> <pre><code>./E3SM-Polar-Developer.sh -s newdev01 -f git@github.com:E3SM-Project/E3SM\n</code></pre> <p>Create a new development branch:</p> <pre><code>cd ~/E3SM-Polar/code/newdev01\ngit branch newbranch\ngit checkout newbranch\n</code></pre> <p>Set up a new case and build it:</p> <pre><code>./E3SM-Polar-Developer.sh -s newdev01 -k nset01.nlk -e -n -b\n</code></pre> <p>Develop and test... Build/compile:</p> <pre><code>./E3SM-Polar-Developer.sh -s newdev01 -k nset01.nlk -e -b\n</code></pre> <p>Submit:</p> <pre><code>./E3SM-Polar-Developer.sh -s newdev01 -k nset01.nlk -e -q\n</code></pre> <p>Examine the diagnostic output:</p> <pre><code>./E3SM-Polar-Developer.sh -s newdev01 -k nset01.nlk -e -a -v\n</code></pre> <p>Compare with the baselines case directory (use your D3 baselines directory):</p> <pre><code>./E3SM-Polar-Developer.sh -s newdev01 -k nset01.nlk -a D3.nset01.baselines01.master.E3SM-Project.anvil -v\n</code></pre>"},{"location":"MPAS-seaice/dev-guide/#make-changes-in-icepack-and-pr-to-the-consortium","title":"Make changes in Icepack and PR to the Consortium","text":"<p>We recommend PR\u2019ing Icepack changes first to the Consortium then to E3SM\u2019s icepack fork, in order to keep the repositories in sync and to ensure the changes are robust outside of E3SM.  Some changes to Icepack require extensive changes to the driver code (e.g. MPAS-seaice or CICE), making this process challenging.  Contact the CICE Consortium to discuss and identify a collaborative path forward.</p> <p>First, create a baseline (standalone) Icepack test suite using the E3SM icepack fork or, if the Consortium code is different, using Consortium icepack main (see Consortium documentation.)</p> <p>Similarly test your branch of Icepack within E3SM and compare with the baseline. When satisfied with E3SM testing, PR to Consortium icepack main:</p> <pre><code>git remote add consortium git@github.com:cice-consortium/icepack.git\ngit pull consortium main\n</code></pre> <p>Fix conflicts if needed, then</p> <pre><code>git add ...\ngit commit -m \"update from cice-consortium main\"\n</code></pre> <p>Continue testing. When satisfied,</p> <pre><code>git push origin branch\n</code></pre> <p>Create a PR from branch to cice-consortium/icepack -b main.</p> <p>Once the PR has been tested and merged into the main Icepack codebase, a new PR is submitted to E3SM.</p> <p>More extensive documentation of this workflow tool used for the Icepack merge project is available here.</p>"},{"location":"MPAS-seaice/dev-guide/#cice-qc-quality-control-testing","title":"CICE-QC Quality Control Testing","text":"<p>Example to run a CICE-QC comparison between two E3SM simulations with changes to the sea ice component.</p>"},{"location":"MPAS-seaice/dev-guide/#set-up-and-run-simulations-to-be-compared","title":"Set up and run simulations to be compared","text":"<pre><code>cd ~/SimulationScripts/archive/PolarGroup/\n</code></pre> <p>Create a <code>.nlk</code> file with namelist changes to include the thickness analysis member. Include changes to namelist values needed in both the baseline and the test here, if desired (append the last 3 lines here to the end of your standard D-case test .nlk).</p> <pre><code>$ less qcbase.nlk\n[mpassi]\nconfig_AM_thicknesses_enable = {.true.}\nconfig_AM_thicknesses_compute_on_startup = {.true.}\nconfig_AM_thicknesses_write_on_startup = {.true.}\n</code></pre> <p>Use test script to clone E3SM, and create a sandbox</p> <pre><code>./E3SM-Polar-Developer.sh -s qcbaseline -f git@github.com:E3SM-Project/E3SM\n</code></pre> <p>Edit <code>~/E3SM-Polar/code/qcbaseline/components/mpas-seaice/cime_config/buildnml</code> to change:</p> <pre><code>lines.append('        output_interval=\"none\"&gt;')\n</code></pre> <p>to</p> <pre><code>lines.append('        output_interval=\"00-00-01_00:00:00\"&gt;')\n</code></pre> <p>for <code>stream name=\u201coutput\u201d</code> and add</p> <pre><code>lines.append('    &lt;var name=\"iceThicknessCell\"/&gt;')\n</code></pre> <p>a few lines below that:</p> <pre><code>            lines.append('&lt;stream name=\"output\"')\n            lines.append('        type=\"output\"')\n            lines.append('        io_type=\"{}\"'.format(ice_pio_typename))\n            lines.append('        filename_template=\"{}.mpassi{}.hist.$Y-$M-$D_$\nS.nc\"'.format(casename, inst_string))\n            lines.append('        filename_interval=\"00-01-00_00:00:00\"')\n            lines.append('        clobber_mode=\"truncate\"')\n            lines.append('        reference_time=\"01-01-01_00:00:00\"')\n-           lines.append('        output_interval=\"none\"&gt;')\n+           lines.append('        output_interval=\"00-00-01_00:00:00\"&gt;')\n            lines.append('')\n            lines.append('    &lt;stream name=\"mesh\"/&gt;')\n            lines.append('    &lt;var name=\"xtime\"/&gt;')\n            lines.append('    &lt;var name=\"daysSinceStartOfSim\"/&gt;')\n            lines.append('    &lt;var name=\"iceAreaCell\"/&gt;')\n            lines.append('    &lt;var name=\"iceVolumeCell\"/&gt;')\n            lines.append('    &lt;var name=\"snowVolumeCell\"/&gt;')\n+           lines.append('    &lt;var name=\"iceThicknessCell\"/&gt;')\n            lines.append('    &lt;var name=\"uVelocityGeo\"/&gt;')\n            lines.append('    &lt;var name=\"vVelocityGeo\"/&gt;')\n            lines.append('')\n            lines.append('&lt;/stream&gt;')\n</code></pre> <p>Build and run baseline case for 5 years (60 months):</p> <pre><code>./E3SM-Polar-Developer.sh -s qcbaseline -k qcbase.nlk -e -d60 -nb\n./E3SM-Polar-Developer.sh -s qcbaseline -k qcbase.nlk -e -d60 -q\n</code></pre> <p>Copy the thickness analysis member changes into your development directory:</p> <pre><code>cd ~/E3SM-Polar/code/newdev01/components/mpas-seaice/cime_config/\ncp ~/E3SM-Polar/code/qcbaseline/components/mpas-seaice/cime_config/buildnml .\n</code></pre> <p>If your development case adds namelist parameters, add the thickness analysis member to your .nlk file as above. This example uses the default configuration.</p> <p>Build and run the development case:</p> <pre><code>cd ~/SimulationScripts/archive/PolarGroup/\n./E3SM-Polar-Developer.sh -s newdev01 -k qcbase.nlk -e -d60 -nb\n./E3SM-Polar-Developer.sh -s newdev01 -k qcbase.nlk -e -d60 -q\n</code></pre>"},{"location":"MPAS-seaice/dev-guide/#run-qc-comparison","title":"Run QC comparison","text":"<pre><code>cd ~/E3SM-Polar/code/newdev01/components/mpas-seaice/testing/cice-qc\n</code></pre> <p>See README.md.  This example is for anvil.</p> <p>Edit <code>job_script.cice-qc.anvil</code> to export (insert your username)</p> <pre><code>BASE = /lcrc/group/e3sm/[username]/E3SM-Polar/D12.qcbase.emc.qcbaseline.master.E3SM-Project.anvil/run.k000/\nTEST = /lcrc/group/e3sm/[username]/E3SM-Polar/D12.qcbase.emc.newdev01.branch.E3SM-Project.anvil/run.k000\n</code></pre> <p>Submit QC test. Test results will be in the file <code>qc_log.txt</code>.</p> <pre><code>sbatch job_script.qc-testing-mpassi.anvil\nless qc_log.txt\n</code></pre> <p>Example of desired result:</p> <pre><code>Running QC test on the following directories:\n  /lcrc/group/e3sm/ac.eclare/E3SM-Polar/D12.qcbase.emc.qcbaseline.master.E3SM-Project.anvil/run.k000/\n  /lcrc/group/e3sm/ac.eclare/E3SM-Polar/D12.qcbase.emc.newdev01.branch.E3SM-Project.anvil/run.k000\nNumber of files: 61\n2 Stage Test Passed\nQuadratic Skill Test Passed for Northern Hemisphere\nQuadratic Skill Test Passed for Southern Hemisphere\n</code></pre>"},{"location":"MPAS-seaice/dev-guide/#generate-statistics-from-the-cice-qc-runs","title":"Generate statistics from the CICE-QC runs","text":"<p>This only works if the .nlk filename is the same for both cases.  If comparing only namelist changes within MPAS-seaice, use the <code>./E3SM-Polar-Developer.sh</code> script with a single .nlk file that includes each option.</p> <pre><code>cd ~/SimulationScripts/archive/PolarGroup/\n$ ./E3SM-Polar-Developer.sh -s qcbaseline -k qcbase.nlk -e -d60 -a D12.qcbase.emc.newdev01.branch.E3SM-Project.anvil -v\n</code></pre>"},{"location":"MPAS-seaice/dev-guide/#create-comparison-plots","title":"Create comparison plots","text":"<p>To generate MPAS-Analysis plots from the CICE-QC runs and compare:</p> <p>Copy the scripts in the file MPAS-Analysis_scripts.zip to anvil or chrysalis.</p> <p>Edit each script for your run names, directories, etc (search for 'echmod' to find settings used for a QC comparison)</p> <p>Edit and submit (on chrysalis) the job script 3 times, once for icepack, once for column, and finally for the comparison.</p> <p>Browse the html output by navigating to the location indicated by <code>htmlSubdirectory</code> in the comparison script, e.g. <code>https://web.lcrc.anl.gov/public/e3sm/diagnostic_output/ac.eclare/icepack-testing/D12.qcPR19.emc.qcPR19.snicar_active.eclare108213.anvil/mpas_analysis_output/</code></p>"},{"location":"MPAS-seaice/tech-guide/","title":"Technical Guide","text":""},{"location":"MPAS-seaice/tech-guide/#primary-documentation-for-mpas-seaice","title":"Primary documentation for MPAS-seaice","text":"<p>See complete citations in References.</p> <p>E3SM v1 Overview: Golaz et al., JAMES 2019</p> <p>MPAS-seaice v1: Turner et al., GMD Discussions, 2021.</p> <p>E3SM v2 Overview: Golaz et al., JAMES 2022</p> <p>Icepack: Full documentation for E3SM's version of Icepack can be found in E3SM's Icepack readthedocs.  The most up-to-date documentation from the CICE Consortium's main Icepack repository is here.</p> <p>A comprehensive paper describing MPAS-seaice is in preparation.</p>"},{"location":"MPAS-seaice/tech-guide/#meshes","title":"Meshes","text":"<p>MPAS-Seaice is the sea ice component of E3SMv1. MPAS-Seaice and MPAS-Ocean share identical meshes, but MPAS-Seaice uses B-grid discretizations (Arakawa &amp; Lamb, 1977) with sea ice concentration, volume, and tracers defined at cell centers and velocity defined at cell vertices.</p> <p>The MPAS mesh system requires the definition of seven elements.  These seven elements are composed of two types of cells, two types of lines, and three types of points.  These elements can be defined on either the plane or the surface of the sphere.  The two types of cells form two meshes, a primal mesh composed of Voronoi regions and a dual mesh composed of Delaunay triangles.  Each corner of a primal mesh cell is uniquely associated with the \"center\" of a dual mesh cell and vice versa. The boundary of a given primal mesh cell is composed of the set of lines that connect the centers of the dual mesh cells.  Similarly, the boundary of a given dual mesh cell is composed of the set of lines that connect the center points of the associated primal mesh cells. A line segment that connects two primal mesh cell centers is uniquely associated with a line seqment that connects two dual mesh cell centers.  We assume that these two line seqments cross and are orthogonal.  Since the two line seqments crossing are othogonal, they form a convenient local coordinate system for each edge.  Figure: Sample from an MPAS mesh showing the primal mesh (solid lines), the dual mesh (dashed), and velocity components aligned with a locally Cartesian coordinate system (east/north).</p>"},{"location":"MPAS-seaice/tech-guide/#velocity-and-stresses","title":"Velocity and Stresses","text":"<p>Velocity components at cell vertices are not aligned with the mesh, as in sea ice models with structured meshes and quadrilateral cells. Instead, the velocity components are aligned with a spherical coordinate system that is locally Cartesian, eastwards (u) and northwards (v), irrespective of the orientation of edges joining that vertex. Such a definition, however, would result in a convergence of v components at the geographic North Pole and strong metric terms in the velocity solution. Consequently, in addition, these definitions of u and v are rotated so that their pole lies on the geographical equator at 0 deg longitude.</p> <p>Velocities are determined by solving the sea ice momentum equation (Hibler, 1979; Hunke &amp; Dukowicz, 1997). During coupled simulations the ocean model provides the ocean surface tilt term; the only other term that depends on the properties of the horizontal grid is the divergence of internal stress.  Therefore only this stress term must be adapted for use on MPAS meshes.  Otherwise the velocity solver is identical to that in CICE\u2019s standard EVP approach. Determination of the divergence of the internal stress can be broken down into three stages:</p> <ol> <li> <p>The strain rate tensor is determined from the velocity field.</p> </li> <li> <p>The stress tensor at a point is determined, through a constitutive relation, from the strain rate tensor at that point.</p> </li> <li> <p>The divergence of this stress tensor is calculated.</p> </li> </ol> <p>Two schemes to calculate the strain rate tensor and the divergence of internal stress on MPAS meshes are implemented in MPAS-Seaice, a variational scheme based on that used in CICE (Hunke and Dukowicz, 2002), and a weak scheme that uses the line integral forms of the symmetric gradient and divergence operators. The variational scheme is based on the fact that over the entire domain, \u03a9, and ignoring boundary effects, the total work done by the internal stress is equal to the dissipation of mechanical energy. Instead of the bilinear basis functions used by CICE, MPAS-Seaice uses Wachspress basis functions (Dasgupta, 2003), which are integrated with the quadrature rules of Dunavant (1985).</p>"},{"location":"MPAS-seaice/tech-guide/#horizontal-transport-of-ice-area-fraction-and-tracers","title":"Horizontal Transport of Ice Area Fraction and Tracers","text":"<p>Horizontal transport of ice concentration, volume, and tracers is achieved with an incremental remapping (IR) scheme similar to that described in Dukowicz and Baumgardner (2000), Lipscomb and Hunke (2004), and Lipscomb and Ringler (2005).  For MPAS-Seaice the IR scheme was generalized to work on either the standard MPAS mesh (hexagons and other n-gons of varying sizes, with a vertex degree of 3, or a quadrilateral mesh with a vertex degree of 4 as in CICE. Since MPAS meshes are unstructured, the IR scheme had to be rewritten from scratch. Most of the code is mesh-agnostic, but a small amount of code is specific to quad meshes. The transport equations describe conservation of quantities such as volume and energy.  Fractional ice area (also known as sea ice concentration) is a mass-like quantity whose transport equation forms the basis for all other transported quantities in the model.  In particular, ice volume is the product of ice area and thickness; therefore thickness is treated as a tracer on ice area, transported with the continuity equation for conservation of volume. Likewise, snow depth is carried as a tracer on ice area via a conservation of snow volume equation.  Ice thickness and snow depth are referred to as \u201ctype 1\u201d tracers (carried directly on ice area). Ice and snow enthalpy in each vertical layer are type 2 tracers, carried on ice and snow volume. When run with advanced options (e.g., active melt ponds and biogeochemistry), MPAS-Seaice advects tracers up to type 3. Thus, the mass-like field (area) is the \u201cparent field\u201d for type 1 tracers; type 1 tracers are parents of type 2; and type 2 tracers are parents of type 3.  Sources and sinks of mass and tracers (e.g., ice growth and melting) are treated separately from transport.</p> <p>The transport time step is limited by the requirement that trajectories projected backward from vertices are confined to the cells sharing the vertex (i.e., 3 cells for the standard MPAS mesh and 4 for the quad mesh). This is what is meant by incremental as opposed to general remapping. For highly divergent velocity fields, the maximum time step may have to be reduced by a factor of 2 to ensure that trajectories do not cross. The incremental remapping algorithm consists of the following steps:</p> <ol> <li>Given mean values of the ice area and tracer fields in each grid cell and thickness category, construct linear approximations of these fields. Limit the field gradients to preserve mono- tonicity.</li> <li>Given ice velocities at grid cell vertices, identify departure regions for the transport across each cell edge. Divide these departure regions into triangles and compute the coordinates of the triangle vertices.</li> <li>Integrate the area and tracer fields over the departure triangles to obtain the area, volume, and other conserved quantities transported across each cell edge.</li> <li>Given these transports, update the area and tracers.</li> </ol> <p>Since all fields are transported by the same velocity field, the second step is done only once per time step. The other steps are repeated for each field.</p> <p>With advanced physics and biogeochemistry (BGC) options, MPAS-Seaice can be configured to include numerous tracer fields, each of which is advected in every thickness category, and many of which are defined in each vertical ice or snow layer. In order to accommodate different tracer combinations and make it easy to add new tracers, the tracer fields are organized in a linked list that depends on which physics and BGC packages are active. The list is arranged with fractional ice area first, followed by the type 1 tracers, type 2 tracers, and finally type 3 tracers. In this way, values computed for parent tracers are always available when needed for computations involving child tracers.</p>"},{"location":"MPAS-seaice/tech-guide/#column-physics","title":"Column Physics","text":"<p>The Icepack software has replaced the original <code>colpkg</code> column physics code in MPAS-seaice. The <code>config_column_physics_type = 'column_package'</code> option is still available but is no longer being supported in MPAS-seaice.</p> <p>Because of the strong thermal gradients between the (cold) atmosphere and (relatively warm) oceans in polar regions, a large portion of the physics in sea ice models can be described in a vertical column, without reference to neighboring grid cells. MPAS-Seaice shares the same column physics code as CICE through the Icepack library (Hunke et al., 2018), which is maintained by the CICE Consortium. This code includes several options for simulating sea ice thermodynamics, mechanical redistribution (ridging) and associated area and thickness changes. In addition, the model supports a number of tracers, including thickness, enthalpy, ice age, first-year ice area, deformed ice area and volume, melt ponds, snow properties and biogeochemistry.</p> <p>Icepack is implemented in MPAS-seaice as a git submodule. Icepack consists of three independent parts, the column physics code, the Icepack driver that supports stand-alone testing of the column physics code, and the Icepack scripts that build and test the Icepack model.  E3SM uses only the column physics code, which is called for each ocean grid cell.  Icepack\u2019s own driver and testing scripts are used when preparing new developments to be merged back to the CICE Consortium\u2019s Icepack repository.</p> <p>Icepack includes sophisticated vertical physics and biogeochemical schemes, which include vertical thermodynamics schemes (Bitz and Lipscomb, 1999; Turner et al., 2013; Turner and Hunke, 2015), melt-pond parameterizations (Flocco et al., 2010; Hunke et al., 2013), a delta-Eddington radiation scheme (Briegleb and Light, 2007; Holland et al., 2012a), schemes for transport in thickness space (Lipscomb, 2001), and representations of mechanical redistribution (Lipscomb et al., 2007).</p> <p>Full documentation for E3SM's version of Icepack can be found in E3SM's Icepack readthedocs.  The most up-to-date documentation from the CICE Consortium's main Icepack repository is here.</p>"},{"location":"MPAS-seaice/tech-guide/#thermodynamics","title":"Thermodynamics","text":"<p>In its default configuration, MPAS-Seaice uses the \u201cmushy layer\u201d vertical thermodynamics scheme of Turner et al. (2013) and Turner and Hunke (2015).  The mushy layer formulation describes the sea ice as a two-phase system of crystalline, fresh ice and liquid brine. Enthalpy depends on temperature and salinity, all of which are prognostic variables.  The mushy layer equations are derived from conservation of energy, conservation of salt, an ice-brine liquidus relation that determines the temperature- and salinity-dependent phase, and Darcy flow through a porous medium to describe the vertical movement of brine within the ice.  When or where the ice is cold, brine pockets are isolated from each other, but warmer temperatures cause the brine pockets to expand and connect into vertical channels in which meltwater, seawater, biology and nutrients may move through the ice.</p>"},{"location":"MPAS-seaice/tech-guide/#melt-ponds","title":"Melt Ponds","text":"<p>MPAS-seaice uses the level-ice melt pond scheme of Hunke et al. (2013). The ponds are carried as tracers on the level (undeformed) ice area of each thickness category, thus limiting their spatial extent based on the simulated sea ice topography. This limiting is meant to approximate the horizontal drainage of melt water into depressions in ice floes. The ponds evolve according to physically based process descriptions, assuming a thickness-area ratio for changes in pond volume. Melt pond processes include addition of liquid water from rain, melting snow and melting surface ice, drainage of pond water when its weight pushes the ice surface below sea level or when the ice interior becomes permeable, and refreezing of the pond water. If snow falls after a layer of ice has formed on the ponds, the snow may block sunlight from reaching the ponds below. When melt water forms with snow still on the ice, the water is assumed to infiltrate the snow. If there is enough water to fill the air spaces within the snowpack, then the pond becomes visible above the snow, thus decreasing the albedo and ultimately causing the snow to melt faster. The albedo also decreases as snow depth decreases, and thus a thin layer of snow remaining above a pond-saturated layer of snow will have a lower albedo than if the melt water were not present. Level-ice melt ponds are \u201cvirtual\u201d in the sense that rain and meltwater is sent to the ocean immediately, and the tracers are only used thereafter to adjust the radiative calculations as if the ponds were present.  The delta-Eddington radiative transfer scheme must be active for this purpose.</p>"},{"location":"MPAS-seaice/tech-guide/#radiation","title":"Radiation","text":"<p>The Delta-Eddington radiation scheme of Briegleb &amp; Light (2007) has been updated to the Dang et al. (2019) SNICAR-AD model, to ensure radiative consistency across all snow surfaces in E3SM, including on land, ice sheets and sea ice. The SNICAR-AD radiative transfer code includes five-band snow single-scattering properties, two-stream Delta-Eddington approximation with the adding\u2013doubling technique, and parameterization for correcting the near-infrared (NIR) snow albedo biases when solar zenith angle exceeds 75 degrees (Dang et al., 2019).</p>"},{"location":"MPAS-seaice/tech-guide/#snow","title":"Snow","text":"<p>A new snow-on-sea-ice morphology has been added to E3SMv2 that includes the effects of wind redistribution: losses to leads and meltponds, and the piling of snow against ridges. Snow grain radius, now a prognosed tracer field on sea ice, evolves according to temperature gradient and wet snow metamorphism and feeds back to the SNICAR-AD radiative model up to a dry maximum of 2800 \u03bcm. Fresh snow falls at a grain radius of 54.5 \u03bcm, and five vertical snow layers replace the previous single snow layer atop each of the five sea ice thickness categories retained from E3SMv1.</p> <p>A paper describing the advanced snow physics is in preparation.</p>"},{"location":"MPAS-seaice/tech-guide/#biogeochemistry","title":"Biogeochemistry","text":"<p>This section is under construction, pending the full merge of BGC codes in Icepack and the older column physics package.</p>"},{"location":"MPAS-seaice/tech-guide/#coupling-of-mpas-seaice-within-e3sm","title":"Coupling of MPAS-seaice within E3SM","text":"<p>This description is taken from the v1 overview paper (Golaz et al. 2019).  Refer to that paper for further information.  Coupling of the sea ice component to the ocean takes advantage of z star ocean coordinates and is a departure from the coupling of CICE and POP (Parallel Ocean Program) in CESM1. The weight of sea ice contributes to the ocean's barotropic mode, notably affecting the free surface over continental shelves. In shallow water depths at or less than the floating ice draft, the weight passed to the ocean model is limited to prevent evacuation of the underlying liquid column. When frazil ice forms in the ocean model, the volume of newly formed crystals is passed to the sea ice model with a fixed salinity of 4 PSU, rather than exchanging a freezing potential as in other models. Future versions of E3SM will permit progressive brine drainage to the ocean from the mushy layer physics used in MPAS-Seaice. For E3SMv1, brine drainage occurs internally in MPAS-Seaice for thermodynamic calculations, but for the sake of freshwater coupling, the ocean model only receives mass fluxes back from melted sea ice at the fixed salinity that it originally passed to its cryospheric counterpart (4 PSU). The ocean temperature immediately under the ice is the same as the liquid phase in the lowest layer of the sea ice model and is not fixed at \u22121.8 \u25e6C as is typical of previous generation coupled models. For the current version, we have addressed these long-standing ocean-ice coupling issues identified by the modeling community: explicit sea ice mass and salt exchange, a pressure force of the ice on the ocean, a basal sea ice temperature consistent with the ocean model's equation of state, and resolved inertial oscillations.</p> <p>This paragraph, taken from the v2 overview paper (Golaz et al. 2022), describes changes since v1.  The most significant improvement to the sea ice climate since E3SMv1 was achieved with coupling changes associated with mushy-layer thermodynamics. Whereas the basal temperature of the ice was held fixed at -1.8\u25e6C in E3SMv1, the new version of the model assumes the mushy liquidus basal temperature from the sea ice as described by Turner\u00a0&amp; Hunke (2015). Conversion of frazil ice from MPAS-Ocean with a fixed reference salinity of 4 PSU to the mushy layer now conserves to computational accuracy over a 500-year control integration. This was achieved by exchanging additional mass between the upper ocean and sea ice model to accommodate an assumed 25% mushy liquid content, assumed from heat and mass transferred adiabatically from the MPAS-Ocean frazil scheme active from a depth of 100 m. In addition to achieving perfect heat and mass conservation between sea ice and ocean models, this improvement greatly reduces a negative sea ice thickness bias in the summer Arctic reported by Golaz et al. (2019) for E3SMv1; it only minimally impacts Southern Ocean sea ice mass that was better simulated as compared to northern hemisphere sea ice in E3SMv1. Note that E3SM does not use virtual ice-ocean fluxes, but instead full mass and heat flux exchange consistent with a Boussinesq ocean model. Radiative coupling with the atmosphere still integrates across just two bands (visible and NIR) separated at 700nm, which does not fully exploit the five-band capability available in the delta-Eddington scheme.</p>"},{"location":"MPAS-seaice/tech-guide/#prescribed-ice-mode","title":"Prescribed Ice Mode","text":"<p>E3SM also includes a prescribed-extent ice mode for MPAS-SeaIce based the CESM implementation. This mode is needed for Atmospheric Model Intercomparison Project (AMIP) style simulations where a full prognostic sea ice model is not desired but sea ice surface fluxes, albedos, snow depth, and surface temperature are needed by the atmosphere model. These fields are calculated by the vertical thermodynamics module of the sea ice component. The prescribed-ice mode is intended for atmosphere sensitivity experiments and does not conserve energy or mass. In this mode, sea ice thermodynamics is active but sea ice dynamics are disabled, and at each time step ice area and thickness are reset to specified values. Ice area is interpolated in time and space from an input data set, while ice thickness in grid cells containing sea ice is set to 2 m in the Northern hemisphere and 1 m in the Southern hemisphere. During each area and thickness adjustment, snow volume preserves the snow thickness prognosed in the previous time step. Snow temperatures are reset to the surface temperature, as prognosed in the previous time step, while ice temperatures are set so that the ice temperature gradient is linear, with the ice temperature at the top equal to the prognosed surface temperature, and equal to the sea freezing temperature at the base of the ice. The vertical ice salinity profile is reset to the profile from Bitz &amp; Lipscomb (1999). The prescribed-ice mode implemented in MPAS-SeaIce can now replace that in CICE in such configurations, but CICE continues to be used for those requiring exceptional computational efficiency.</p>"},{"location":"MPAS-seaice/user-guide/","title":"User's Guide","text":"<p>Guidance for using E3SM is available from E3SM's public web site.</p>"},{"location":"MPAS-seaice/user-guide/#configuring-mpas-seaice","title":"Configuring MPAS-seaice","text":"<p>MPAS-seaice is controlled using namelist options.</p> <ul> <li>Default namelist values are found in <code>E3SM/components/mpas-seaice/bld/namelist_files/namelist_defaults_mpassi.xml</code>.</li> <li>Namelist options are defined in <code>E3SM/components/mpas-seaice/bld/namelist_files/namelist_definitions_mpassi.xml</code>, including type, category (<code>seaice_model</code>), group, valid values and a brief description. Each namelist variable is defined in an <code>entry</code> element.  The content of the element is the documentation of how the variable is used.  Other aspects of the variable's definition are expressed as attributes of the <code>entry</code> element.</li> <li>Users can change namelist options from defaults by entering <code>[namelist option] = [changed value]</code> as separate lines in the <code>user_nl_mpassi</code> file in the case directory.</li> <li>Some namelist values or combinations are not allowed and will generate warnings and often abort the code.  The consistency checks for using MPAS-seaice within E3SM are in <code>mpas_seaice_initialize</code> (subroutines <code>seaice_check_configs_coupled</code>, <code>seaice_check_constants_coupled</code>), and those specific to Icepack can be found in subroutine <code>check_column_package_configs</code> in <code>mpas_seaice_icepack.F</code>.</li> </ul> <p>Related namelist variables are grouped according to their application.</p> Namelist Groups Relevant application <code>seaice_model</code> general options <code>io</code> input/output <code>decomposition</code> mesh parallelization <code>restart</code> restarting the code <code>dimensions</code> column physics dimensions (layers, categories) <code>initialize</code> initialization <code>use_sections</code> turn entire parameterizations on and off <code>forcing</code> forcing for standalone configurations <code>velocity_solver</code> algorithms for solving the dynamics (velocity and stress) equations <code>advection</code> advection <code>column_package</code> general column package software configurations <code>biogeochemistry</code> biogeochemistry <code>shortwave</code> radiation <code>snow</code> advanced snow physics <code>meltponds</code> melt pond parameterization flags and parameters <code>thermodynamics</code> basic thermodynamics <code>itd</code> ice thickness distribution <code>floesize</code> floe size distribution <code>ridging</code> mechanical redistribution <code>atmosphere</code> atmospheric boundary layer and coupling <code>ocean</code> oceanic boundary layer and coupling <code>diagnostics</code> diagnostic output <code>prescribed_ice</code> for testing atmosphere simulations"},{"location":"MPAS-seaice/user-guide/#icepack","title":"Icepack","text":"<p>The Icepack software has replaced the original <code>colpkg</code> column physics code in MPAS-seaice. The <code>column_package</code> option is still available but is no longer being supported in MPAS-seaice.</p> <p>Full documentation for E3SM's version of Icepack can be found in E3SM's Icepack readthedocs.  The most up-to-date documentation from the CICE Consortium's main Icepack repository is here.</p> <p>The MPAS-seaice driver for Icepack is</p> <p><code>E3SM/components/mpas-seaice/src/shared/mpas_seaice_icepack.f</code></p> <p>and the mapping between the names of Icepack's namelist options and those in MPAS-seaice can be found in subroutine <code>init_icepack_package_configs</code> (see the argument list for calls to subroutine <code>icepack_init_parameters</code> and comments at the end of <code>init_icepack_package_configs</code>.</p>"},{"location":"MPAS-seaice/user-guide/#configuring-model-input-and-output","title":"Configuring Model Input and Output","text":"<p>The reading and writing of model fields in MPAS is handled by user-configurable streams. A stream represents a fixed set of model fields, together with dimensions and attributes, that are all written or read together to or from the same file or set of files. Besides these default streams, users may define new streams to, e.g., write certain diagnostic fields at a higher temporal frequency than the usual model history fields.</p> <p>Streams are defined in XML configuration files that are created at build time for each model core. The name of this XML file is simply \u2018streams.\u2019 suffixed with the name of the core. For example, the streams for the sea-ice core are defined in a file named \u2018streams.seaice\u2019. An XML stream file may further reference other text files that contain lists of the model fields that are read or written in each of the streams defined in the XML stream file.</p> <p>The stream file can be modified by copying the <code>streams.seaice</code> file (generated during <code>./case.setup</code>) from the run directory to the case directory under <code>SourceMods/src.mpassi/</code>, and making changes to the stream file there. Changes to the stream file will take effect on the next case submission. Alternatively, changes to the streams file can be made directly in the code in <code>components/mpas-seaice/cime_config/buildnml</code>.</p> <p>Two classes of streams exist in MPAS: immutable streams and mutable streams. Immutable streams are those for which the set of fields that belong to the stream may not be modified at model run-time; however, it is possible to modify the interval at which the stream is read or written, the filename template describing the files containing the stream on disk, and several other parameters of the stream. In contrast, all aspects of mutable streams, including the set of fields that belong to the stream, may be modified at run-time. The motivation for the creation of two stream classes is the idea that an MPAS core may not function correctly if certain fields are not read in upon model start-up or written to restart files, and it is therefore not reasonable for users to modify this set of required fields at run-time. An MPAS core developer may choose to implement such streams as immutable streams. Since fields may not be added to an immutable stream at run-time, new immutable streams may not be defined at run-time, and the only type of new stream that may be defined at run-time is the mutable stream type.</p>"},{"location":"dev-guide/","title":"Development Guide","text":"<p>Development of E3SM is carefully planned and tied to goals in the proposals that fund work on E3SM.</p>"},{"location":"dev-guide/#code-development","title":"Code development","text":"<p>Most code development occurs within one component and developers should consult the relevant component's development guide.</p> <p>More information on code development.</p> <ul> <li>Development Big Picture</li> <li>Getting Started</li> <li>Development Reference</li> </ul>"},{"location":"dev-guide/#creating-new-input","title":"Creating new input","text":"<p>E3SM's public input data directory contains initial and boundary conditions for many cases. Creating new initial or boundary conditions typically starts with creating a new grid.</p> <ul> <li>Adding Support for New Grids</li> </ul>"},{"location":"dev-guide/adding-grid-support/","title":"Adding Support for New Grids","text":"<ul> <li>Atmosphere Grid Overview                 </li> <li>Grid Description File Overview           </li> <li>Step-by-Step Guide to Support a New Grid </li> </ul>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-grid-types/","title":"Types of Grid Description Files","text":"<ul> <li> <p>Exodus file: ex. \"ne4.g\".   This is a netcdf file following Exodus conventions.  It gives the corner locations of all elements on the sphere and their connectivity.  It is independent of the polynomial order used inside the element (\"np\").  This file is used by TempestRemap (TR) to generate mapping files.  The polynomial order is a command line option and the GLL nodes are internally generated by TR.  </p> </li> <li> <p>SCRIP file:  ex. \"ne4pg2.scrip.nc\".   This file contains a description of the atmosphere physics grid in the format used by the original incremental remap tool SCRIP.  It is used for most output and also used to generate mapping files between components and for post-processing of most output.</p> </li> </ul> <p>Less common \u201cGLL\u201d metadata files needed for specialized purposes:</p> <ul> <li> <p>\"dual grid\" SCRIP file:  ex. \"ne4np4_scrip.nc\".   This file contains a SCRIP format description of the GLL grid.  It includes the locations of the GLL nodes and artificial bounding polygons around those nodes.   Ideally the spherical area of each polygon will match the GLL weight (\"exact GLL areas\"), but not all tools can achieve exact areas.  Inexact areas does not impact the accuracy of the resulting mapping algorithm, it just means that mass will not be exactly conserved by the mapping algorithm. These files are often problematic to generate, so it is advised to avoid using workflows that require this. This was previously needed in E3SMv2 configurations by the cube_to_target topography dataset generation tool, but effort has been made to eliminate this requirement. It was also historically used in E3SMv1 to create ocean/atm mapping files (exact GLL areas was important here to conserve fluxes).</p> </li> <li> <p>\"latlon\" file: ex. \"ne4np4_latlon.nc\".   This file contains a list of all the GLL nodes in the mesh (in latitude/longitude coordinates).   The list of GLL nodes must be in the the internal HOMME global id ordering, matching the ordering used in EAM GLL grid output.   It also contains the connectivity of the GLL subcell grid. This file is no longer needed for any E3SM workflow.</p> </li> <li> <p>\"pentagons\" file: ex. \"ne30np4_pentagons.nc\". These files represent a mostly outdated approach of dealing with data on the np4 grid. While the np4 grid provides a spectral element representation of data with weights on GLL nodes, the term \"dual grid\" refers to a finite volume approximation of the same data by constructing polygons around each GLL node such that the cell area matches the weight of each node. The word \"pentagons\" was used because that is the most number of sides used by the polygons. These files are increasingly difficult to generate as the global resolution becomes finer because the polygon construction is a costly iterative process. Some tools to generate these files were either the NCL code <code>HOMME2SCRIP.ncl</code> or the matlab code <code>dualgridgenerate.m</code>. These types of files are no longer needed for any E3SM workflow, although some of these files can still be found in the E3SM data repository.</p> </li> </ul>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/","title":"Adding Support for New Grids","text":"<p>The purpose of this guide is to outline all the necessary steps for running E3SM on a new grid for the atmosphere and land components. The process is similar for uniform and regionally refined grids, although regionally refined cases will likely require some special considerations which will be noted where appropriate.</p> <p>If you wish to add a new ocean and sea-ice mesh you will need to use the compass tool to generate the mesh and dynamically adjusted initial condition. This procedure is detailed in a separate tutorial: https://mpas-dev.github.io/compass/latest/tutorials/dev_add_rrm.html</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/#step-by-step-guide","title":"Step-by-Step Guide","text":"<ol> <li>Generate a new grid<ol> <li>Generate a uniform grid file                       </li> <li>Generate a RRM grid file                           </li> </ol> </li> <li>Generate mapping files                                 </li> <li>Generate domain files                                  </li> <li>Generate a topography file                             </li> <li>Generate atmospheric initial condition                 </li> <li>Generate land input data (fsurdat)                   </li> <li>Generate land initial condition (finidat)            </li> <li>Generate a dry deposition file (depends on use case) </li> <li>Add new grid configuration to E3SM                     </li> </ol>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/","title":"Add New Grid Configuration to E3SM","text":"<p>In addition to generating input data to support a new grid, several modifications to XML files are required before E3SM can run with the grid. However, the specific changes will depend on how the grid will be used. The intended model configuration for the new grid will change which files need to be modified. For instance, a grid intended for aquaplanet experiments does not require as many changes as a historical AMIP-style run.</p> <p>The guidelines here are meant to outline various possible changes the user should consider when adding support for a new grid for the land and/or atmosphere. This document cannot be exhaustive, and it is important that the user understands the changes they are making. It is often useful to use a pre-existing grid configuration as a template. Note that the guidelines here are only relevant for \"horizontal\" grids in the atmosphere and/or land. Additional considerations are needed to support a new vertical grid in the atmosphere, which is a topic not currently covered here.</p> <p>When setting up a new grid for the atmosphere and/or land model, you will need to edit some or all of these files:</p> <ul> <li><code>cime_config/config_grids.xml</code></li> <li><code>components/eam/bld/config_files/horiz_grid.xml</code></li> <li><code>components/eam/bld/namelist_files/namelist_defaults_eam.xml</code></li> <li><code>components/eam/bld/namelist_files/namelist_definition.xml</code></li> <li><code>components/elm/bld/namelist_files/namelist_definition.xml</code></li> <li><code>components/elm/bld/namelist_files/namelist_defaults.xml</code></li> </ul>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#mono-grid-vs-bi-grid-vs-tri-grid","title":"Mono-Grid vs Bi-Grid vs Tri-Grid","text":"<p>The mono-bi-tri grid options in E3SM can be confusing, but it is important to understand what these terms mean when adding a new grid to E3SM. At the surface these terms mean that the whole model is either using a single grid for all componennt models, or a combination of 2 or 3 grids shared among the component models. Note that mono-grid and bi-grid terms often ignore that the river model needs to be on its own regular lat-lon grid.</p> <p>In practice, \"bi\" and \"tri\" grids are most commonly used and the main difference between them comes down to whether the land surface model shares a grid with the atmosphere or not. The component coupler is responsible for facilitating communication between component models, primarily through fluxes, and so mapping files are needed to support a combination of different grids. E3SMv3 uses a tri-grid configuration for production simulations.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#grid-naming-conventions","title":"Grid Naming Conventions","text":""},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#atmosphere","title":"Atmosphere","text":"<p>The atmosphere grid name should always indicate the base \"ne\" value and whether the physgrid is being used, usually by adding \".pg2\" at the end. For a regionally refined mesh (RRM) the grid name should always start with <code>ne0</code> followed a descriptive string that includes the region being refined and the degree of refinement.</p> <p>Example: <code>ne0np4_northamerica_30x4v1.pg2</code></p> <p>Note that this example differs from how the North American grid is currently named as <code>ne0np4_northamericax4v1.pg2</code>, which indicates a <code>4x</code> refinement, but does not indicate the base resolution, which is useful to know. The more informative grid name <code>ne0np4_northamerica_30x4v1.pg2</code> makes it clear that  unrefined regions are consistent with <code>ne30pg2</code>.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#river-or-land-in-tri-grid","title":"River (or Land in tri-grid)","text":"<p>For a rectilinear lat-lon grid used by the land and/or river models the grid name should start with \"r\" and typically use spacing less than one degree, so they indicate the nominal grid spacing, starting with \"0\" and omitting the decimal.</p> <p>Examples: <code>r05</code> is 0.5 degree spacing and <code>r0125</code> is 1/8 or 0.125 degree spacing.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#grid-aliases","title":"Grid Aliases","text":"<p>Grid aliases are short strings used to represent the complete set of grids used in the model configuration. For a mono-grid the convention is that the grid alias is the base mesh written twice to indicate that both atmosphere/land and ocean/sea-ice models are on the same grid. A mono-grid is typically only used for idealized simulations such as aqua planet and RCE, but can also be used for F-compsets if the CICE sea-ice model is used in place of the MPAS sea-ice model (MPASSI).</p> <p>Example: <code>ne30pg2_ne30pg2</code></p> <p>Bi-grid options should indicate two different grids used for atmosphere/land and ocean/sea-ice models.</p> <p>Example: <code>ne30pg2_IcoswISC30E3r5</code></p> <p>Tri-grid options should indicate three different grids used for atmosphere, land, and ocean/sea-ice models, with the land grid appearing in the middle.</p> <p>Example: <code>ne30pg2_r05_IcoswISC30E3r5</code></p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#grid-longnames","title":"Grid longnames","text":"<p>For any combination of grids, the full grid definition has a long form representation that spells out the grid in more detail.</p> <p>Example:</p> <pre><code>  alias: ne4pg2_ne4pg2\n\n  longname: a%ne4np4.pg2_l%ne4np4.pg2_oi%ne4np4.pg2_r%r05_g%null_w%null_z%null_m%oQU240\n  non-default grids are: atm:ne4np4.pg2  lnd:ne4np4.pg2  ocnice:ne4np4.pg2  rof:r05  glc:null  wav:null  \n  mask is: oQU240\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#defining-a-new-atmosphere-grid-for-eam","title":"Defining a New Atmosphere Grid for EAM","text":"<p>When defining a new atmosphere grid, information needs to be provided on how the grid is constructed.</p> <p>To define a new atmosphere grid a line must be added to <code>components/eam/bld/config_files/horiz_grid.xml</code> that indicates the number of elements and physics columns. In the lines below for <code>ne30np4</code> (without the physgrid) and <code>ne30pg2</code> (with the physgrid) you can see the value of <code>ne</code> is the same (number of elements along a cube edge), but the number of physics columns is different.</p> <pre><code>&lt;horiz_grid dyn=\"se\"    hgrid=\"ne30np4\"      ncol=\"48602\"   csne=\"30\"  csnp=\"4\" npg=\"0\" /&gt;\n&lt;horiz_grid dyn=\"se\"    hgrid=\"ne30np4.pg2\"  ncol=\"21600\"   csne=\"30\"  csnp=\"4\" npg=\"2\" /&gt;\n</code></pre> <p>An explanation of how to calculate the number of physics columns can be found here: Atmosphere Grid Overview.</p> <p>For a grid with regional refinement, follow the conventions of other grids in this file. There is no formula to calculate the number of columns for RRM grids, but the value can be obtained from the grid files used for mapping.</p> <pre><code>&lt;horiz_grid dyn=\"se\" hgrid=\"ne0np4_antarcticax4v1.pg2\"        ncol=\"48836\"  csne=\"0\" csnp=\"4\" npg=\"2\" /&gt;\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#defining-a-new-land-grid-for-elm","title":"Defining a New Land Grid for ELM","text":"<p>If you are creating a new grid that will be used by the land model the grid name needs to be added to the list <code>valid_values</code> associated with the <code>res</code> entry in the file <code>components/elm/bld/namelist_files/namelist_definition.xml</code> that holds the definition of namelist variables used by the land model.</p> <pre><code>&lt;entry id=\"res\" type=\"char*30\" category=\"default_settings\"\n       group=\"default_settings\"\n       valid_values=\n\"512x1024,360x720cru,128x256,64x128,...\"&gt;\nHorizontal resolutions\nNote: 0.1x0.1, 0.5x0.5, 5x5min, 10x10min, 3x3min and 0.33x0.33 are only used for ELM tools\n&lt;/entry&gt;\n</code></pre> <p>Simply add the name of your new grid to the list of <code>valid_values</code>.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#using-new-grids-in-default-namelists","title":"Using New Grids in Default Namelists","text":"<p>Each new grid will likely need various new default parameter values to be specified. These parameters can be set for individual simulations by editing the <code>user_nl_*</code> files in the case directory, but for these to become defaults any time the grid is used then new defaults need to be specified.</p> <p>The lists below show namelist parameters that may need to be specified for a new grid. The creator of a new grid is responsible for understanding these parameters and deciding when new defaults are appropriate.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#atmosphere-namelist-parameters","title":"Atmosphere Namelist Parameters","text":"<ul> <li><code>drydep_srf_file</code>     - Data file for surface aerosol deposition</li> <li><code>bnd_topo</code>            - Surface topography (smoothed for target grid)</li> <li><code>mesh_file</code>           - HOMME np4 mesh file (exodus format)</li> <li><code>se_tstep</code>            - HOMME time step [seconds]</li> <li><code>dt_remap_factor</code>     - HOMME vertical remap factor</li> <li><code>dt_tracer_factor</code>    - HOMME tracer advection factor</li> <li><code>hypervis_subcycle_q</code> - HOMME tracer hyperviscosity factor</li> </ul>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#land-namelist-parameters","title":"Land Namelist Parameters","text":"<ul> <li><code>fsurdat</code>             - Surface data file</li> <li><code>finidat</code>             - Land model initial condition file</li> <li><code>flanduse_timeseries</code> - Time-evolving land-use data file</li> </ul>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#defining-a-new-grid-for-cime","title":"Defining a new grid for CIME","text":"<p>The CIME Case Control system will configure a case according to the component set and grid alias you specify with the <code>--res</code> argument. As part of that configuration, CIME needs to know how to translate the grid alias and set the paths for domain and mapping files used by the grid so the model can find them at runtime.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#adding-a-new-grid-alias","title":"Adding a New Grid Alias","text":"<p>Grid aliases are defined in <code>cime_config/config_grids.xml</code>. Below is an example grid alias for the <code>ne30pg2_r05_IcoswISC30E3r5</code> grid used in E3SMv3 production simulations.</p> <pre><code>    &lt;model_grid alias=\"ne30pg2_r05_IcoswISC30E3r5\"&gt;\n      &lt;grid name=\"atm\"&gt;ne30np4.pg2&lt;/grid&gt;\n      &lt;grid name=\"lnd\"&gt;r05&lt;/grid&gt;\n      &lt;grid name=\"ocnice\"&gt;IcoswISC30E3r5&lt;/grid&gt;\n      &lt;grid name=\"rof\"&gt;r05&lt;/grid&gt;\n      &lt;grid name=\"glc\"&gt;null&lt;/grid&gt;\n      &lt;grid name=\"wav\"&gt;null&lt;/grid&gt;\n      &lt;mask&gt;IcoswISC30E3r5&lt;/mask&gt;\n    &lt;/model_grid&gt;\n</code></pre> <p>Add a similar block for your new grid.  Aliases must be unique within <code>config_grids.xml</code></p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#domain-files","title":"Domain Files","text":"<p>Domain files are needed for each grid and are specified in the <code>&lt;domains&gt;</code> section of <code>cime_config/config_grids.xml</code>. The default domain files are grouped by the atmosphere grid. The section for the typical <code>ne30pg2</code> grid looks as follows:</p> <pre><code>    &lt;domain name=\"ne30np4.pg2\"&gt;\n      &lt;nx&gt;21600&lt;/nx&gt;\n      &lt;ny&gt;1&lt;/ny&gt;\n      ...\n      &lt;file grid=\"atm|lnd\" mask=\"IcoswISC30E3r5\"&gt;$DIN_LOC_ROOT/share/domains/domain.lnd.ne30pg2_IcoswISC30E3r5.231121.nc&lt;/file&gt;\n      &lt;file grid=\"ice|ocn\" mask=\"IcoswISC30E3r5\"&gt;$DIN_LOC_ROOT/share/domains/domain.ocn.ne30pg2_IcoswISC30E3r5.231121.nc&lt;/file&gt;\n      ...\n      &lt;desc&gt;ne30np4.pg2 is Spectral Elem 1-deg grid w/ 2x2 FV physics grid per element:&lt;/desc&gt;\n    &lt;/domain&gt;\n</code></pre> <p>Notice the ellipses <code>...</code> are used here to omit all entries that are not relevant to the <code>ne30pg2_r05_IcoswISC30E3r5</code> grid. Also, note that all of these paths are relative to the input data path set as <code>DIN_LOC_ROOT</code> which has a default for each machine. See Generating Domain Files for information about creating domain files.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/add-grid-config/#coupler-mapping-files","title":"Coupler Mapping Files","text":"<p>The mapping files used by the component coupler to communicate fluxes between the component models must be specified in the <code>&lt;gridmaps&gt;</code> section of <code>cime_config/config_grids.xml</code>. These are organized for specific pairs of grids, such that tri-grids will require multiple sections. The entries relevant for <code>ne30pg2_r05_IcoswISC30E3r5</code> are shown below.</p> <pre><code>    &lt;gridmap atm_grid=\"ne30np4.pg2\" ocn_grid=\"IcoswISC30E3r5\"&gt;\n      &lt;map name=\"ATM2OCN_FMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_IcoswISC30E3r5_traave.20231121.nc&lt;/map&gt;\n      &lt;map name=\"ATM2OCN_VMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_IcoswISC30E3r5_trbilin.20231121.nc&lt;/map&gt;\n      &lt;map name=\"ATM2OCN_SMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_IcoswISC30E3r5-nomask_trbilin.20231121.nc&lt;/map&gt;\n      &lt;map name=\"OCN2ATM_FMAPNAME\"&gt;cpl/gridmaps/IcoswISC30E3r5/map_IcoswISC30E3r5_to_ne30pg2_traave.20231121.nc&lt;/map&gt;\n      &lt;map name=\"OCN2ATM_SMAPNAME\"&gt;cpl/gridmaps/IcoswISC30E3r5/map_IcoswISC30E3r5_to_ne30pg2_traave.20231121.nc&lt;/map&gt;\n      &lt;map name=\"ATM2ICE_FMAPNAME_NONLINEAR\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_IcoswISC30E3r5_trfvnp2.20231121.nc&lt;/map&gt;\n      &lt;map name=\"ATM2OCN_FMAPNAME_NONLINEAR\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_IcoswISC30E3r5_trfvnp2.20231121.nc&lt;/map&gt;\n    &lt;/gridmap&gt;\n</code></pre> <pre><code>    &lt;gridmap atm_grid=\"ne30np4.pg2\" lnd_grid=\"r05\"&gt;\n      &lt;map name=\"ATM2LND_FMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_r05_traave.20231130.nc&lt;/map&gt;\n      &lt;map name=\"ATM2LND_FMAPNAME_NONLINEAR\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_r05_trfvnp2.230516.nc&lt;/map&gt;\n      &lt;map name=\"ATM2LND_SMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_r05_trbilin.20231130.nc&lt;/map&gt;\n      &lt;map name=\"LND2ATM_FMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_r05_to_ne30pg2_traave.20231130.nc&lt;/map&gt;\n      &lt;map name=\"LND2ATM_SMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_r05_to_ne30pg2_traave.20231130.nc&lt;/map&gt;\n    &lt;/gridmap&gt;\n</code></pre> <pre><code>    &lt;gridmap atm_grid=\"ne30np4.pg2\" rof_grid=\"r05\"&gt;\n      &lt;map name=\"ATM2ROF_FMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_r05_traave.20231130.nc&lt;/map&gt;\n      &lt;map name=\"ATM2ROF_FMAPNAME_NONLINEAR\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_r05_trfvnp2.230516.nc&lt;/map&gt;\n      &lt;map name=\"ATM2ROF_SMAPNAME\"&gt;cpl/gridmaps/ne30pg2/map_ne30pg2_to_r05_trbilin.20231130.nc&lt;/map&gt;\n    &lt;/gridmap&gt;\n</code></pre> <p>Note that all of these paths are relative to the input data path set as <code>DIN_LOC_ROOT</code> which has a default for each machine. Mapping files can be created with the ncremap utility in NCO</p> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-RRM-grid-file/","title":"Generate a RRM Grid File with SQuadGen","text":"<p>There are three ways to create a regionally refined grid file for E3SM using SQuadGen, which are outlined below.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-RRM-grid-file/#using-a-png-image-file","title":"Using a PNG Image File","text":"<p>The most common is to create a grayscale <code>.png</code> image file with the correct aspect ratio that defines one or more refinement areas.</p> <p>The input PNG is a grayscale representation of a regular latitude-longitude grid (i.e. equiangular projection) with the level of shading determining the level of refinement: white for the coarse grid and black where maximum refinement is desired.  Shades of gray can be used to impose intermediate levels of refinement.  To determine the refinement region on the cubed-sphere mesh, each volume on the cubed-sphere grid is sampled from the PNG image to determine the desired level of refinement on that grid.  The transition region is then built around each refinement region using \"paving\" tiles, with optional smoothing of edges.</p> <p>Once the PNG file is created it can be used to generate the new exodus file. The example below creates a 3x refinement based on the ne30 grid that, which it typically used for production runs.</p> <pre><code>./SQuadGen --refine_file ${GRIDNAME}.png --resolution 30 --refine_level 3 --refine_type LOWCONN --smooth_type SPRING --smooth_dist 3 --smooth_iter 20 --output ${DATA_PATH}/${GRIDNAME}.g\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-RRM-grid-file/#creating-the-png-file-with-an-image-editor","title":"Creating the PNG file with an image editor","text":"<p>It is often useful to start with a background image that already has the correct aspect ratio and is centered on 0 degrees longitude. The following PNG image (with base grid ne16) can be used as a template for drawing your refinement region so that grid lines are parallel to cubed-sphere arcs. This PNG file can be set as a background image in an editor like Photoshop or GIMP.</p> <p></p> <p>The refined region is then drawn on top of this image in a separate layer.  You can set the transparency between layers at, i.e. 50% with the grayscale image in front of the template.  When you are ready to save the image, you can change the transparency to 0% and export the image as a PNG.</p> <p>If a different \"base grid\" image is desired with more or less detail, this can be generated with:</p> <pre><code>./SQuadGen --resolution &lt;ne&gt; --output base_grid.g\n</code></pre> <p>where <code>ne</code> is your desired base grid resolution.  The grid image can then be plotted with the <code>gridplot.ncl</code> script that is included with SQuadGen. Alternatively, PyNGL is a python replacement for NCL that also has good support for plotting unstructured meshes (despite being in \"maintenance mode\").</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-RRM-grid-file/#creating-the-png-file-with-a-python-script","title":"Creating the PNG file with a python script","text":"<p>The previous method of using an image editor can be somewhat cumbersome and inaccurate. Scripted generation of the refinement region is possible with python.</p> <p>In the first example below a SCRIP format grid file is used so that individual elements can be shaded, but this method was intended for the cell shading capability of PyNGL. The SCRIP file used in these examples can be generated with 3 simple TempestRemap commands:</p> <pre><code>NE=30\nGenerateCSMesh --alt --res ${NE} --file ${GRID_FILE_PATH}/ne${NE}.g\nGenerateVolumetricMesh --in ${GRID_FILE_PATH}/ne${NE}.g --out ${GRID_FILE_PATH}/ne${NE}pg2.g --np 2 --uniform\nConvertMeshToSCRIP --in ${GRID_FILE_PATH}/ne${NE}pg2.g --out ${GRID_FILE_PATH}/ne${NE}pg2_scrip.nc\n</code></pre> <p>For other plotting libraries it may be preferrable to use an equiangular SCRIP grid file, which can be generated with a simple NCO command. Here is an example of a 1 degree grid:</p> <pre><code>ncremap -G ttl=Equi-Angular grid 1x1 degree, dimensions 180x360, cell edges on Poles/Equator and Prime Meridian/Date Line#latlon=180,360#lat_typ=uni#lon_typ=grn_wst -g /Users/zender/data/grids/cmip6_180x360_scrip.nc\n</code></pre> <p>Below is some example python code to generate a \"feathered\" refined region around a given central point. The resulting numpy array can then be plotted with your preferred plotting library (ex. matplotlib, pyngl)</p> generate_RRM_png_feathered.py <pre><code>import os, ngl, numpy as np, xarray as xr\ntarget_lat, target_lon = 39.7392, 360-104.9903 # Denver, CO\n#-------------------------------------------------------------------------------\nscrip_ds = xr.open_dataset(os.getenv('HOME')+'/E3SM/data_grid/ne30pg2_scrip.nc')\nncol = len(scrip_ds['grid_area'])\ndeg_to_rad,rad_to_deg = np.pi/180., 180./np.pi\n#-------------------------------------------------------------------------------\n# method for calculating the length of great circle arcs\ndef calc_great_circle_distance(lat1,lat2,lon1,lon2):\n  ''' input should be in degrees '''\n  dlon = lon2 - lon1\n  cos_dist = np.sin(lat1*deg_to_rad)*np.sin(lat2*deg_to_rad) + \\\n             np.cos(lat1*deg_to_rad)*np.cos(lat2*deg_to_rad)*np.cos(dlon*deg_to_rad)\n  # print( str(cos_dist.min()) +\"   \"+ str(cos_dist.max()) )\n  cos_dist = np.where(cos_dist&gt; 1.0, 1.0,cos_dist)\n  cos_dist = np.where(cos_dist&lt;-1.0,-1.0,cos_dist)\n  dist = np.arccos( cos_dist )\n  return dist\n#-------------------------------------------------------------------------------\n# method for defining a feathered refinement region\ndef define_refinement( ncol, dmin, dmax,\n                      target_lat, target_lon,\n                      center_lat, center_lon,\n                      refine_level):\n  # loop through all points and calculate distance to center\n  # NOTE - distance units are in radians (max value = pi)\n  for n in range(ncol):\n    d = calc_great_circle_distance(target_lat, center_lat[n] ,target_lon, center_lon[n])\n    if d&lt;=dmin:            refine_level[n] = 1\n    if d&gt;dmin and d&lt;=dmax: refine_level[n] = ( dmax - d ) / ( dmax - dmin )\n    if d&gt;dmax:             refine_level[n] = 0\n  return refine_level\n#-------------------------------------------------------------------------------\n# define refinement regions - distance thesholds in radians\nmin_threshold =  1*deg_to_rad\nmax_threshold = 10*deg_to_rad\nrefine_level = np.zeros(ncol)\n# define continuous refinement based on distance\ndefine_refinement( ncol, min_threshold, max_threshold,\n                 target_lat, target_lon,\n                 scrip_ds['grid_center_lat'].values,\n                 scrip_ds['grid_center_lon'].values,\n                 refine_level )\n#-------------------------------------------------------------------------------\n# create PNG image using PyNGL\nwkres = ngl.Resources()\nnpix = 4096; wkres.wkWidth,wkres.wkHeight=npix,npix\nwkres.wkForegroundColor = [1.,1.,1.]\nwkres.wkBackgroundColor = [1.,1.,1.]\nwks = ngl.open_wks('png',fig_file,wkres)\n# Create custom colormap\nnum_clr = 50\nfill_clr = np.zeros((num_clr,3))\nfor n in range(num_clr): fill_clr[n,:] = float(n) / float(num_clr)\n# define plot resources\nres = ngl.Resources()\nres.nglDraw               = False\nres.nglFrame              = False\nres.tmXTOn                = False\nres.tmXBOn                = False\nres.tmYLOn                = False\nres.tmYROn                = False\nres.cnFillOn              = True\nres.cnLinesOn             = False\nres.cnLineLabelsOn        = False\nres.cnInfoLabelOn         = False\nres.mpGridAndLimbOn       = False\nres.mpPerimOn             = False\nres.mpOutlineBoundarySets = 'NoBoundaries'\nres.lbLabelBarOn          = False\nres.cnFillPalette         = fill_clr\nres.tfPolyDrawOrder = 'PreDraw'\nres.sfXArray      = scrip_ds['grid_center_lon'].values\nres.sfYArray      = scrip_ds['grid_center_lat'].values\n#-------------------------------------------------------------------------------\n# Use Raster fill mode instead of cell fill\nres.cnFillMode          = 'RasterFill'\nplot = ngl.contour_map(wks,refine_level,res)\n#-------------------------------------------------------------------------------\n# use pre-draw polygon to fill in white areas near poles\n#-------------------------------------------------------------------------------\ngsres             = ngl.Resources()\ngsres.gsFillColor = 'black'\ngsres.gsEdgesOn   = False\npy = [ -89.9,  89.9, 89.9,-89.9, -89.9]\npx = [ 360. , 360. ,  0. ,  0. , 360. ]\nngl.polygon(wks, plot, px, py, gsres)\n#-------------------------------------------------------------------------------\nngl.draw(plot)\nngl.frame(wks)\nngl.end()\n#-------------------------------------------------------------------------------\n# crop white space from png file\nif os.path.isfile(f'{fig_file}.png') :\n  cmd = f'convert -trim +repage {fig_file}.png {fig_file}.png'\n  os.system(cmd)\n  os.system(cmd) # second call helps remove gray lines at edge\n  # if npix = 4096:\nelse:\n  raise FileNotFoundError(f'\\n{fig_file}.png does not exist?!\\n')\n#-------------------------------------------------------------------------------\n# apply gaussian blur\nfrom PIL import Image, ImageFilter\nimage = Image.open(f'{fig_file}.png')\nfor n in range(nsmooth): image = image.filter(ImageFilter.GaussianBlur(radius=6))\nimage = image.save(f'{fig_file}.png')\n#-------------------------------------------------------------------------------\nprint(); print(f'  {fig_file}.png'); print()\n#-------------------------------------------------------------------------------\n</code></pre> <p>The next example creates a refinement region based on land fraction.</p> generate_RRM_png_landfrac.py <pre><code>import os, ngl, numpy as np, xarray as xr\nrefine_level = 1\nnsmooth      = 4\nland_data_file = 'inputdata/atm/cam/topo/USGS-gtopo30_0.9x1.25_remap_c051027.nc'\nds = xr.open_dataset(land_data_file)\nlat = ds['lat']\nlon = ds['lon']\nlandfrac = ds['LANDFRAC']\nnlat,nlon = len(lat),len(lon)\n#-------------------------------------------------------------------------------\n# switch to center data on prime meridian\nlon_tmp = np.zeros(nlon)\nlon_tmp[:int(nlon/2)] = lon[-int(nlon/2):].values - 360.\nlon_tmp[int(nlon/2):] = lon[ :int(nlon/2)].values\nlon = xr.DataArray(lon_tmp,dims={'lon':lon})\nlandfrac_tmp = np.zeros(landfrac.shape)\nlandfrac_tmp[:,:int(nlon/2)] = landfrac[:,-int(nlon/2):].values\nlandfrac_tmp[:,int(nlon/2):] = landfrac[:, :int(nlon/2)].values\nlandfrac = xr.DataArray(landfrac_tmp,dims={'lat':lat,'lon':lon})\n#-------------------------------------------------------------------------------\n# mask out anarctica\nfor j in range(nlat):\n  if lat[j]&lt;-60: landfrac[j,:] = 0.0\n#-------------------------------------------------------------------------------\n# Apply 2D smoothing to feather edges at coastlines\nif nsmooth&gt;0:\n  for s in range(nsmooth):\n    tmp = np.copy(landfrac)\n    for j in range(1,nlat-2):\n      for i in range(nlon):\n        im1 = nlon-1 if i==0      else i-1\n        ip1 = 0      if i==nlon-1 else i+1\n        smooth_y  = ( 0.25*tmp[j-1,i  ] + 0.5*tmp[j,i] + 0.25*tmp[j+1,i  ] )\n        smooth_x  = ( 0.25*tmp[j  ,im1] + 0.5*tmp[j,i] + 0.25*tmp[j  ,ip1] )\n        smooth_d1 = ( 0.25*tmp[j-1,im1] + 0.5*tmp[j,i] + 0.25*tmp[j+1,ip1] )\n        smooth_d2 = ( 0.25*tmp[j-1,ip1] + 0.5*tmp[j,i] + 0.25*tmp[j+1,im1] )\n        landfrac[j,i] = ( smooth_y + smooth_x + smooth_d1 + smooth_d2 ) / 4.\n  for j in range(nlat):\n    for i in range(nlon):\n      if landfrac[j,i]&lt;0.8: landfrac[j,i] = 0.0\n#-------------------------------------------------------------------------------\n# Generate image of refined region using MPL\nfig = plt.figure(figsize=(36/4,18/4))\nax = fig.add_subplot(1,1,1)\ncs = ax.contourf(lon, lat, landfrac, levels=[0.0,0.5,1.0],colors=['#000000','#FFFFFF','#FFFFFF'])\nax.xaxis.set_major_locator(plt.NullLocator())\nax.yaxis.set_major_locator(plt.NullLocator())\nfig.tight_layout()\nplt.axis('off')\nplt.savefig(refine_png_file,pad_inches=0,bbox_inches='tight')\nprint(f'\\nrefine_png_file: {refine_png_file}\\n')\n#-------------------------------------------------------------------------------\n# more smoothing via gaussian blur from the pillow package\nfrom PIL import Image, ImageFilter\nimage = Image.open(f'{refine_png_file}')\nfor n in range(nsmooth): image = image.filter(ImageFilter.GaussianBlur(radius=3))\nimage = image.save(f'{refine_png_file}')\n#-------------------------------------------------------------------------------\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-RRM-grid-file/#using-a-refinement-map","title":"Using a Refinement Map","text":"<p>If <code>--loadcsrefinementmap</code> is specified the refinement map will be reloaded from a previously generated refine_map.dat file.  This option allows for manual editing of the cubed-sphere refine map.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-RRM-grid-file/#using-rectangular-patches","title":"Using Rectangular Patches","text":"<p>SQuadGen can now be used with the <code>--refine_rect</code> argument to define rectangular patches on the fly without the need for an image file. This argument takes the latitude and longitude corner locations that define the quadralateral, as well as the desirec refinement level:</p> <pre><code>--refine_rect \"&lt;lon0&gt;,&lt;lat0&gt;,&lt;lon1&gt;,&lt;lat1&gt;,&lt;refinement level&gt;\"\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-RRM-grid-file/#a-note-on-testing-rrm-quality","title":"A Note on testing RRM Quality","text":"<p>RRM \"quality\" can be measured with the \u201cMax Dinv-based element distortion\u201d metric.  This will be printed in the log file for standalone HOMME or EAM simulations and can be obtained from the log files during the topography generation process.  </p> <p>This metric measures how distorted the elements become in the mesh transition region.  It is the ratio of the two singular values of the 2x2 derivative matrix of the element map to the unit square, representing the ration of the largest length scale to the smallest length scale.  </p> <p>A grid of perfect quadrilaterals will have a value of 1.0.  The equal-angle cubed-sphere grid has a value of 1.7.   A high quality regionally refined grid will have a value less than 4.  With a high quality grid, usually one can run with the timesteps used in a uniform grid with matching fine resolution.  RRM grids with a value &gt; 4 may require smaller timesteps for stability.   Very large values indicate a problem with the grid and it should be redesigned.</p> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-atm-initial-condition/","title":"Generate Atmospheric Initial Condition","text":"<p>Warning</p> <p>This page is still under construction</p> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-dry-deposition/","title":"Generate a Dry Deposition File","text":"<p>Atmospheric dry deposition of aerosols at the surface depends on certain surface properties, such as soil type. In some cases these calculations can be handled in the land model and passed to the atmosphere through the coupler. However, with modal areosols this method is not adequate and we must recalculate these fields in the atmosphere (see subroutine <code>interp_map</code> in <code>components/eam/src/chemistry/mozart/mo_drydep.F90</code>).</p> <p>For unstructured grids it was determined to create this offline interpolation tool rather than generalize the subroutine interp_map.</p> <p>Be sure to activate the E3SM unified environment when performing the steps below.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-dry-deposition/#map-file-generation","title":"Map File Generation","text":"<p>The destination atmosphere grid file should be on the \"pg2\" grid. These grid files are easily generated with three TempestRemap commands as follows:</p> <pre><code>NE=30\nGenerateCSMesh --alt --res ${NE} --file ${GRID_ROOT}/ne${NE}.g\nGenerateVolumetricMesh --in ${GRID_ROOT}/ne${NE}.g --out ${GRID_ROOT}/ne${NE}pg2.g --np 2 --uniform\nConvertMeshToSCRIP --in ${GRID_ROOT}/ne${NE}pg2.g --out ${GRID_ROOT}/ne${NE}pg2_scrip.nc\n</code></pre> <p>The map file used to generate atmsrf files can be created a few different ways. For a typical E3SM configuration we recommend using a conservative, monotone map. Here is an example command that can be used to generate one (as of NCO version 5.2.2)</p> <pre><code>SRC_GRID=${DIN_LOC_ROOT}/../mapping/grids/1x1d.nc\nDST_GRID=${GRID_ROOT}/ne${NE}pg2_scrip.nc\nMAP_FILE=${MAP_ROOT}/map_1x1_to_ne${NE}pg2_traave.nc\nncremap -5 -a traave --src_grd=${SRC_GRID} --dst_grd=${DST_GRID} --map_file=${MAP_FILE}\n</code></pre> <p>For RRM grids the last two commands would be used on the exodus file produced by SQuadGen (See the Adding Support for New Grids tutorial for more information.).</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-dry-deposition/#generating-a-new-dry-desposition-file-atmsrf","title":"Generating a New Dry Desposition File (atmsrf)","text":"<pre><code>VEGE_FILE=${DIN_LOC_ROOT}/atm/cam/chem/trop_mozart/dvel/regrid_vegetation.nc\nSOIL_FILE=${DIN_LOC_ROOT}/atm/cam/chem/trop_mozart/dvel/clim_soilw.nc\n\npython ~/E3SM/mkatmsrffile.py --map_file=${MAP_FILE} --vegetation_file=${VEGE_FILE} --soil_water_file=${SOIL_FILE} --output_root=${atmsrf_root} --dst_grid=ne${NE}pg2 --date-stamp=20240613\n</code></pre> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-lnd-initial-condition/","title":"Generate Land Initial Condition (finidat)","text":"<p>Warning</p> <p>This page is still under construction</p> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-lnd-input-data/","title":"Generate Land Input Data (fsurdat)","text":"<p>Warning</p> <p>This page is still under construction</p> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-mapping-files/","title":"Generate mapping files","text":"<p>In order to pass data between different components at runtime, a set of mapping files between each component is generated offline.</p> <p>See Recommended Mapping Procedures for E3SM Atmosphere Grids for a discussion of different remap algorithms and when to use each.</p> <p>TempestRemap and ESMF are the backends that generate the mapping weights, but this is all nicely encapsulated using ncremap. Tempest is the preferred method for creating mapping files. ncremap will call TempestRemap or ESMF depending on the algorithm argument and input file types. If exodus files are provided (i.e. <code>*.g</code>) then TempestRemap commands will be used. The ESMF tools are adequate for making atmosphere-only-type component sets for E3SM, but this tool is less conservative than TempestRemap. If you are making grids for a coupled run, then TempestRemap should be used wherever possible. Currently, TempestRemap has trouble with masked grids, such those that are needed for land data generation, so ESMF is still required for certain tasks.</p> <p>Note</p> <p>This page is still under construction</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-mapping-files/#activate-the-e3sm-unified-env","title":"Activate the E3SM Unified Env","text":"<p>Perlmutter (NERSC):</p> <pre><code>source /global/common/software/e3sm/anaconda_envs/load_latest_e3sm_unified_pm-cpu.sh\n</code></pre> <p>Chrysalis (LCRC):</p> <pre><code>source /lcrc/soft/climate/e3sm-unified/load_latest_e3sm_unified_chrysalis.sh\n</code></pre> <p>For unsupported machines you may need to build the unified environment:</p> <pre><code>conda install -c conda-forge -c e3sm e3sm-unified\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-mapping-files/#specify-the-input-data-path","title":"Specify the Input Data Path","text":"<p>Perlmutter (NERSC):</p> <p>Chrysalis (LCRC):</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-mapping-files/#create-mapping-files","title":"Create Mapping Files","text":"<p>ncremap provides a convient</p> <p>We can use ncremap to generate ALL the needed mapping files between two grids, in this example the ne4 atmosphere and the oQU240 ocean grid (for the moment, we will put the land on the same grid as the atmosphere):</p> <pre><code>atm_grid_file=ne4.g\nocn_grid_file=/global/cfs/cdirs/e3sm/inputdata/cpl/gridmaps/oQU240/ocean.QU.240km.scrip.151209.nc\ncd ${output_root} &amp;&amp; ncremap -P mwf -s $ocn_grid_file -g $atm_grid_file --nm_src=oQU240 --nm_dst=ne4np4 --dt_sng=20181114\n</code></pre> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/","title":"Generate a Topography File","text":"<p>Topography needs to be interpolated from a high resolution dataset, and then doctored a bit to allow the model to run stably with the new topography. More information can be found in the following paper:  </p> <p>P.H. Lauritzen, J.T. Bacmeister, P.F. Callaghan, M. Taylor,  NCAR_Topo (v1.0): NCAR global model topography generation software for unstructured grids, Geosci. Model Dev., 8, 3975-3986, 2015.</p> <p>Typically, input topography data generation for E3SM starts with a high resolution source dataset (<code>USGS-topo-cube3000.nc</code>). This is a high-resolution topography dataset on a 3km cubed sphere grid derived from 1 km resolution source data.  This file is located in the CESM inputdata server here.</p> <p>For target resolutions of 3 km or finer it is recommended to use an even higher resolution source dataset (<code>USGS-topo-cube12000.nc</code>), which was created by Jishi Zhang in 2024. This file has a resolution of 750m created from a  500m/250m USGS GMTED2010 source DEM dataset (see here for more information).</p> <p>For testing the topography workflow the mapping between the ne3000 data is too burdensome, so a ne90pg1 (i.e. 1-degree) version of this data was created to allow efficient testing. This file can be found on various supported machines at <code>${DIN_LOC_ROOT}/atm/cam/hrtopo/USGS-topo-cube90.nc</code>.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#data-processing-requirements","title":"Data Processing Requirements","text":"<p>The workflow to generate topography data for the atmosphere model must address the following requirements:</p> <ul> <li>The dycore needs surface geopotential (<code>phi_s</code>) at GLL nodes (np4)</li> <li>The physics needs various things at FV cell centers (pg2)<ul> <li>surface geopotential (<code>phi_s</code>)</li> <li>sub-grid variance of topography (<code>SGH</code> and <code>SGH30</code>)</li> <li>Land area fraction (<code>LANDFRAC</code>)</li> </ul> </li> <li>The np4 to pg2 map of <code>phi_s</code> data must be equal to the FV <code>phi_s</code> data</li> <li>HOMME's smoothing operator must be used on <code>phi_s</code> for stability</li> </ul>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#topography-smoothing","title":"Topography Smoothing","text":"<p>Smoothing of the input surface geopotential (<code>phi_s</code>) is an essential step to ensure numerical stability of the atmospheric dynamics, but the smoothing much be done in a way that is consistent with the internal Laplacian used by the HOMME dycor. To accomplish this we use <code>homme_tool</code>, which is a standalone build of the HOMME dycor.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#building-homme_tool","title":"Building homme_tool","text":"<p>Note</p> <p>homme_tool is not routinely tested on all supported machines, and the build can be broken without anyone noticing. If you encounter problems building homme_tool please reach out on the e3sm_help slack channel and include a detailed description of the error and the commands you used to produce the error.</p> <p>Building <code>homme_tool</code> is a critical preliminary step to the topography generation workflow described below. The build process requires the user to select the appropriate cmake file that contains machine-specific settings (see <code>mach_file</code> below).</p> <pre><code># Set the machine specific environment\ncd ${e3sm_root}/components/homme\n${e3sm_root}/cime/CIME/scripts/configure &amp;&amp; source .env_mach_specific.sh\n\n# Specify machine configuration file\nmach_file=${e3sm_root}/components/homme/cmake/machineFiles/perlmutter-gnu.cmake\n# mach_file=${e3sm_root}/components/homme/cmake/machineFiles/chrysalis.cmake\n\ncmake -C ${mach_file} \\\n-DBUILD_HOMME_THETA_KOKKOS=FALSE \\\n-DBUILD_HOMME_PREQX_KOKKOS=FALSE \\\n-DHOMME_ENABLE_COMPOSE=FALSE \\\n-DHOMME_BUILD_EXECS=FALSE \\\n-DBUILD_HOMME_TOOL=TRUE \\\n-DBUILD_HOMME_WITHOUT_PIOLIBRARY=FALSE \\\n-DPREQX_PLEV=26 \\\n${e3sm_root}/components/homme\n\nmake -j4 homme_tool\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#sub-grid-topography-variations","title":"Sub-Grid Topography Variations","text":"<p>Certain physics calculations in the atmosphere require a characterization of the unresolved topography. This is provided in the input data as <code>SGH</code> and <code>SGH30</code>. These quantities need to be calculated by the <code>cube_to_target</code> tool that is included in the E3SM source  code. Similar to <code>homme_tool</code>, this tool can often be broken when the user goes to use it. Luckily, this tool is much simpler with fewer dependencies. Nevertheless, it is good to make sure the tools builds successfully before creating a new topography file.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#building-cube_to_target","title":"Building cube_to_target","text":"<p>The following commands were working on both Perlmutter/NERSC and Chrysalis/LCRC machines as of 2024.</p> <pre><code>cd ${e3sm_root}/components/eam/tools/topo_tool/cube_to_target\n\n${e3sm_root}/cime/CIME/scripts/configure &amp;&amp; source .env_mach_specific.sh\n\nmake\n</code></pre> <p>Note</p> <p>You can safely ignore compiler warnings that look like <code>Warning: Rank mismatch...</code>. These are a result of how we interface with the netcdf fortran routines, but fixing the warnings by switching from <code>#include &lt;netcdf.inc&gt;</code> to <code>use netcdf</code> can lead to other problems on certain machines.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#step-by-step-topography-generation","title":"Step-by-Step Topography Generation","text":"<p>Note</p> <p>Copying and pasting the relevant steps below is an easy way to step through the blocks of commands. Alternatively, a batch script is provided below that can be used to execute all steps at once in a batch job.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#activate-the-e3sm-unified-env","title":"Activate the E3SM Unified Env","text":"<p>Perlmutter (NERSC):</p> <pre><code>source /global/common/software/e3sm/anaconda_envs/load_latest_e3sm_unified_pm-cpu.sh\n</code></pre> <p>Chrysalis (LCRC):</p> <pre><code>source /lcrc/soft/climate/e3sm-unified/load_latest_e3sm_unified_chrysalis.sh\n</code></pre> <p>For unsupported machines you may need to build the unified environment:</p> <pre><code>conda install -c conda-forge -c e3sm e3sm-unified\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#specify-source-and-target-resolution","title":"Specify Source and Target Resolution","text":"<p>We will environement variables to specify the source and target grid resolutions based on the \"ne\" value of the cubed sphere grid (\"ne\" is the number of elements along a cube edge). A Typical use case will be mapping data from <code>ne3000pg1</code> to a chosen target resolution, in this case <code>ne30</code>:</p> <pre><code>NE_SRC=3000\nNE_DST=30\n</code></pre> <p>For testing use a special <code>ne90pg1</code> dataset:</p> <pre><code>NE_SRC=90\nNE_DST=4\n</code></pre> <p>Note</p> <p>For grids with regional refinement (RRM) there is no corresponding \"ne\" value - so a slightly modified workflow is needed. This entails modifying the grid file generation step, and then modifying topo and map file paths to accomodate the new RRM grid name.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#specify-file-paths","title":"Specify File Paths","text":"<p>First we need to set some enviroment variables that point to various \"root\" directories where we will be writing and/or reading files. It</p> <pre><code>e3sm_root=?    # path to E3SM source\ngrid_root=?    # path to write grid files\nmap_root=?     # path to write map files\ntopo_root=?    # path to write new topo files\nDIN_LOC_ROOT=? # path to E3SM inputdata\n</code></pre> <p>Example path settings:</p> <ul> <li> <p>Perlmutter (NERSC):</p> <pre><code>e3sm_root=${SCRATCH}/tmp_e3sm_src # make sure this contains an up-to-date clone of E3SM\ngrid_root=${SCRATCH}/e3sm_scratch/files_grid\nmap_root=${SCRATCH}/e3sm_scratch/files_map\ntopo_root=${SCRATCH}/e3sm_scratch/files_topo\nDIN_LOC_ROOT=/global/cfs/cdirs/e3sm/inputdata\n</code></pre> </li> <li> <p>Chrysalis (ANL/LCRC):</p> <pre><code>SCRATCH=/lcrc/group/e3sm/${USER}/scratch/chrys\ne3sm_root=${SCRATCH}/tmp_e3sm_src # make sure this contains an up-to-date clone of E3SM\ngrid_root=${SCRATCH}/files_grid\nmap_root=${SCRATCH}/files_map\ntopo_root=${SCRATCH}/files_topo\nDIN_LOC_ROOT=/lcrc/group/e3sm/data/inputdata\n</code></pre> </li> </ul> <p>Make sure the root directories exist:</p> <pre><code>mkdir -p ${grid_root} ${map_root} ${topo_root}\nls -ld ${grid_root} ${map_root} ${topo_root} ${e3sm_root} ${DIN_LOC_ROOT}\n</code></pre> <p>Now specify all the files that we will need for, including map files and temporary topo data.</p> <pre><code>timestamp=$(date +%Y%m%d)\ntopo_file_0=${DIN_LOC_ROOT}/atm/cam/hrtopo/USGS-topo-cube${NE_SRC}.nc\ntopo_file_1=${topo_root}/tmp_USGS-topo_ne${NE_DST}np4.nc\ntopo_file_2=${topo_root}/tmp_USGS-topo_ne${NE_DST}np4_smoothedx6t.nc\ntopo_file_3=${topo_root}/USGS-topo_ne${NE_DST}np4_smoothedx6t_${timestamp}.nc\n\nmap_file_src_to_np4=${map_root}/map_ne${NE_SRC}pg1_to_ne${NE_DST}np4_fv2se_flx.nc\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#create-grid-files","title":"Create Grid Files","text":"<pre><code># Grid for source high res topo\nGenerateCSMesh --alt --res ${NE_SRC}  --file ${grid_root}/exodus_ne${NE_SRC}.g\nConvertMeshToSCRIP --in ${grid_root}/exodus_ne${NE_SRC}.g  --out ${grid_root}/scrip_ne${NE_SRC}pg1.nc\n\n# Grid for target EAM grid\nGenerateCSMesh --alt --res ${NE_DST} --file ${grid_root}/exodus_ne${NE_DST}.g\nGenerateVolumetricMesh --in ${grid_root}/exodus_ne${NE_DST}.g --out ${grid_root}/exodus_ne${NE_DST}pg2.g --np 2 --uniform\nConvertMeshToSCRIP --in ${grid_root}/exodus_ne${NE_DST}pg2.g --out ${grid_root}/scrip_ne${NE_DST}pg2.nc\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#create-map-files","title":"Create Map Files","text":"<p>Warning</p> <p>This step can potentially take a very long time - several hours for each map file in some cases! The use of <code>--mpi_nbr=32</code> will leverage parallelization via <code>mbtemptest</code> to dramatically reduce the time to generate mapping files, but this may not work on all machines. Feel free to experiment with a different number of tasks to optimize for the machine you are using. You can also drop this argument entirely if it is causing problems, but be sure to plan for hours of execution time.</p> <p>Note</p> <p>If you see an error from these <code>ncremap</code> commands that looks like: <code>srun: error: Job request does not match any supported policy.</code> and you are on a login node then you will need to either launch an interactive compute node or use a batch job script.</p> <pre><code># Create map from source to target np4 \nncremap ${MAP_ARGS} -a fv2se_flx \\\n--src_grd=${grid_root}/scrip_ne${NE_SRC}pg1.nc  \\\n--dst_grd=${grid_root}/exodus_ne${NE_DST}.g \\\n--map_file=${map_file_src_to_np4} \\\n--tmp_dir=${map_root}\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#remap-topograpy","title":"Remap Topograpy","text":"<p>The first command here will essentially create a copy of the source data, which is needed later on when calculating SGH.</p> <pre><code># Map high-res topo to target np4 grid\nncremap -m ${map_file_src_to_np4} -i ${topo_file_0} -o ${topo_file_1}\n\n# Compute phi_s on the target np4 grid\nncap2 -O -s 'PHIS=terr*9.80616' ${topo_file_1} ${topo_file_1}\n\n# rename the column dimension to be \"ncol\"\nncrename -d grid_size,ncol ${topo_file_1}\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#apply-smoothing","title":"Apply Smoothing","text":"<p>Make sure <code>homme_tool</code> has been built following the instructions above.</p> <pre><code>cd ${e3sm_root}/components/homme\n${e3sm_root}/cime/CIME/scripts/configure &amp;&amp; source .env_mach_specific.sh\n\ncat &lt;&lt;EOF &gt; input.nl\n&amp;ctl_nl\nmesh_file = \"${grid_root}/exodus_ne${NE_DST}.g\"\nsmooth_phis_p2filt = 0\nsmooth_phis_numcycle = 6 ! v2/v3 uses 12/6 for more/less smoothing\nsmooth_phis_nudt = 4e-16\nhypervis_scaling = 2\nse_ftype = 2 ! actually output NPHYS; overloaded use of ftype\n/\n&amp;vert_nl\n/\n&amp;analysis_nl\ntool = 'topo_pgn_to_smoothed'\ninfilenames = '${topo_file_1}', '${topo_file_2}'\n/\nEOF\n\nmpirun -np 8 ${e3sm_root}/components/homme/src/tool/homme_tool &lt; input.nl\n\n# rename output file to remove \"1.nc\" suffix\nmv ${topo_file_2}1.nc ${topo_file_2}\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#compute-sgh","title":"Compute SGH","text":"<pre><code>${e3sm_root}/components/eam/tools/topo_tool/cube_to_target/cube_to_target \\\n  --target-grid ${grid_root}/scrip_ne${NE_DST}pg2.nc \\\n  --input-topography ${topo_file_0} \\\n  --smoothed-topography ${topo_file_2} \\\n  --output-topography ${topo_file_3}\n\n# Append the GLL phi_s data to the output of step 4.\nncks -A ${topo_file_2} ${topo_file_3}\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#clean-up-temporary-files","title":"Clean up Temporary Files","text":"<pre><code>rm ${topo_root}/tmp_USGS-topo_ne${NE_DST}*\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-topo-file/#batch-script-to-streamline-all-steps","title":"Batch script to streamline all steps","text":"<p>Running through all the steps above can be tedious and time-consuming. The batch scripts below include all these steps as well as batch system directives. The only step that is omitted is building homme_tool, since its better to do this manually in case problems arise.</p> <p>Here is a check list of things to do before submitting this script:</p> <ul> <li>Build <code>homme_tool</code></li> <li>Build <code>cube_to_target</code></li> <li>Update batch allocation code (i.e. <code>--account</code>)</li> <li>Update batch job wallclock time (i.e. <code>--time</code>)</li> <li>Update paths at the top of the batch script</li> <li>Comment out any sections that were completed in advance (i.e. grid and map file creation)</li> </ul> <p>To submit the slurm batch job use <code>sbatch &lt;script&gt;</code></p> batch_topo_slurm_lcrc.sh <pre><code>#!/bin/bash\n#SBATCH --account=e3sm\n#SBATCH --job-name=generate_topo\n#SBATCH --output=slurm-%x-%j.out\n#SBATCH --time=24:00:00\n#SBATCH --nodes=1\n#SBATCH --mail-type=END,FAIL\n#---------------------------------------------------------------------------\n# Make sure all these lines are correct for the machine\nsource /lcrc/soft/climate/e3sm-unified/load_latest_e3sm_unified_chrysalis.sh\n# Specify source and target resolutions\nNE_SRC=3000 ; NE_DST=30\n# NE_SRC=90 ; NE_DST=30 # low-res grid combination for testing\n# Specify time stamp for creation date\ntimestamp=$(date +%Y%m%d)\n# Specify E3SM source code path - preferably a fresh clone\nSCRATCH=/lcrc/group/e3sm/${USER}/scratch/chrys\ne3sm_root=${SCRATCH}/tmp_e3sm_src\n# Specify root paths\ngrid_root=${SCRATCH}/files_grid\nmap_root=${SCRATCH}/files_map\ntopo_root=${SCRATCH}/files_topo\nDIN_LOC_ROOT=/lcrc/group/e3sm/data/inputdata\n# argument for ncremap to select TempestRemap or mbtempest backend\nMAP_ARGS=\n# MAP_ARGS+=\"--mpi_nbr=32\"\n#---------------------------------------------------------------------------\n# Stop script execution on error\nset -e\n# ANSI color codes for highlighting terminal output\nRED='\\033[0;31m' ; GRN='\\033[0;32m' CYN='\\033[0;36m' ; NC='\\033[0m'\n# start timer for entire script\nstart=`date +%s`\n#---------------------------------------------------------------------------\n# Specify topo file names - including temporary files that will be deleted\ntopo_file_0=${DIN_LOC_ROOT}/atm/cam/hrtopo/USGS-topo-cube${NE_SRC}.nc\ntopo_file_1=${topo_root}/tmp_USGS-topo_ne${NE_DST}np4.nc\ntopo_file_2=${topo_root}/tmp_USGS-topo_ne${NE_DST}np4_smoothedx6t.nc\ntopo_file_3=${topo_root}/USGS-topo_ne${NE_DST}np4_smoothedx6t_${timestamp}.nc\n# Specify map file name\nmap_file_src_to_np4=${map_root}/map_ne${NE_SRC}pg1_to_ne${NE_DST}np4_fv2se_flx.nc\n#---------------------------------------------------------------------------  \n# print some useful things\necho --------------------------------------------------------------------------------\necho --------------------------------------------------------------------------------\necho\necho   NE_SRC              = $NE_SRC\necho   NE_DST              = $NE_DST\necho\necho   e3sm_root           = $e3sm_root\necho   grid_root           = $grid_root\necho   map_root            = $map_root\necho   topo_root           = $topo_root\necho   DIN_LOC_ROOT        = $DIN_LOC_ROOT\necho\necho   topo_file_0         = $topo_file_0\necho   topo_file_1         = $topo_file_1\necho   topo_file_2         = $topo_file_2\necho   topo_file_3         = $topo_file_3\necho\necho   map_file_src_to_np4 = $map_file_src_to_np4\necho\necho --------------------------------------------------------------------------------\necho --------------------------------------------------------------------------------\n#---------------------------------------------------------------------------\n# Make sure paths exist\nmkdir -p ${grid_root} ${map_root} ${topo_root}\nif [ ! -d ${DIN_LOC_ROOT} ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${DIN_LOC_ROOT} ; fi\nif [ ! -d ${e3sm_root}    ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${e3sm_root} ; fi\nif [ ! -d ${grid_root}    ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${grid_root} ; fi\nif [ ! -d ${map_root}     ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${map_root} ; fi\nif [ ! -d ${topo_root}    ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${topo_root} ; fi\n#---------------------------------------------------------------------------\n# set to echo commands\nset -x\n#---------------------------------------------------------------------------\n# Create grid for source high res topo\nGenerateCSMesh --alt --res ${NE_SRC} --file ${grid_root}/exodus_ne${NE_SRC}.g\nConvertMeshToSCRIP --in ${grid_root}/exodus_ne${NE_SRC}.g  --out ${grid_root}/scrip_ne${NE_SRC}pg1.nc\n# Create grid for target EAM grid\nGenerateCSMesh --alt --res ${NE_DST} --file ${grid_root}/exodus_ne${NE_DST}.g\nGenerateVolumetricMesh --in ${grid_root}/exodus_ne${NE_DST}.g --out ${grid_root}/exodus_ne${NE_DST}pg2.g --np 2 --uniform\nConvertMeshToSCRIP --in ${grid_root}/exodus_ne${NE_DST}pg2.g --out ${grid_root}/scrip_ne${NE_DST}pg2.nc\n#---------------------------------------------------------------------------\n# Create map from source to target np4\ntime ncremap ${MAP_ARGS} -a fv2se_flx \\\n  --src_grd=${grid_root}/scrip_ne${NE_SRC}pg1.nc \\\n  --dst_grd=${grid_root}/exodus_ne${NE_DST}.g \\\n  --map_file=${map_file_src_to_np4} \\\n  --tmp_dir=${map_root}\n#---------------------------------------------------------------------------\n# Remap high-res topo to target np4 grid\nncremap -m ${map_file_src_to_np4} -i ${topo_file_0} -o ${topo_file_1}\n# Compute phi_s on the target np4 grid\nncap2 -O -s 'PHIS=terr*9.80616' ${topo_file_1} ${topo_file_1}\n# rename the column dimension to be \"ncol\"\nncrename -d grid_size,ncol ${topo_file_1}\n#---------------------------------------------------------------------------\n# Apply Smoothing\ncd ${e3sm_root}/components/homme\n${e3sm_root}/cime/CIME/scripts/configure &amp;&amp; source .env_mach_specific.sh\n# Create namelist file for HOMME\ncat &lt;&lt;EOF &gt; input.nl\n&amp;ctl_nl\nmesh_file = \"${grid_root}/exodus_ne${NE_DST}.g\"\nsmooth_phis_p2filt = 0\nsmooth_phis_numcycle = 6 ! v2/v3 uses 12/6 for more/less smoothing\nsmooth_phis_nudt = 4e-16\nhypervis_scaling = 2\nse_ftype = 2 ! actually output NPHYS; overloaded use of ftype\n/\n&amp;vert_nl\n/\n&amp;analysis_nl\ntool = 'topo_pgn_to_smoothed'\ninfilenames = '${topo_file_1}', '${topo_file_2}'\n/\nEOF\n# run homme_tool for topography smoothing\nsrun -n 8 ${e3sm_root}/components/homme/src/tool/homme_tool &lt; input.nl\n# rename output file to remove \"1.nc\" suffix\nmv ${topo_file_2}1.nc ${topo_file_2}\n#---------------------------------------------------------------------------\n# Compute SGH with cube_to_target\n${e3sm_root}/components/eam/tools/topo_tool/cube_to_target/cube_to_target \\\n  --target-grid ${grid_root}/scrip_ne${NE_DST}pg2.nc \\\n  --input-topography ${topo_file_0} \\\n  --smoothed-topography ${topo_file_2} \\\n  --output-topography ${topo_file_3}\n# Append the GLL phi_s data to the output\nncks -A ${topo_file_2} ${topo_file_3}\n#---------------------------------------------------------------------------\n# Clean up Temporary Files\nrm ${topo_root}/tmp_USGS-topo_ne${NE_DST}*\n#---------------------------------------------------------------------------\n# stop echoing commands\nset +x\n#---------------------------------------------------------------------------\n# Check that final topo output file was created\nif [ ! -f ${topo_file_3} ]; then\n  echo\n  echo -e ${RED} Failed to create topography file - Errors ocurred ${NC}\n  echo\nelse\n  echo\n  echo -e ${GRN} Sucessfully created new topography file  ${NC}\n  echo $topo_file_3\n  echo\nfi\n#---------------------------------------------------------------------------\n# Indicate overall run time for this script\nend=`date +%s`\nruntime_sc=$(( end - start ))\nruntime_mn=$(( runtime_sc/60 ))\nruntime_hr=$(( runtime_mn/60 ))\necho -e    ${CYN} overall runtime: ${NC} ${runtime_sc} seconds / ${runtime_mn} minutes / ${runtime_hr} hours\necho\n#---------------------------------------------------------------------------\n</code></pre> batch_topo_slurm_nersc.sh <pre><code>#!/bin/bash\n#SBATCH --account=e3sm\n#SBATCH --constraint=cpu\n#SBATCH --qos=regular\n#SBATCH --job-name=generate_topo\n#SBATCH --output=slurm-%x-%j.out\n#SBATCH --time=24:00:00\n#SBATCH --nodes=1\n#SBATCH --mail-type=END,FAIL\n#---------------------------------------------------------------------------\n# Make sure all these lines are correct for the machine\nsource /global/common/software/e3sm/anaconda_envs/load_latest_e3sm_unified_pm-cpu.sh\n# Specify source and target resolutions\nNE_SRC=3000 ; NE_DST=30\n# NE_SRC=90 ; NE_DST=30 # low-res grid combination for testing\n# Specify time stamp for creation date\ntimestamp=$(date +%Y%m%d)\n# Specify E3SM source code path - preferably a fresh clone\ne3sm_root=${SCRATCH}/tmp_e3sm_src\n# Specify root paths\ngrid_root=${SCRATCH}/files_grid\nmap_root=${SCRATCH}/files_map\ntopo_root=${SCRATCH}/files_topo\nDIN_LOC_ROOT=/global/cfs/cdirs/e3sm/inputdata\n# argument for ncremap to select TempestRemap or mbtempest backend\nMAP_ARGS=\n# MAP_ARGS+=\"--mpi_nbr=32\"\n#---------------------------------------------------------------------------\n# Stop script execution on error\nset -e\n# ANSI color codes for highlighting terminal output\nRED='\\033[0;31m' ; GRN='\\033[0;32m' CYN='\\033[0;36m' ; NC='\\033[0m'\n# start timer for entire script\nstart=`date +%s`\n#---------------------------------------------------------------------------\n# Specify topo file names - including temporary files that will be deleted\ntopo_file_0=${DIN_LOC_ROOT}/atm/cam/hrtopo/USGS-topo-cube${NE_SRC}.nc\ntopo_file_1=${topo_root}/tmp_USGS-topo_ne${NE_DST}np4.nc\ntopo_file_2=${topo_root}/tmp_USGS-topo_ne${NE_DST}np4_smoothedx6t.nc\ntopo_file_3=${topo_root}/USGS-topo_ne${NE_DST}np4_smoothedx6t_${timestamp}.nc\n# Specify map file name\nmap_file_src_to_np4=${map_root}/map_ne${NE_SRC}pg1_to_ne${NE_DST}np4_fv2se_flx.nc\n#---------------------------------------------------------------------------  \n# print some useful things\necho --------------------------------------------------------------------------------\necho --------------------------------------------------------------------------------\necho\necho   NE_SRC              = $NE_SRC\necho   NE_DST              = $NE_DST\necho\necho   e3sm_root           = $e3sm_root\necho   grid_root           = $grid_root\necho   map_root            = $map_root\necho   topo_root           = $topo_root\necho   DIN_LOC_ROOT        = $DIN_LOC_ROOT\necho\necho   topo_file_0         = $topo_file_0\necho   topo_file_1         = $topo_file_1\necho   topo_file_2         = $topo_file_2\necho   topo_file_3         = $topo_file_3\necho\necho   map_file_src_to_np4 = $map_file_src_to_np4\necho\necho --------------------------------------------------------------------------------\necho --------------------------------------------------------------------------------\n#---------------------------------------------------------------------------\n# Make sure paths exist\nmkdir -p ${grid_root} ${map_root} ${topo_root}\nif [ ! -d ${DIN_LOC_ROOT} ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${DIN_LOC_ROOT} ; fi\nif [ ! -d ${e3sm_root}    ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${e3sm_root} ; fi\nif [ ! -d ${grid_root}    ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${grid_root} ; fi\nif [ ! -d ${map_root}     ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${map_root} ; fi\nif [ ! -d ${topo_root}    ]; then echo -e ${RED}ERROR directory does not exist:${NC} ${topo_root} ; fi\n#---------------------------------------------------------------------------\n# set to echo commands\nset -x\n#---------------------------------------------------------------------------\n# Create grid for source high res topo\nGenerateCSMesh --alt --res ${NE_SRC} --file ${grid_root}/exodus_ne${NE_SRC}.g\nConvertMeshToSCRIP --in ${grid_root}/exodus_ne${NE_SRC}.g  --out ${grid_root}/scrip_ne${NE_SRC}pg1.nc\n# Create grid for target EAM grid\nGenerateCSMesh --alt --res ${NE_DST} --file ${grid_root}/exodus_ne${NE_DST}.g\nGenerateVolumetricMesh --in ${grid_root}/exodus_ne${NE_DST}.g --out ${grid_root}/exodus_ne${NE_DST}pg2.g --np 2 --uniform\nConvertMeshToSCRIP --in ${grid_root}/exodus_ne${NE_DST}pg2.g --out ${grid_root}/scrip_ne${NE_DST}pg2.nc\n#---------------------------------------------------------------------------\n# Create map from source to target np4\ntime ncremap ${MAP_ARGS} -a fv2se_flx \\\n  --src_grd=${grid_root}/scrip_ne${NE_SRC}pg1.nc \\\n  --dst_grd=${grid_root}/exodus_ne${NE_DST}.g \\\n  --map_file=${map_file_src_to_np4} \\\n  --tmp_dir=${map_root}\n#---------------------------------------------------------------------------\n# Remap high-res topo to target np4 grid\nncremap -m ${map_file_src_to_np4} -i ${topo_file_0} -o ${topo_file_1}\n# Compute phi_s on the target np4 grid\nncap2 -O -s 'PHIS=terr*9.80616' ${topo_file_1} ${topo_file_1}\n# rename the column dimension to be \"ncol\"\nncrename -d grid_size,ncol ${topo_file_1}\n#---------------------------------------------------------------------------\n# Apply Smoothing\ncd ${e3sm_root}/components/homme\n${e3sm_root}/cime/CIME/scripts/configure &amp;&amp; source .env_mach_specific.sh\n# Create namelist file for HOMME\ncat &lt;&lt;EOF &gt; input.nl\n&amp;ctl_nl\nmesh_file = \"${grid_root}/exodus_ne${NE_DST}.g\"\nsmooth_phis_p2filt = 0\nsmooth_phis_numcycle = 6 ! v2/v3 uses 12/6 for more/less smoothing\nsmooth_phis_nudt = 4e-16\nhypervis_scaling = 2\nse_ftype = 2 ! actually output NPHYS; overloaded use of ftype\n/\n&amp;vert_nl\n/\n&amp;analysis_nl\ntool = 'topo_pgn_to_smoothed'\ninfilenames = '${topo_file_1}', '${topo_file_2}'\n/\nEOF\n# run homme_tool for topography smoothing\nsrun -n 8 ${e3sm_root}/components/homme/src/tool/homme_tool &lt; input.nl\n# rename output file to remove \"1.nc\" suffix\nmv ${topo_file_2}1.nc ${topo_file_2}\n#---------------------------------------------------------------------------\n# Compute SGH with cube_to_target\n${e3sm_root}/components/eam/tools/topo_tool/cube_to_target/cube_to_target \\\n  --target-grid ${grid_root}/scrip_ne${NE_DST}pg2.nc \\\n  --input-topography ${topo_file_0} \\\n  --smoothed-topography ${topo_file_2} \\\n  --output-topography ${topo_file_3}\n# Append the GLL phi_s data to the output\nncks -A ${topo_file_2} ${topo_file_3}\n#---------------------------------------------------------------------------\n# Clean up Temporary Files\nrm ${topo_root}/tmp_USGS-topo_ne${NE_DST}*\n#---------------------------------------------------------------------------\n# stop echoing commands\nset +x\n#---------------------------------------------------------------------------\n# Check that final topo output file was created\nif [ ! -f ${topo_file_3} ]; then\n  echo\n  echo -e ${RED} Failed to create topography file - Errors ocurred ${NC}\n  echo\nelse\n  echo\n  echo -e ${GRN} Sucessfully created new topography file  ${NC}\n  echo $topo_file_3\n  echo\nfi\n#---------------------------------------------------------------------------\n# Indicate overall run time for this script\nend=`date +%s`\nruntime_sc=$(( end - start ))\nruntime_mn=$(( runtime_sc/60 ))\nruntime_hr=$(( runtime_mn/60 ))\necho -e    ${CYN} overall runtime: ${NC} ${runtime_sc} seconds / ${runtime_mn} minutes / ${runtime_hr} hours\necho\n#---------------------------------------------------------------------------\n</code></pre> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-uniform-grid-file/","title":"Generate a new Grid File","text":"<p>In order to generate mapping files between a new atmosphere grid and the surface component grids, we need a file that describes the new grid. TempestRemap is our preferred tool for grid file generation because it can handle the spectral element grids used by the atmosphere dycore. The initial grid file will be saved in an \"exodus\" file with a <code>.g</code> extension (see Types of Grid Description Files for more info). TempestRemap can be installed via conda.</p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-uniform-grid-file/#generating-a-standard-exodus-grid-file","title":"Generating a Standard Exodus Grid File","text":"<p>Once TempestRemap is in our environment we can easily generate an exodus file by calling TempestRemap directly:</p> <pre><code>GenerateCSMesh --alt --res 4 --file ne4.g\n</code></pre>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-uniform-grid-file/#generating-a-regionally-refined-grid-file","title":"Generating a Regionally Refined Grid File","text":"<p>For a regionally refined mesh (RRM) SQuadGen is used to define the refined area(s). This tutorial includes details and examples of using SQuadGen to generate RRM grid files.</p> <p>The naming convention for RRM grid files should follow:</p> <pre><code>&lt;refined_area_name&gt;_&lt;base_resolution&gt;x&lt;refinement_level&gt;.g\n</code></pre> <p>For example, for a RRM with 4x refinement from ne30 to ne120 over CONUS, we should use the convention conus_ne30x4.g (note that existing meshes may have used the old naming convention <code>&lt;area of refinement&gt;x&lt;refinement level&gt;v&lt;version&gt;.g</code>, but future meshes should use the new naming convention).</p> <p>The Exodus file contains only information about the position of the spectral element on the sphere. For SE aware utilities such as TempestRemap, they can use the polynomial order and the reference element map to fill in necessary data such as the locations of the nodal GLL points. For non-SE aware utilities, we need additional meta data, described in the next section.  </p>"},{"location":"dev-guide/adding-grid-support/adding-grid-support-step-by-step-guide/generate-uniform-grid-file/#generating-a-pg2-scrip-grid-file","title":"Generating a \"pg2\" SCRIP Grid File","text":"<p>Starting in E3SMv2 the physics calculations and standard history output use a finite volume (FV) \"pg2\" grid. Online mapping within the component coupler between the atmosphere and surface components requires FV-to-FV type maps, and generating these maps will require a grid file for pg2 grid. These are easily generated with TempestRemap commands as follows:</p> <pre><code>NE=30\nGenerateCSMesh --alt --res ${NE} --file ${GRID_FILE_PATH}/ne${NE}.g\nGenerateVolumetricMesh --in ${GRID_FILE_PATH}/ne${NE}.g --out ${GRID_FILE_PATH}/ne${NE}pg2.g --np 2 --uniform\nConvertMeshToSCRIP --in ${GRID_FILE_PATH}/ne${NE}pg2.g --out ${GRID_FILE_PATH}/ne${NE}pg2_scrip.nc\n</code></pre> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"generate_domain_files/","title":"Generating Domain Files","text":"<p>Domain files are needed at runtime by the coupler, data models, and land model. The land model uses the mask to determine where to run and the coupler use the land fraction to merge fluxes from multiple surface types to the atmosphere above them.</p> <p>Domain files are created from a conservative, monotone mapping file from the ocean grid (where the mask is defined) to the atmosphere grid.</p>"},{"location":"generate_domain_files/#environment","title":"Environment","text":"<p>The new domain generation tool requires a few special packages, such as xarray, numba, and itertools. These are all included in the E3SM unified environment: https://e3sm.org/resources/tools/other-tools/e3sm-unified-environment/</p> <p>Alternatively, a simple conda environment can be created with the following command:</p> <pre><code>conda create --name example_env --channel conda-forge xarray numpy numba scikit-learn netcdf4\n</code></pre>"},{"location":"generate_domain_files/#map-file-generation","title":"Map File Generation","text":"<p>The map file used to generate the domain files can be created a few different ways. For a typical E3SM configuration we recommend using a conservative, monotone map. Here is an example command that can be used to generate one (as of NCO version 5.2.2)</p> <pre><code>ncremap -5 -a traave --src_grd=${OCN_GRID} --dst_grd=${ATM_GRID} --map_file=${MAP_FILE}\n</code></pre> <p>Note that existing ocean grid files can be found in the inputdata repository: <code>inputdata/ocn/mpas-o/&lt;ocn_grid_name&gt;/</code></p> <p>The atmosphere grid file should be on the \"pg2\" grid. These grid files are easily generated with three TempestRemap commands as follows:</p> <pre><code>NE=30\nGenerateCSMesh --alt --res ${NE} --file ${GRID_FILE_PATH}/ne${NE}.g\nGenerateVolumetricMesh --in ${GRID_FILE_PATH}/ne${NE}.g --out ${GRID_FILE_PATH}/ne${NE}pg2.g --np 2 --uniform\nConvertMeshToSCRIP --in ${GRID_FILE_PATH}/ne${NE}pg2.g --out ${GRID_FILE_PATH}/ne${NE}pg2_scrip.nc\n</code></pre> <p>For RRM grids the last two commands would be used on the exodus file produced by SQuadGen (See the Adding Support for New Grids tutorial for more information.).</p>"},{"location":"generate_domain_files/#running-the-domain-generation-tool","title":"Running the Domain Generation Tool","text":"<p>Below is a typical example of how to invoke the domain generation tool from the command line:</p> <pre><code>NE=30\nMAP_FILE=${MAP_FILE_ROOT}/map_oEC60to30v3_to_ne${NE}pg2_traave.20240313.nc\npython generate_domain_files_E3SM.py -m ${MAP_FILE} -o oEC60to30v3 -l ne${NE}pg2 --date-stamp=9999 --output-root=${OUTPUT_ROOT}\n</code></pre> <p>Back to step-by-step guide for Adding Support for New Grids</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>E3SM is not just one climate model but a modeling system that allows many different configurations of atmosphere, ocean, land and other components with both full model and data model options. Also, the configurations of model components can run at different resolutions.  Some configurations can run easily on a laptop.  Other's require the most powerful supercomputers.</p> <p>Using the model requires first deciding what configuration to use and creating a case with that configuration. The configuration options are managed by the Case Control System (CCS) within the Community Infrastructure for Modeling the Earth (CIME).</p> <p>Before reading the rest of this guide, you should become familiar with cases, compsets and grids by reading the Case Control System Basic Usage</p> <p>A step-by-step guide for running E3SM with a run script is available.</p>"},{"location":"user-guide/#supported-coupled-compsets","title":"Supported Coupled Compsets","text":"<p>A fully coupled compset is one which has active components for at least the atmosphere, ocean, land surface, ocean and sea-ice all interacting.  Each compset is associated with a specific forcing condition. Coupled compsets in E3SM are developed  for three science-driven simulation campaigns:  water cycle change and impacts, human-earth system feedbacks, and polar processes, sea-level rise and coastal impacts. The standard coupled configurations -- which consist of prognostic atmosphere, land, river, ocean and sea-ice components -- form the base physical coupled system and are mainly designed for <code>water cycle change and impacts</code> simulation campaign. Below list the standard configuration compsets supported in the current version of E3SM:</p> Compset alias Description <code>WCYCL1850</code> Standard configuration with pre-industrial climatological forcings <code>WCYCL1850-4xCO2</code> Same as <code>WCYCL1850</code> except with abrupt (then persistent) 4xCO2 forcing. <code>WCYCL1850-1pctCO2</code> Same as <code>WCYCL1850</code> except with 1 percent per year increase of CO2 concentration <code>WCYCL1950</code> Standard configuration with perpetual 1950 forcings <code>WCYCL20TR</code> Standard configuration with prescribed transient forcings over the historical period (1850-2014) <code>WCYCLSSP245</code> Standard configuration with prescribed SSP-245 forcings <code>WCYCLSSP370</code> Standard configuration with prescribed SSP-370 forcings <code>WCYCLSSP585</code> Standard configuration with prescribed SSP-585 forcings Compsets for single-forcings simulations of the historical period (1850-2014) <code>WCYCL20TR-GHG</code> Greenhouse gases only configuration (<code>GHGs</code>) <code>WCYCL20TR-aer</code> Anthropogenic aerosols and precursors only configuration (<code>aer</code>) <code>WCYCL20TR-xGHG-xaer</code> All forcings except GHGs and aer (<code>solar irradiance, stratospheric ozone and volcanic emissions, land use land cover</code>) <code>WCYCL20TR-xaer</code> All forcings except aer (<code>GHGs, solar irradiance, stratospheric ozone and volcanic emissions, land use land cover</code>) <code>WCYCL20TR-nat</code> Natural-only configuration (<code>solar irradiance, stratospheric volcanic emissions, land use land cover</code>) <code>WCYCL20TR-ozone</code> Stratospheric ozone only configuration <code>WCYCL20TR-lulc</code> Land use land cover only configuration <code>WCYCL20TR-volc</code> Stratospheric volcanic emissions only configuration <p>The table below specifies which forcing category is fixed at 1850 conditions and which are allowed to vary over the historical period for each of the historical (\"20TR\") compsets including the single-forcing compsets.</p> Compset alias GHGs Aerosol &amp; precursors Oxidants Ozone (CI &amp; Linoz) Volcano Solar Land Use &amp; ndep/popdensa <code>WCYCL20TR</code> varying varying varying varying varying varying varying <code>WCYCL20TR-GHG</code> varying 1850 1850 1850 1850 1850 1850 <code>WCYCL20TR-aer</code> 1850 varying varying 1850 1850 1850 1850 <code>WCYCL20TR-xGHG-xaer</code> 1850 1850 1850 varying varying varying varying <code>WCYCL20TR-xaer</code> varying 1850 1850 varying varying varying varying <code>WCYCL20TR-nat</code> 1850 1850 1850 1850 varying varying 1850 <code>WCYCL20TR-ozone</code> 1850 1850 1850 varying 1850 1850 1850 <code>WCYCL20TR-lulc</code> 1850 1850 1850 1850 1850 1850 varying <code>WCYCL20TR-volc</code> 1850 1850 1850 1850 varying 1850 1850 <ul> <li><sub> Volcano refers to stratospheric volcanic SO2 emissions; 1850 for Volcano refers to background (average) stratospheric volcanic emissions used in pre-industrial control experiments</sub></li> </ul> <ul> <li><sub> Oxidants always follow Aerosol &amp; precursors for fixed or varying.</sub></li> </ul> <p>The compsets for the other two science simulation campaigns are being finalized, with additional components and/or features. The compset naming follows the same convention, e.g., <code>CRYO1850</code> and <code>CRYO1850-4xCO2</code> are with prognostic ice-shelf melt fluxes for the <code>polar processes</code> simulation campaign.</p> <p>Compsets are also available for standalone component model configurations, See the User Guides for the components for more information.</p>"},{"location":"user-guide/#supported-resolution","title":"Supported resolution","text":"<p>Currently two grid sets are supported for the above compsets, including a nominal low-resosluton confiuguration and one regionally refined mesh. Additional regionally refined meshes and a high-resolution grid will become available in the near future.</p> Grid Alias Description ne30pg2_r05_IcoswISC30E3r5 For this grid set, the atmosphere is on the ne30pg2 cubed-sphere mesh with approximately 100km resolution, the land and river are on a 0.5deg x 0.5deg structured grid, and the ocean and sea ice are on a hexagonal mesh dervied from the dual of a 30km resolution icosahedral mesh with ice shelf cavities (wISC) around Antarctica. northamericax4v1pg2_r025_IcoswISC30E3r5 The atmosphere for this grid set uses North America regionally refined mesh from about 110 km down to 25 km over the refined region. The land and river are on 0.25deg x 0.25deg structured grid. The ocean and sea ice are on the same icosahedral mesh as for <code>ne30pg2_r05_IcoswISC30E3r5</code>."},{"location":"user-guide/#input-data","title":"Input data","text":"<p>Inputdata for coupled compsets at component model levels are the same as for the standalone component configurations for a given forcing scenario (e.g., <code>1850</code> for the pre-industrial period,  <code>20TR</code> for the historical period, <code>2010</code> for present-day condition, and <code>SSPs</code> for Shared Socioeconomic Pathways of climate change scenarios). Between the coupled compsets, the differences are in the prescribed solar forcing, volcanic emissions, atmospheric forcing data, and land use and land cover. The required inputdata for the pre-industrial and the historical periods as well as the present-day condition are described in the EAM User's Guide and the ELM's User's Guide. Below are the prescribed forcing data for the SSP scenarios.</p>"},{"location":"user-guide/#ssp245-forcing-data","title":"SSP245 forcing data","text":""},{"location":"user-guide/#ssp370-forcing-data","title":"SSP370 forcing data","text":""},{"location":"user-guide/#ssp585-forcing-data","title":"SSP585 forcing data","text":""},{"location":"user-guide/ssp245-forcings/","title":"SSP245 Forcing data","text":"<p>These are the prescribed inputdata specifically for the SSP245 scenario, in place of the files for the historical period.</p>"},{"location":"user-guide/ssp245-forcings/#solar-constant","title":"Solar constant","text":"<p><code>\\$DIN_LOC_ROOT/atm/cam/solar/Solar_1850-2299_input4MIPS_c20181106.nc</code></p>"},{"location":"user-guide/ssp245-forcings/#greenhouse-gas-concentrations","title":"Greenhouse gas concentrations","text":"<p><code>\\$DIN_LOC_ROOT/atm/cam/ggas/GHG_CMIP_SSP245-1-2-1_Annual_Global_2015-2500_c20200807.nc</code></p>"},{"location":"user-guide/ssp245-forcings/#elevated-external-forcings","title":"Elevated external forcings","text":"<pre><code>NO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_NO2_aircraft_vertical_2015-2100_1.9x2.5_c20240219.nc \nSO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_so2_volc_elev_2015-2100_c240331.nc \nSOAG0       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_SOAG0_elev_2015-2100_1.9x2.5_c20240219.nc \nbc_a4       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_bc_a4_elev_2015-2100_c200716.nc \nnum_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_num_a1_elev_2015-2100_c200716.nc \nnum_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_num_a2_elev_2015-2100_c200716.nc \nnum_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_num_a4_elev_2015-2100_c200716.nc \npom_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_pom_a4_elev_2015-2100_c200716.nc \nso4_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_so4_a1_elev_2015-2100_c200716.nc \nso4_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_so4_a2_elev_2015-2100_c200716.nc \n</code></pre>"},{"location":"user-guide/ssp245-forcings/#surface-emissions","title":"Surface emissions","text":"<pre><code>C2H4        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_C2H4_surface_2015-2100_1.9x2.5_c20240219.nc \nC2H6        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_C2H6_surface_2015-2100_1.9x2.5_c20240219.nc \nC3H8        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_C3H8_surface_2015-2100_1.9x2.5_c20240219.nc \nCH2O        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_CH2O_surface_2015-2100_1.9x2.5_c20240219.nc \nCH3CHO      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_CH3CHO_surface_2015-2100_1.9x2.5_c20240219.nc \nCH3COCH3    \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_CH3COCH3_surface_2015-2100_1.9x2.5_c20240219.nc \nCO          \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_CO_surface_2015-2100_1.9x2.5_c20240219.nc \nISOP        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_ISOP_surface_2015-2100_1.9x2.5_c20240219.nc \nISOP_VBS    \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_ISOP_surface_2015-2100_1.9x2.5_c20240219.nc \nC10H16      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_MTERP_surface_2015-2100_1.9x2.5_c20240219.nc \nNOX         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_NO_surface_2015-2100_1.9x2.5_c20240219.nc \nDMS         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DMSflux.1850-2100.1deg_latlon_conserv.POPmonthlyClimFromACES4BGC_c20160727.nc\nSO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_so2_surf_2015-2100_c200716.nc \nSOAG0       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/emissions-cmip6_ssp245_e3sm_SOAG0_surf_2015-2100_1.9x2.5_c20240219.nc \nbc_a4       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_bc_a4_surf_2015-2100_c200716.nc \nnum_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_num_a1_surf_2015-2100_c200716.nc \nnum_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_num_a2_surf_2015-2100_c200716.nc \nnum_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_num_a4_surf_2015-2100_c200716.nc \npom_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_pom_a4_surf_2015-2100_c200716.nc \nso4_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_so4_a1_surf_2015-2100_c200716.nc \nso4_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP245_ne30/cmip6_ssp245_mam4_so4_a2_surf_2015-2100_c200716.nc \nE90         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/emissions_E90_surface_1750-2101_1.9x2.5_c20231222.nc \n</code></pre>"},{"location":"user-guide/ssp245-forcings/#prescribed-oxidant-for-aerosol-chemistry","title":"Prescribed oxidant for aerosol chemistry","text":"<p><code>$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/oxid/oxid_SSP245_1.9x2.5_L70_1849-2101_c20240228.nc</code></p>"},{"location":"user-guide/ssp245-forcings/#stratospheric-ozone-linoz-and-chlorine-loading-data","title":"Stratospheric ozone (linoz) and chlorine loading data","text":"<pre><code>\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/Linoz_Chlorine_Loading_CMIP6_Hist_SSP245_0003-2503_c20200808.nc\n\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/linv3_1849-2101_CMIP6_Hist_SSP245_10deg_58km_c20230705.nc\n</code></pre>"},{"location":"user-guide/ssp245-forcings/#land-use-and-land-cover","title":"Land use and land cover","text":"<p><code>\\$DIN_LOC_ROOT/lnd/clm2/surfdata_map/landuse.timeseries_0.5x0.5_ssp2_rcp45_simyr2015-2100_c240408.nc</code></p>"},{"location":"user-guide/ssp370-forcings/","title":"SSP370 Forcing data","text":"<p>These are the prescribed inputdata specifically for the SSP370 scenario, in place of the files for the historical period.</p>"},{"location":"user-guide/ssp370-forcings/#solar-constant","title":"Solar constant","text":"<p><code>\\$DIN_LOC_ROOT/atm/cam/solar/Solar_1850-2299_input4MIPS_c20181106.nc</code></p>"},{"location":"user-guide/ssp370-forcings/#greenhouse-gas-concentrations","title":"Greenhouse gas concentrations","text":"<p><code>\\$DIN_LOC_ROOT/atm/cam/ggas/GHG_CMIP_SSP370-1-2-1_Annual_Global_2015-2500_c20210509.nc</code></p>"},{"location":"user-guide/ssp370-forcings/#elevated-external-forcings","title":"Elevated external forcings","text":"<pre><code>NO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_NO2_aircraft_vertical_2015-2100_1.9x2.5_c20240208.nc \nSO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so2_volc_elev_2015-2100_c240331.nc \nSOAG0       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_SOAG0_elev_2015-2100_1.9x2.5_c20240208.nc \nbc_a4       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_bc_a4_elev_2015-2100_c210216.nc \nnum_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a1_elev_2015-2100_c210216.nc \nnum_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a2_elev_2015-2100_c210216.nc \nnum_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a4_elev_2015-2100_c210216.nc \npom_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_pom_a4_elev_2015-2100_c210216.nc \nso4_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so4_a1_elev_2015-2100_c210216.nc \nso4_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so4_a2_elev_2015-2100_c210216.nc \n</code></pre>"},{"location":"user-guide/ssp370-forcings/#surface-emissions","title":"Surface emissions","text":"<pre><code>C2H4        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_C2H4_surface_2015-2100_1.9x2.5_c20240208.nc \nC2H6        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_C2H6_surface_2015-2100_1.9x2.5_c20240208.nc \nC3H8        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_C3H8_surface_2015-2100_1.9x2.5_c20240208.nc \nCH2O        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_CH2O_surface_2015-2100_1.9x2.5_c20240208.nc \nCH3CHO      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_CH3CHO_surface_2015-2100_1.9x2.5_c20240208.nc \nCH3COCH3    \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_CH3COCH3_surface_2015-2100_1.9x2.5_c20240208.nc \nCO          \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_CO_surface_2015-2100_1.9x2.5_c20240208.nc \nISOP        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_ISOP_surface_2015-2100_1.9x2.5_c20240208.nc \nISOP_VBS    \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_ISOP_surface_2015-2100_1.9x2.5_c20240208.nc \nC10H16      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_MTERP_surface_2015-2100_1.9x2.5_c20240208.nc \nNOX         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_NO_surface_2015-2100_1.9x2.5_c20240208.nc \nDMS         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DMSflux.1850-2100.1deg_latlon_conserv.POPmonthlyClimFromACES4BGC_c20160727.nc\nSO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so2_surf_2015-2100_c210216.nc \nSOAG0       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/emissions-cmip6_ssp370_e3sm_SOAG0_surf_2015-2100_1.9x2.5_c20240208.nc \nbc_a4       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_bc_a4_surf_2015-2100_c210216.nc \nnum_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a1_surf_2015-2100_c210216.nc \nnum_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a2_surf_2015-2100_c210216.nc \nnum_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_num_a4_surf_2015-2100_c210216.nc \npom_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_pom_a4_surf_2015-2100_c210216.nc \nso4_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so4_a1_surf_2015-2100_c210216.nc \nso4_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP370_ne30/cmip6_ssp370_mam4_so4_a2_surf_2015-2100_c210216.nc \nE90         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/emissions_E90_surface_1750-2101_1.9x2.5_c20231222.nc \n</code></pre>"},{"location":"user-guide/ssp370-forcings/#prescribed-oxidant-for-aerosol-chemistry","title":"Prescribed oxidant for aerosol chemistry","text":"<p><code>\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/oxid/oxid_SSP370_1.9x2.5_L70_1849-2101_c20240228.nc</code></p>"},{"location":"user-guide/ssp370-forcings/#stratospheric-ozone-linoz-and-chlorine-loading-data","title":"Stratospheric ozone (linoz) and chlorine loading data","text":"<pre><code>\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/Linoz_Chlorine_Loading_CMIP6_Hist_SSP370_0003-2503_c20210202.nc\n\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/linv3_1849-2101_CMIP6_Hist_SSP370_10deg_58km_c20230705.nc\n</code></pre>"},{"location":"user-guide/ssp370-forcings/#land-use-and-land-cover","title":"Land use and land cover","text":"<p><code>\\$DIN_LOC_ROOT/lnd/clm2/surfdata_map/landuse.timeseries_0.5x0.5_ssp3_rcp70_simyr2015-2100_c240308.nc</code></p>"},{"location":"user-guide/ssp585-forcings/","title":"SSP585 Forcing data","text":"<p>These are the prescribed inputdata specifically for the SSP585 scenario, in place of the files for the historical period.</p>"},{"location":"user-guide/ssp585-forcings/#solar-constant","title":"Solar constant","text":"<p><code>\\$DIN_LOC_ROOT/atm/cam/solar/Solar_1850-2299_input4MIPS_c20181106.nc</code></p>"},{"location":"user-guide/ssp585-forcings/#greenhouse-gas-concentrations","title":"Greenhouse gas concentrations","text":"<p><code>\\$DIN_LOC_ROOT/atm/cam/ggas/GHG_CMIP_SSP585-1-2-1_Annual_Global_2015-2500_c20190310.nc</code></p>"},{"location":"user-guide/ssp585-forcings/#elevated-external-forcings","title":"Elevated external forcings","text":"<pre><code>NO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_NO2_aircraft_vertical_2015-2100_1.9x2.5_c20240304.nc \nSO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_so2_volc_elev_2015-2100_c240331.nc \nSOAG0       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_SOAG0_elev_2015-2100_1.9x2.5_c20240304.nc \nbc_a4       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_bc_a4_elev_2015-2100_c190828.nc \nnum_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_num_a1_elev_2015-2100_c190828.nc \nnum_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_num_a2_elev_2015-2100_c190828.nc \nnum_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_num_a4_elev_2015-2100_c190828.nc \npom_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_pom_a4_elev_2015-2100_c190828.nc \nso4_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_so4_a1_elev_2015-2100_c190828.nc \nso4_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_so4_a2_elev_2015-2100_c190828.nc \n</code></pre>"},{"location":"user-guide/ssp585-forcings/#surface-emissions","title":"Surface emissions","text":"<pre><code>C2H4        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_C2H4_surface_2015-2100_1.9x2.5_c20240304.nc \nC2H6        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_C2H6_surface_2015-2100_1.9x2.5_c20240304.nc \nC3H8        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_C3H8_surface_2015-2100_1.9x2.5_c20240304.nc \nCH2O        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_CH2O_surface_2015-2100_1.9x2.5_c20240304.nc \nCH3CHO      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_CH3CHO_surface_2015-2100_1.9x2.5_c20240304.nc \nCH3COCH3    \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_CH3COCH3_surface_2015-2100_1.9x2.5_c20240304.nc \nCO          \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_CO_surface_2015-2100_1.9x2.5_c20240304.nc \nISOP        \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_ISOP_surface_2015-2100_1.9x2.5_c20240304.nc \nISOP_VBS    \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_ISOP_surface_2015-2100_1.9x2.5_c20240304.nc \nC10H16      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_MTERP_surface_2015-2100_1.9x2.5_c20240304.nc \nNOX         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_NO_surface_2015-2100_1.9x2.5_c20240304.nc \nDMS         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/DMSflux.1850-2100.1deg_latlon_conserv.POPmonthlyClimFromACES4BGC_c20160727.nc\nSO2         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_so2_surf_2015-2100_c190828.nc \nSOAG0       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/emissions-cmip6_ssp585_e3sm_SOAG0_surf_2015-2100_1.9x2.5_c20240304.nc \nbc_a4       \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_bc_a4_surf_2015-2100_c190828.nc \nnum_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_num_a1_surf_2015-2100_c190828.nc \nnum_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_num_a2_surf_2015-2100_c190828.nc \nnum_a3      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_num_a4_surf_2015-2100_c190828.nc \npom_a4      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_pom_a4_surf_2015-2100_c190828.nc \nso4_a1      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_so4_a1_surf_2015-2100_c190828.nc \nso4_a2      \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/emis/CMIP6_SSP585_ne30/cmip6_ssp585_mam4_so4_a2_surf_2015-2100_c190828.nc \nE90         \\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/emissions_E90_surface_1750-2101_1.9x2.5_c20231222.nc \n</code></pre>"},{"location":"user-guide/ssp585-forcings/#prescribed-oxidant-for-aerosol-chemistry","title":"Prescribed oxidant for aerosol chemistry","text":"<p><code>\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart_aero/oxid/oxid_SSP585_1.9x2.5_L70_2014-2101_c20240228.nc</code></p>"},{"location":"user-guide/ssp585-forcings/#stratospheric-ozone-linoz-and-chlorine-loading-data","title":"Stratospheric ozone (linoz) and chlorine loading data","text":"<pre><code>\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/Linoz_Chlorine_Loading_CMIP6_Hist_SSP585_0003-2503_c20190414.nc\n\\$DIN_LOC_ROOT/atm/cam/chem/trop_mozart/ub/linv3_1849-2101_CMIP6_Hist_SSP585_10deg_58km_c20230705.nc\n</code></pre>"},{"location":"user-guide/ssp585-forcings/#land-use-and-land-cover","title":"Land use and land cover","text":"<p><code>\\$DIN_LOC_ROOT/lnd/clm2/surfdata_map/landuse.timeseries_0.5x0.5_ssp5_rcp85_simyr2015-2100_c240408.nc</code></p>"}]}