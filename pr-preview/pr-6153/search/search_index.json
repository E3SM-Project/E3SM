{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The C++ E3SM Atmosphere Model (EAMxx)","text":"<p>Some nice introductory text goes here! Maybe some figures, too. Who knows?!</p> <ul> <li>The User Guide explains how to run EAMxx, both in   its standalone configuration and within E3SM.</li> <li>The Developer Guide contains all the information needed   to contribute to the development of EAMxx.</li> <li>The Technical Guide contains all the technical   information about EAMxx.</li> </ul>"},{"location":"common/eamxx_params/","title":"EAMxx runtime configurable parameters","text":""},{"location":"common/eamxx_params/#atmosphere-processes-parameters","title":"Atmosphere Processes Parameters","text":""},{"location":"common/eamxx_params/#sc_import","title":"sc_import","text":"<ul> <li>sc_import::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>sc_import::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_import::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_import::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>sc_import::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>sc_import::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#sc_export","title":"sc_export","text":"<ul> <li>sc_export::prescribed_constants::fields:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::prescribed_constants::values:  </p> <ul> <li>description: MISSING </li> <li>type: array(real)  </li> </ul> </li> <li> <p>sc_export::prescribed_from_file::fields:  </p> <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>sc_export::prescribed_from_file::files:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::prescribed_from_file::fields_alt_name:  </p> <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li> <p>sc_export::number_of_subcycles:  </p> <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>sc_export::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_export::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>sc_export::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>sc_export::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>sc_export::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#homme","title":"homme","text":"<ul> <li>homme::Moisture:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>homme::BfbHash:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>homme::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>homme::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>homme::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>homme::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>homme::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>homme::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#p3","title":"p3","text":"<ul> <li>p3::do_prescribed_ccn:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::do_predict_nc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>p3::max_total_ni:  <ul> <li>description: maximum total ice concentration (sum of all categories)  </li> <li>type: real  </li> <li>constraints: gt 0  </li> </ul> </li> <li>p3::tables:  <ul> <li>description: MISSING </li> <li>type: array(file)  </li> </ul> </li> <li>p3::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>p3::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>p3::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>p3::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>p3::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>p3::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#shoc","title":"shoc","text":"<ul> <li>shoc::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>shoc::check_flux_state_consistency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>shoc::lambda_low:  <ul> <li>description: minimum value of stability correction.  </li> <li>type: real  </li> </ul> </li> <li>shoc::lambda_high:  <ul> <li>description: maximum value of stability correction.  </li> <li>type: real  </li> </ul> </li> <li>shoc::lambda_slope:  <ul> <li>description: slope of change from lambda_low to lambda_high.  </li> <li>type: real  </li> </ul> </li> <li>shoc::lambda_thresh:  <ul> <li>description: stability threshold for which to apply more stability correction.  </li> <li>type: real  </li> </ul> </li> <li>shoc::thl2tune:  <ul> <li>description: Temperature variance tuning factor  </li> <li>type: real  </li> </ul> </li> <li>shoc::qw2tune:  <ul> <li>description: Moisture variance tuning factor  </li> <li>type: real  </li> </ul> </li> <li>shoc::qwthl2tune:  <ul> <li>description: Temperature moisture covariance  </li> <li>type: real  </li> </ul> </li> <li>shoc::w2tune:  <ul> <li>description: Vertical velocity variance  </li> <li>type: real  </li> </ul> </li> <li>shoc::length_fac:  <ul> <li>description: Length scale factor  </li> <li>type: real  </li> </ul> </li> <li>shoc::c_diag_3rd_mom:  <ul> <li>description: Third moment vertical velocity damping factor  </li> <li>type: real  </li> </ul> </li> <li>shoc::Ckh:  <ul> <li>description: Eddy diffusivity coefficient for heat  </li> <li>type: real  </li> </ul> </li> <li>shoc::Ckm:  <ul> <li>description: Eddy diffusivity coefficient for momentum  </li> <li>type: real  </li> </ul> </li> <li>shoc::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>shoc::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>shoc::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>shoc::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>shoc::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>shoc::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#cldfraction","title":"cldFraction","text":"<ul> <li>cldFraction::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>cldFraction::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cldFraction::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cldFraction::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>cldFraction::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>cldFraction::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#nudging","title":"nudging","text":"<ul> <li>nudging::nudging_filename:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>nudging::nudging_fields:  <ul> <li>description: List of fields to be nudged.  Note, syntax of 'A:B' represents nudging field A with data from field B in files, syntax of 'A' assumes that nudging file has the same variables name as EAMxx  </li> <li>type: array(string)  </li> </ul> </li> <li>nudging::nudging_timescale:  <ul> <li>description: Timescale to apply nudging tendencies, 0: full replacement, &gt;0: actual timescale  </li> <li>type: integer  </li> </ul> </li> <li>nudging::use_nudging_weights:  <ul> <li>description: Flag for nudging weights option  </li> <li>type: logical  </li> </ul> </li> <li>nudging::nudging_weights_file:  <ul> <li>description: weights that relax the nudging fields update  </li> <li>type: string  </li> </ul> </li> <li>nudging::source_pressure_type:  <ul> <li>description: Flag for how source pressure levels are handled in the nudging dataset.     TIME_DEPENDENT_3D_PROFILE: The dataset contains a time-varying pressure profile, variable name 'p_mid' with dimensions (time,ncol,nlev).     STATIC_1D_VERTICAL_PROFILE: The dataset uses a fixed in time single pressure profile, variable name 'p_lev' with dimension (nlev).  </li> <li>type: string  </li> <li>valid values: TIME_DEPENDENT_3D_PROFILE,STATIC_1D_VERTICAL_PROFILE  </li> </ul> </li> <li>nudging::source_pressure_file:  <ul> <li>description: If STATIC_1D_VERTICAL_PROFILE, this is an optional arg to point to a file with the source pressure levels defined.       Default is to look for p_levs in the first nudging_filename file  </li> <li>type: string  </li> </ul> </li> <li>nudging::nudging_refine_remap_mapfile:  <ul> <li>description: Refine-remapping mapfile from the source nudging dataset to the physics grid  </li> <li>type: string  </li> </ul> </li> <li>nudging::nudging_refine_remap_vert_cutoff:  <ul> <li>description: A vertical cutoff to go with refine-remap logic (in units of p_mid) where the nudging is turned off above it (closer to the surface)  </li> <li>type: real  </li> </ul> </li> <li>nudging::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>nudging::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>nudging::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>nudging::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>nudging::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>nudging::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#mlcorrection","title":"mlcorrection","text":"<ul> <li>mlcorrection::ML_model_path_tq:  <ul> <li>description: Path to pre-trained ML model for temperature and specific humidity  </li> <li>type: string  </li> </ul> </li> <li>mlcorrection::ML_model_path_uv:  <ul> <li>description: Path to pre-trained ML model for wind fields  </li> <li>type: string  </li> </ul> </li> <li>mlcorrection::ML_model_path_sfc_fluxes:  <ul> <li>description: Path to pre-trained ML model for surface fluxes  </li> <li>type: string  </li> </ul> </li> <li>mlcorrection::ML_output_fields:  <ul> <li>description: ML correction output variables, the following variables are supported: T_mid,qv,u,v  </li> <li>type: array(string)  </li> </ul> </li> <li>mlcorrection::ML_correction_unit_test:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mlcorrection::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>mlcorrection::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mlcorrection::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mlcorrection::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mlcorrection::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mlcorrection::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#testonly","title":"testOnly","text":"<ul> <li>testOnly::my_param:  <ul> <li>description: MISSING </li> <li>type: array(integer)  </li> </ul> </li> <li>testOnly::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>testOnly::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>testOnly::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>testOnly::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>testOnly::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>testOnly::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#spa","title":"spa","text":"<ul> <li>spa::spa_remap_file:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>spa::spa_data_file:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>spa::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>spa::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>spa::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>spa::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>spa::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>spa::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#rrtmgp","title":"rrtmgp","text":"<ul> <li>rrtmgp::rrtmgp_coefficients_file_sw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_coefficients_file_lw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_cloud_optics_file_sw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::rrtmgp_cloud_optics_file_lw:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>rrtmgp::column_chunk_size:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::active_gases:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>rrtmgp::ch4vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::co2vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::n2ovmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::f11vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::f12vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::n2vmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::covmr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_year:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_eccentricity:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_obliquity:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::orbital_mvelp:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::rad_frequency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>rrtmgp::do_aerosol_rad:  <ul> <li>description: Flag to turn on/off considering aerosols in radiation calculations  </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::enable_column_conservation_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::extra_clnclrsky_diag:  <ul> <li>description: Flag to turn on/off an extra clean-clear-sky (with neither clouds nor aerosols) radiation call  </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::extra_clnsky_diag:  <ul> <li>description: Flag to turn on/off an extra clean-sky (with no aerosols) radiation call  </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>rrtmgp::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>rrtmgp::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>rrtmgp::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>rrtmgp::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#mac_aero_mic","title":"mac_aero_mic","text":"<ul> <li>mac_aero_mic::atm_procs_list:  <ul> <li>description: List of atm processes in this atm process group  </li> <li>type: array(string)  </li> </ul> </li> <li>mac_aero_mic::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> </ul> </li> <li>mac_aero_mic::Type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>mac_aero_mic::schedule_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: Sequential  </li> </ul> </li> <li>mac_aero_mic::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mac_aero_mic::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>mac_aero_mic::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>mac_aero_mic::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>mac_aero_mic::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#cosp","title":"cosp","text":"<ul> <li>cosp::cosp_subcolumns:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>cosp::cosp_frequency:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>cosp::cosp_frequency_units:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: steps,hours  </li> </ul> </li> <li>cosp::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>cosp::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cosp::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>cosp::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>cosp::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>cosp::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#tms","title":"tms","text":"<ul> <li>tms::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>tms::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>tms::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>tms::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>tms::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>tms::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#physics","title":"physics","text":"<ul> <li>physics::atm_procs_list:  <ul> <li>description: List of atm processes in this atm process group  </li> <li>type: array(string)  </li> </ul> </li> <li>physics::Type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>physics::schedule_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: Sequential  </li> </ul> </li> <li>physics::number_of_subcycles:  <ul> <li>description: how many times to subcycle this atm process  </li> <li>type: MISSING </li> <li>constraints: gt 0  </li> </ul> </li> <li>physics::enable_precondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>physics::enable_postcondition_checks:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>physics::repair_log_level:  <ul> <li>description: MISSING </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn  </li> </ul> </li> <li>physics::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>physics::compute_tendencies:  <ul> <li>description: list of computed fields for which this process will back out tendencies  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#initial-conditions-parameters","title":"Initial Conditions Parameters","text":"<ul> <li>initial_conditions::Filename:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>initial_conditions::topography_filename:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> <li>initial_conditions::phis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::restart_casename:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_evap:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::precip_liq_surf_mass:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::precip_ice_surf_mass:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::cldfrac_liq:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sgs_buoy_flux:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::eddy_diff_mom:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::T_prev_micro_step:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qv_prev_micro_step:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nr:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qm:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::bm:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::ni_activated:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nc_nuceat_tend:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::tke:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dir_vis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dir_nir:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dif_vis:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::sfc_alb_dif_nir:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_sens_flux:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_lw_flux_up:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::surf_mom_flux:  <ul> <li>description: MISSING </li> <li>type: array(real)  </li> </ul> </li> <li>initial_conditions::qc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::qi:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::nc:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::ni:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>initial_conditions::o3_volume_mix_ratio:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#atmosphere-driver-parameters","title":"Atmosphere Driver Parameters","text":"<ul> <li>driver_options::atmosphere_dag_verbosity_level:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::atm_log_level:  <ul> <li>description: Verbosity level for the atm logger  </li> <li>type: string  </li> <li>valid values: trace,debug,info,warn,error  </li> </ul> </li> <li>driver_options::output_to_screen:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>driver_options::mass_column_conservation_error_tolerance:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::energy_column_conservation_error_tolerance:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::column_conservation_checks_fail_handling_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>driver_options::check_all_computed_fields_for_nans:  <ul> <li>description: MISSING </li> <li>type: logical  </li> </ul> </li> <li>driver_options::property_check_data_fields:  <ul> <li>description: list of additional data fields to output in property checks (only for physics grid)  </li> <li>type: array(string)  </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#scorpio-parameters","title":"Scorpio Parameters","text":"<ul> <li>Scorpio::output_yaml_files:  <ul> <li>description: MISSING </li> <li>type: array(string)  </li> </ul> </li> <li>Scorpio::model_restart::filename_prefix:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> </ul>"},{"location":"common/eamxx_params/#homme-namelist","title":"Homme namelist","text":"<ul> <li>ctl_nl::cubed_sphere_map:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::disable_diagnostics:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::dt_remap_factor:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>constraints: ge 1  </li> </ul> </li> <li>ctl_nl::dt_tracer_factor:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>constraints: ge 1  </li> </ul> </li> <li>ctl_nl::hv_ref_profiles:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_order:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_scaling:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle_tom:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::hypervis_subcycle_q:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::nu:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::nu_top:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::pgrad_correction:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ftype:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> <li>valid values: 0,2  </li> </ul> </li> <li>ctl_nl::se_geometry:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_limiter_option:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne_x:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_ne_y:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_nsplit:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_partmethod:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_topology:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::se_tstep:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::statefreq:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::theta_advect_form:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::theta_hydrostatic_mode:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::tstep_type:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::vert_remap_q_alg:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::transport_alg:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::vtheta_thresh:  <ul> <li>description: MISSING </li> <li>type: MISSING </li> </ul> </li> <li>ctl_nl::internal_diagnostics_level:  <ul> <li>description: MISSING </li> <li>type: integer  </li> </ul> </li> <li>ctl_nl::mesh_file:  <ul> <li>description: MISSING </li> <li>type: file  </li> </ul> </li> </ul>"},{"location":"common/installation/","title":"Installation","text":"<p>Follow these simple instructions to build and test EAMxx's standalone configuration for yourself. This document makes use of the following paths:</p> <ul> <li><code>${RUN_ROOT_DIR}</code>: the root directory where EAMxx is built and run</li> <li><code>${EAMXX_SRC_DIR}</code>: the directory into which you've cloned the <code>scream</code> repo</li> </ul> <p>EAMxx's configuration and build system is based on CMake. CMake has been around a while and has gained a lot of traction in recent years, especially in the HPC community. It has good reference documentation, but it can be tricky to use if you've never encountered it. Ask a EAMxx team member for help if you're stuck on something CMake-related.</p> <p>If you see a <code>CMakeLists.txt</code> files or a file with a <code>.cmake</code> suffix, that's just part of the build system. You might also see files with <code>CTest</code> as part of their name. These files are related to CTest, CMake's testing tool.</p>"},{"location":"common/installation/#prerequisites","title":"Prerequisites","text":"<p>First, make sure you're on one of the machines supported by EAMxx, or that you have the following software installed:</p> <ul> <li>A working MPI installation (typically MPICH or Open-MPI)</li> <li>CMake and GNU Make</li> <li>A working set of C, C++, and Fortran compilers</li> <li>A recent version of Git</li> <li>A working installation of NetCDF,   including both C and   Fortran libraries.</li> </ul>"},{"location":"common/installation/#setting-up-your-environment","title":"Setting Up Your Environment","text":""},{"location":"common/installation/#configuring-and-building-scream","title":"Configuring and Building Scream","text":""},{"location":"common/installation/#1-start-from-a-trustworthy-commit","title":"1. Start From a Trustworthy Commit","text":"<p>First, make sure you've cloned the EAMxx repo (including all submodules) to <code>EAMXX_SRC_DIR</code> using the following command:</p> <pre><code>git clone --recurse-submodules https://github.com/E3SM-Project/scream\n</code></pre> <p>If you have already cloned the project and forgot to type <code>--recurse-submodules</code>, you can change to <code>$EAMXX_SRC_DIR</code> and using the following command to initialize, fetch and checkout all submodules:</p> <pre><code>git submodule update --init --recursive\n</code></pre> <p>If you're running a branch that's not <code>master</code>, check out this branch with</p> <pre><code>git checkout &lt;branch&gt;\n</code></pre>"},{"location":"common/installation/#2-configure-your-eamxx-build","title":"2. Configure Your EAMxx Build","text":"<p>Change to your <code>$RUN_ROOT_DIR</code> directory and use CMake to configure your build.</p> <p>If you're building SCREAM on one of our supported platforms, you can tell CMake to use the appropriate machine file using the <code>-C</code> flag. Machine files are located in <code>$EAMXX_SRC_DIR/components/eamxx/cmake/machine-files</code>. Take a look and see whether your favorite machine has one.</p> <p>For example, to configure SCREAM on the Quartz machine at LLNL:</p> <pre><code>cd $RUN_ROOT_DIR\ncmake \\\n    -DCMAKE_CXX_COMPILER=$(which mpicxx) \\\n    -DCMAKE_BUILD_TYPE=Debug \\\n    -C ${EAMXX_SRC_DIR}/components/eamxx/cmake/machine-files/quartz.cmake \\\n    ${EAMXX_SRC_DIR}/components/eamxx\n</code></pre> <p>If you're building on a machine that doesn't have a ready-made machine file, you can try configuring your build by manually passing options to CMake. This usually looks something like the following, which configures EAMxx to compile CPU code using Kokkos's OpenMP backend: <pre><code>cd $RUN_ROOT_DIR\ncmake \\\n    -D CMAKE_BUILD_TYPE=Debug \\\n    -D CMAKE_C_COMPILER=mpicc \\\n    -D CMAKE_CXX_COMPILER=mpicxx \\\n    -D CMAKE_Fortran_COMPILER=mpif90 \\\n    -D MPIEXEC_EXECUTABLE=`which mpiexec` \\\n    -D EKAT_MPI_NP_FLAG:STRING=-n \\\n    -D SCREAM_DYNAMICS_DYCORE=HOMME \\\n    -D SCREAM_DOUBLE_PRECISION:BOOL=ON \\\n    -D SCREAM_INPUT_ROOT:PATH=/path/to/scream-input \\\n    -D Kokkos_ENABLE_DEBUG=TRUE \\\n    -D Kokkos_ENABLE_AGGRESSIVE_VECTORIZATION=OFF \\\n    -D Kokkos_ENABLE_SERIAL=ON \\\n    -D Kokkos_ENABLE_OPENMP=ON \\\n    -D Kokkos_ENABLE_LIBDL=OFF \\\n    -D Kokkos_ENABLE_PROFILING=OFF \\\n    -D Kokkos_ENABLE_DEPRECATED_CODE=OFF \\\n    -D KOKKOS_ENABLE_ETI:BOOL=OFF \\\n    -D NetCDF_C_PATHS=/path/to/netcdf-c-dir \\\n    -D NetCDF_Fortran_PATHS=/path/to/netcdf-f90-dir \\\n    -D PnetCDF_C_PATHS=/path/to/pnetcdf-dir \\\n    -D PnetCDF_Fortran_PATHS=/path/to/pnetcdf-f90-dir \\\n    ${EAMXX_SRC_DIR}/components/eamxx\n</code></pre></p> <p>In either case, EAMxx requires MPI-aware compilers. Let's examine these options (only some of which are required on any given machine) to make sure we know what they do:</p> <ul> <li><code>CMAKE_BUILD_TYPE</code>: specifies whether you are building EAMxx in a   developer-friendly configuration (<code>Debug</code>), for a production run (<code>Release</code>)   or for performance profiling or some other specialized purpose. Typically,   you'll set this option to <code>Debug</code> or <code>Release</code>.</li> <li><code>CMAKE_{C,CXX,Fortran}_COMPILER</code>: the name of the command used to invoke an   MPI-enabled C, C++, or Fortran compiler to build EAMxx</li> <li><code>MPIEXEC_EXECUTABLE</code>: the name of the command used to run EAMxx using MPI,   typically <code>mpiexec</code> or <code>mpirun</code>, but possibly different depending on your   desired machine</li> <li><code>EKAT_MPI_NP_FLAG</code>: the flag passed to <code>MPIEXEC_EXECUTABLE</code> that you use to   specify the number of desired MPI processes. This is typically <code>-n</code> for   <code>mpiexec</code> and <code>-np</code> for <code>mpirun</code>.</li> <li><code>SCREAM_DYNAMICS_DYCORE</code>: specifies the dycore used for configuring EAMxx,   which is <code>NONE</code> if you are not configuring EAMxx to run its dycore-related   tests, or <code>HOMME</code> if you want to use HOMMExx</li> <li><code>SCREAM_DOUBLE_PRECISION</code>: indicates whether EAMxx's <code>Real</code> type is a   double-precision (<code>ON</code>) or single-precision (<code>OFF</code>) floating point type</li> <li><code>SCREAM_INPUT_ROOT</code>: specifies the location of the top-level folder that   stores input data files for EAMxx. This folder is populated with input files   which are downloaded automatically during EAMxx's build process.</li> <li>The Kokkos-related build options (most of which begin with <code>Kokkos_</code>) are   described in the Kokkos Wiki</li> <li><code>NetCDF_C_PATHS</code>: specifies one or more folders in which the NetCDF C library   and headers are installed. In the simplest configuration, the headers should   be located in <code>${NetCDF_C_PATHS}/include</code> and the library should live in   <code>${NetCDF_C_PATHS}/lib</code>.</li> <li><code>NetCDF_Fortran_PATHS</code>: specifies one or more folders in which the NetCDF   Fortran library and modules are installed. Analogous to <code>${NetCDF_C_PATHS}</code>,   <code>.mod</code> files should be in <code>${NetCDF_Fortran_PATHS}/include</code>, and the library   should be installed in <code>${NetCDF_Fortran_PATHS}/lib</code>.</li> <li><code>PnetCDF_C_PATHS</code>: specifies one or more folders in which the pNetCDF C   library and headers are installed, analogous to <code>NetCDF_C_PATHS</code>.</li> <li><code>PnetCDF_Fortran_PATHS</code>: specifies one or more folders in which the pNetCDF   Fortran library and modules are installed, analogous to   <code>NetCDF_Fortran_PATHS</code>.</li> </ul> <p>Above, we've configured <code>Debug</code> builds to make it easier to find and fix errors. For performance testing, you should configure a <code>Release</code> build and make use of other options, depending on your architecture.</p>"},{"location":"common/installation/#3-build-scream","title":"3. Build SCREAM","text":"<p>Now you can build SCREAM from that same directory:</p> <pre><code>make -j\n</code></pre> <p>The <code>-j</code> flag tells Make to use threads to compile in parallel. If you like, you can set the number of threads by passing it as an argument to <code>-j</code> (e.g. <code>make -j8</code>).</p>"},{"location":"common/installation/#running-tests","title":"Running Tests","text":"<p>You can run EAMxx's tests to make sure your build works by following the instructions here.</p>"},{"location":"developer/","title":"SCREAM Developer Guide","text":""},{"location":"developer/ci_nightly/","title":"Continuous Integration and Nightly Testing","text":"<ul> <li>Autotester quick overview</li> <li>Nightly overview, CDash</li> </ul>"},{"location":"developer/cime_testing/","title":"Full Model Testing","text":"<p>Quickly review CIME test infrastructure and how EAMxx uses it</p> <ul> <li>test types, specifiers (<code>_LnX</code>,<code>_D</code>,<code>_PMxN</code>,..), grids, compsets, test-mods</li> <li>available grids/compsets for EAMxx, and where to find them</li> <li>how to add atmchange in <code>shell_commands</code> test mods</li> </ul>"},{"location":"developer/field/","title":"Fields","text":""},{"location":"developer/field/#field","title":"Field","text":"<p>In EAMxx, a <code>Field</code> is a data structure holding two things: pointers to the data and pointers to metadata. Both the data and metadata are stored in <code>std::shared_ptr</code> instances, to ensure consistency across all copies of the field. This allows for fast shallow copy semantic for this class.</p> <p>The data is stored on both CPU and device memory (these may be the same, depending on the Kokkos backend). In EAMxx, we always assume and guarantee that the device data is up to date. That implies that the data be explicitly synced to host before using it on host, and explicitly synced to device after host manipulation, in order to ensure correctness. In order to access the data, users must use the <code>get_view</code> method, which takes two template arguments: the data type, and an enum specifying whether CPU or device data is needed. The data type is used to reinterpret the generic pointer stored inside to a view of the correct scalar type and layout. It is a possibly const-qualified type, and if the field was marked as \"read-only\", the method ensures that the provided data type is const. A read-only field can be created via the <code>getConst</code> method, which returns an identical copy of the field, but marked as read-only. The enum specifying host or device data is optional, with device being the default.</p> <p>The metadata is a collection of information on the field, such as name, layout, units, allocation size, and more. Part of the metadata is immutable after creation (e.g., name, units, or layout), while some metadata can be partially or completely modified. The metadata is contained in the <code>FieldHeader</code> data structure, which contains four parts:</p> <ul> <li><code>FieldIdentifier</code>: stores the field's name, layout, units, data type, and name of the grid where it's defined.   These information are condensed in a single string, that can be used to uniquely identify a field,   allowing to distinguish between different version of the same field. The layout is stored in the <code>FieldLayout</code>   data structure, which includes:<ul> <li>the field tags: stored as a <code>std::vector&lt;FieldTag&gt;</code>, they give context to the field's extents.</li> <li>the field dims: stored both as a <code>std::vector&lt;int&gt;</code>, as well as a 1d <code>Kokkos::View</code>.</li> </ul> </li> <li><code>FieldTracking</code>: stores information on the usage of the field, as well as its possible connections to other   fields. In particular, the tracked items are:<ul> <li>the field time stamp: the time stamp when the field was last updated.</li> <li>the field accumulation start time: used for fields that are accumulated over several time steps   (or time step subcycles). For instance, it allows to reconstruct fluxes from raw accumulations.</li> <li>the providers/customers: lists of atmosphere processes (see below) that respectively require/compute   the field in their calculations.</li> <li>the field groups: a list of field groups that this field belongs too. Field groups are used to access   a group of fields without explicit prior knowledge about the number and/or names of the fields.</li> </ul> </li> <li><code>FieldAllocProp</code>: stores information about the allocation. While the field is not yet allocated, users can   request special allocations for the field, for instance to accommodate packing (for SIMD), which may   require padding. Upon allocation, this information is then used by the Field structure to extract the   actual data, wrapped in a properly shaped <code>Kokkos::View</code>. The alloc props are also responsible of tracking   additional information in case the field is a \"slice\" of a higher-dimensional one, a fact that can affect   how the data is accessed.</li> <li>Extra data: stored as a <code>std::map&lt;std::string,ekat::any&gt;</code>, allows to catch any metadata that does not fit   in the above structures. This is a last resort structure, intended to accommodate the most peculiar   corner cases, and should be used sparingly.</li> </ul>"},{"location":"developer/grid/","title":"Grids and Remappers","text":""},{"location":"developer/grid/#grids-and-remappers","title":"Grids and Remappers","text":"<p>In EAMxx, the <code>AbstractGrid</code> is an interface used to access information regarding the horizontal and vertical discretization. The most important information that the grid stores is:</p> <ul> <li>the number of local/global DOFs: these are the degrees of freedom of the horizontal grid only. Here,   local/global refers to the MPI partitioning.</li> <li>the DOFs global IDs (GIDs): a list of GIDs of the DOFs on the current MPI rank, stored as a Field</li> <li>the local IDs (LIDs) to index list: this list maps the LID of a DOF (that is, the position of the DOF   in the GID list) to a \"native\" indexing system for that DOF. For instance, a <code>PointGrid</code> (a class derived from   <code>AbstractGrid</code>) is a simple collection of points, so the \"native\" indexing system coincides with the LIDs.   However, for a <code>SEGrid</code> (a derived class, for spectral element grids), the \"native\" indexing is a triplet   <code>(ielem,igp,jgp)</code>, specifying the element index, and the two indices of the Gauss point within the element.</li> <li>geometry data: stored as a <code>std::map&lt;std::string,Field&gt;</code>, this represent any data that is intrinsically   linked to the grid (either along the horizontal or vertical direction), such as lat/lon coordinates,   vertical coordinates, area associated with the DOF.</li> </ul> <p>Grids can also be used to retrieve the layout of a 2d/3d scalar/vector field, which allows certain downstream classes to perform certain operations without assuming anything on the horizontal grid.</p> <p>In general, grid objects are passed around the different parts of EAMxx as const objects (read-only). The internal data can only be modified during construction, which usually is handled by a <code>GridsManager</code> object.</p>"},{"location":"developer/io/","title":"Input-Output","text":"<p>In EAMxx, I/O is handled through the SCORPIO library, currently a submodule of E3SM. The <code>scream_io</code> library within eamxx allows to interface the EAMxx infrastructure classes with the SCORPIO library.</p>"},{"location":"developer/kokkos_ekat/","title":"Building Blocks","text":"<p>Here we can discuss EKAT, Kokkos, and all of the highly-technical non-scientific stuff that makes our heads hurt.</p>"},{"location":"developer/kokkos_ekat/#kokkos-views","title":"Kokkos Views","text":""},{"location":"developer/kokkos_ekat/#vectorization-packs","title":"Vectorization: Packs","text":""},{"location":"developer/kokkos_ekat/#fields-and-the-field-manager","title":"Fields and the Field Manager","text":""},{"location":"developer/kokkos_ekat/#preconditions-postconditions-and-invariants","title":"Preconditions, Postconditions, and Invariants","text":""},{"location":"developer/managers/","title":"Managers","text":""},{"location":"developer/managers/#fieldmanager-and-gridsmanager","title":"FieldManager and GridsManager","text":""},{"location":"developer/processes/","title":"Atmospheric Processes","text":"<p>In EAMxx, the <code>AtmosphereProcess</code> (AP) is a class representing a portion of the atmosphere timestep algorithm. In simple terms, an AP is an object that given certain input fields performs some calculations to compute some output fields.</p> <p>TODO: describe init sequcene (e.g., the process of requesting fields), base class main       interfaces/capabilities (e.g., subcycling), class expectations (e.g., must update fields on physics grid)</p> <p>Here is a list of currently implemented atmosphere processes. TODO: add links to papers/github-repos, and a SMALL description * p3: Microphysics, blah blah * SHOC: Macrophysics/Turbulence, blah * rrtmgp: Radiation, blah * spa: prescribed aerosols, blah blah * surface coupling: blah * mam: prognostic aerosols, blah blah * nudging: This process is responsible for nudging the model simulation given a set of files with a target nudged state.</p>"},{"location":"developer/source_tree/","title":"EAMxx's Source Tree","text":"<p>All EAMxx-specific code can be found in <code>components/eamxx</code> within the EAMxx repo. Here's how things are organized:</p> <ul> <li><code>cime_config</code>: Tools and XML files for integrating EAMxx with E3SM via the   CIME framework.</li> <li><code>cmake</code>: CMake functions and macros used by the configuration/build system.</li> <li><code>data</code>: Data files used by our tests.</li> <li><code>docs</code>: Documentation for the EAMxx project, including design documents,   instructions for building and testing EAMxx, and this document.</li> <li><code>scripts</code>: Miscellaneous scripts that implement workflows for running tests   and analyzing performance.</li> <li><code>src</code>: All C++ source code (and any bridges to Fortran) for EAMxx are stored   here. We describe the contents of this directory in greater detail below.</li> <li><code>tests</code>: Implements standalone, end-to-end tests for various EAMxx   components (RRTMG, HOMME, P3, SHOC, etc).</li> </ul> <p>In addition, you'll notice the following files in <code>components/eamxx</code>:</p> <ul> <li><code>CMakeLists.txt</code>: The CMake file that defines EAMxx's configuration/build   system.</li> <li><code>CTestConfig.cmake</code>: This CTest file contains parameters that determine how   our test results are reported to the E3SM CDash Site.</li> <li><code>README.md</code>: EAMxx's top-level README file, which describes the project and   its purpose.</li> <li><code>mkdocs.yml</code>: The configuration file for mkdocs,   the tool we currently use to build and publish our documentation.</li> </ul>"},{"location":"developer/source_tree/#the-src-directory","title":"The <code>src</code> Directory","text":"<p>Herein l\u0456es the source code for EAMxx. Broadly, here's where things are:</p> <ul> <li><code>control</code>: Contains the atmosphere driver and basic tests for it.</li> <li><code>dynamics</code>: Here's where HOMME lives within EAMxx, along with code for   interfacing with it using EAMxx's data structures.</li> <li><code>mct_coupling</code>: Glue code for embedding EAMxx within E3SM as an atmosphere   component using the MCT coupler.</li> <li><code>physics</code>: Source code for physics-related atmospheric processes, including</li> <li><code>p3</code>: The C++/Kokkos implementation of P3 microphysics within EAMxx.</li> <li><code>shoc</code>: The C++/Kokkos implementation of SHOC macrophysics within EAMxx.</li> <li><code>rrtmgp</code>: A stub for the radiation processes as represented in EAMxx.</li> <li><code>share</code>: Utilities and data structures common to these processes.</li> <li><code>share</code>: Utilities used by various components within EAMxx. Of note:</li> <li><code>io</code>: EAMxx's interface to the SCORPIO     library.</li> <li><code>diagnostics</code>: A collection of simple classes used to compute diagnostic   quantities.</li> </ul> <p>Each of these directories contains a <code>CMakeLists.txt</code> file for defining how things are build, and a <code>tests/</code> subdirectory that houses relevant unit and verification tests.</p> <p>You'll also see some other files in the <code>src/</code> directory itself, such as</p> <ul> <li><code>scream_config.h.in</code>: A template for generating a C++ header file with   EAMxx configuration information.</li> </ul>"},{"location":"developer/standalone_testing/","title":"Standalone EAMxx Testing","text":"<p>In this section we describe our testing methodology for standalone EAMxx configurations. We use several types of tests</p> <ul> <li>Unit tests are individual test programs that demonstrate that a small set   of code performs a single function or a set of related functions. We use   a C++ unit testing framework called Catch2   to implement unit tests.</li> <li>Property (verification) tests are test programs that configure code that   demonstrates that a part of EAMxx (for example, an atmospheric physics   parameterization or the dynamical core) is able to produce an answer that   satisfies some physical constraint or matches a known solution under specific   circumstances.</li> <li>Fortran-C++ \"bit-for-bit\" (BFB) tests are test programs, often implemented   as unit tests, that demonstrate that a set of C++ code ported from Fortran   produces bit-for-bit identical results to its Fortran counterpart, provided   certain compiler options are enabled (such as \"strict\" floating-point   arithmetic).</li> <li>Test Suites are named collections of tests that can be run on demand using   the ctest command.</li> </ul> <p>We also support a <code>test-all-scream</code> configuration that runs all of the standalone tests for an EAMxx configuration.</p>"},{"location":"developer/standalone_testing/#running-eamxxs-tests-with-ctest","title":"Running EAMxx's Tests with CTest","text":"<p>Before running the tests, generate a baseline file:</p> <pre><code>cd $RUN_ROOT_DIR\nmake baseline\n</code></pre> <p>The tests will run, automatically using the baseline file, which is located in the CMake-configurable path <code>${SCREAM_TEST_DATA_DIR}</code>. By default, this path is set to <code>data/</code> within your build directory (which is <code>$RUN_ROOT_DIR</code>, in our case).</p> <p>To run all of SCREAM's tests, make sure you're in <code>$RUN_ROOT_DIR</code> and type</p> <pre><code>ctest -VV\n</code></pre> <p>This runs everything and reports results in an extra-verbose (<code>-VV</code>) manner.</p> <p>You can also run subsets of the SCREAM tests. For example, to run only the P3 regression tests (again, from the <code>$RUN_ROOT_DIR</code> directory), use</p> <pre><code>ctest -R p3_regression\n</code></pre>"},{"location":"developer/standalone_testing/#grouping-tests-with-labels","title":"Grouping Tests with Labels","text":"<p>We can create groupings of tests by using labels. For example, we have a <code>driver</code> label that runs tests for SCREAM's standalone driver. You can see a list of available labels by typing</p> <pre><code>ctest --print-labels\n</code></pre> <p>To see which tests are associated with a given label (e.g. <code>driver</code>), use</p> <pre><code>ctest -L driver -N\n</code></pre>"},{"location":"developer/standalone_testing/#eamxx-test-suites","title":"EAMxx Test Suites","text":""},{"location":"developer/standalone_testing/#the-p3_regression-suite","title":"The <code>p3_regression</code> Suite","text":"<p><code>p3_regression</code> uses a baseline file to compare any new or altered implementations with our P3 Fortran reference implementation. If you're working on the C++/Kokkos implementation, you can invoke any new tests to the function <code>Baseline::run_and_cmp</code> in <code>${SCREAM_SRC_DIR}/components/eamxx/p3/tests/p3_run_and_cmp.cpp</code>.</p> <p>If the reference Fortran implementation changes enough that a new baseline file is required, make sure to let other SCREAM team members know, in order to minimize disruptions.</p>"},{"location":"developer/style_guide/","title":"SCREAM C++ Style Guide","text":"<p>Here's our style guide. Let the holy wars begin!</p>"},{"location":"developer/style_guide/#types","title":"Types","text":""},{"location":"developer/style_guide/#functions-and-methods","title":"Functions and Methods","text":""},{"location":"developer/style_guide/#variables","title":"Variables","text":""},{"location":"technical/","title":"SCREAM Technical Guide","text":"<p>SCREAM contributors and maintainers will add detailed technical information about SCREAM here.</p>"},{"location":"technical/aerocom_cldtop/","title":"The AeroCOM algorithm","text":"<p>The goal of the AeroCOM algorithm is to calculate properties at cloud top based on the AeroCOM recommendation. There are two main parts of the algorithm: probabilistically determining \"cloud top\" and then \"calculating properties\" at said cloud top.</p> <p>We treat model columns independently, so we loop over all columns in parallel. We then loop over all layers in serial (due to needing an accumulative product), starting at 2 (second highest) layer because the highest is assumed to have no clouds. Let's take a photonic approach from above the model top. Let's say that \\(p_{k}\\) is the probability of a photon passing through the layer \\(k\\). We follow the maximum-random overlap assumption. In all cases, we assume the cloudiness (or cloudy fraction) is completely opaque.</p> <p>We assume the highest layer has no clouds, thus the \\(p_{k} = 1\\) for the highest layer. Note that \\(p_{k}\\) is initialized as 1 for all layers. We also clip the cloudy fraction \\(C_{i,k}\\) to ensure that \\(C_{i,k} \\in [0+\\epsilon, 1-\\epsilon]\\), where \\(\\epsilon = 0.001\\). Starting at the second highest layer, \\(k+1\\), we check if some \"cloudy\" conditions are met. These conditions are now arbitrarily defined by a cloudiness threshold of \\(\\epsilon\\) (i.e., \\(C_{i,k}&gt;\\epsilon\\)) and a non-zero threshold on the total (both liquid and ice) droplet number concentration (i.e., \\(cQ_{i,k} + iQ_{i,k} &gt; 0\\)). If the conditions are met, we estimate the cloud-top cloud fraction using an accumulative product following the maximum-random overlap assumption.</p> \\[c_{i} = 1 - \\prod_{k=2}^{K} p_{k} = 1 - \\prod_{k=2}^{K} \\frac{1 - \\max(C_{i,k}, C_{i,k-1})}{1-C_{i,k-1}}\\] <p>In order to estimate cloud-top properties, we weight by the probability of \"remaining cloudiness\" or \\(p_{k-1} - p_{k}\\).</p> Type Equation cloud property \\(x_{i} = \\sum_{k=2}^{K} X_{i,k} \\Phi_{i,k} (p_{k-1} - p_{k})\\) cloud content \\(x_{i} = \\sum_{k=2}^{K} \\Phi_{i,k} (p_{k-1} - p_{k})\\) other property \\(x_{i} = \\sum_{k=2}^{K} X_{i,k} (p_{k-1} - p_{k})\\) <p>In the above, \\(\\Phi_{i,k}\\) is the thermodynamic phase defined by the cloud droplet number concentration ratios.</p> \\[i\\Phi_{i,k} = \\frac{iQ_{i,k}}{iQ_{i,k} + cQ_{i,k}}\\] \\[c\\Phi_{i,k} = \\frac{cQ_{i,k}}{iQ_{i,k} + cQ_{i,k}}\\] <p>The thermodynamic phase is used only for cloud properties (e.g., cloud-top cloud droplet number concentration) or cloud content (e.g., cloud liquid content). Further, \\(X_{i,k}\\) is the three-dimensional cloud property of interest which is needed if we are converting a property from three-dimensional (\\(X\\)) to its two-dimensional counterpart (\\(x\\)). \"Other\" properties here include temperature and pressure which are not dependent on the thermodynamic phase.</p> <p>A helpful references: R\u00e4is\u00e4nen, P., Barker, H. W., Khairoutdinov, M. F., Li, J., &amp; Randall, D. A. (2004). Stochastic generation of subgrid\u2010scale cloudy columns for large\u2010scale models. Quarterly Journal of the Royal Meteorological Society: A journal of the atmospheric sciences, applied meteorology and physical oceanography, 130(601), 2047-2067.</p>"},{"location":"technical/clean_clear_sky/","title":"Clean- and clean-clear-sky diagnostics","text":"<p>In order to decompose the aerosol effective radiative forcing, additional diagnostic radiation calls are needed. These extra diagnostics are optionally added to the main radiation call. The extra diagnostics are:</p> <ul> <li>Clean-clear-sky fluxes: the fluxes that would be present if there were neither aerosols nor clouds, and are calculated by adding an additional radiation call at the very beginning of the logic before the optics class is endowed with aerosol and cloud properties.</li> <li>Clean-sky fluxes: the fluxes that would be present if there were no aerosols, and are calculated by adding an additional radiation call after substantiating an additional optics class, but not endowing it with aerosol properties.</li> </ul> <p>It was necessary to add an additional optics class because the original optics class is endowed with aerosols before clouds (in order to calculate the clear-sky fluxes). The extra calls are controlled by runtime flags <code>extra_clnclrsky_diag</code> and <code>extra_clnsky_diag</code> (they take either <code>true</code> or <code>false</code> as their values).</p>"},{"location":"user/","title":"SCREAM User Guide","text":"<p>For the time being, see our public confluence EAMxx user guide</p>"},{"location":"user/coarse_nudging/","title":"Nudging from coarse data","text":"<p>Because EAMxx is designed to support ultra-high resolutions (in fact, that was the initial reason for its inception), it is not feasible to produce nudging data at the same resolution. Instead, in EAMxx, it is possible to nudge from coarse data. This is done by remapping the coarse data provided by the user to the runtime physics grid of EAMxx. In order to enable nudging from coarse data, the user must provide nudging data at the coarse resolution desired and an appropriate     ncremap-compatible mapping file.</p>"},{"location":"user/coarse_nudging/#example-setup","title":"Example setup","text":"<p>A user can produce coarse nudging data from running EAMxx or EAM at a ne30pg2 or any other applicable resolution. Additionally, several users in the E3SM projects have produced nudging data at the ne30pg2 resolution from the MERRA2 and ERA5 datasets. A limitation for now is that the nudging data must be provided explicitly, either as one file or as a list of files. This can be problematic for long list of files, but we are working on a solution to this problem.</p> <p>Let's say that the nudging data is provided as one file in the following path: <code>/path/to/nudging_data_ne4pg2_L72.nc</code>. Then, a mapping file is provided as <code>/another/path/to/mapping_file_ne4pg2_to_ne120pg2.nc</code>. Then if the physics grid is ne120pg2, the user must enable the nudging process, specify the nudging files, and provide the specifies the nudging data and a remap file. In other words, the following options are needed:</p> <pre><code>./atmchange atm_procs_list=(sc_import,nudging,homme,physics,sc_export)\n./atmchange nudging_fields=U,V\n./atmchange nudging_filename=/path/to/nudging_data_ne4pg2_L72.nc\n./atmchange nudging_refine_remap_mapfile=/another/path/to/mapping_file_ne4pg2_to_ne120pg2.nc\n</code></pre>"},{"location":"user/model_input/","title":"Model input","text":"<p>TODO: explain how defaults XML, atmchange/atmquery, buildml, and input.yaml work.</p> <p>Here is a list of the currently configurable runtime parameters for EAMxx.</p>"},{"location":"user/model_output/","title":"Model output","text":"<p>EAMxx allows the user to configure the desired model output via YAML files, with each YAML file associated to a different output file.</p>"},{"location":"user/model_output/#basic-output-yaml-file-syntax","title":"Basic output YAML file syntax","text":"<p>The following is an example of a simple output request.</p> <pre><code>%YAML 1.1\n---\nfilename_prefix: my_output\nAveraging Type: Average\nMax Snapshots Per File: 10\nFields:\n  Physics:\n    Field Names:\n      - T_mid\n      - qv\n  Dynamics:\n    Field Names:\n      - dp3d_dyn\n      - omega_dyn\noutput_control:\n  Frequency: 6\n  frequency_units: nhours\n</code></pre> <p>Notice that lists can be equivalently specified in YAML as <code>Field Names: [f1, f2, f3]</code>. The user can specify fields to be outputted from any of the grids used in the simulation. In the example above, we requested fields from both the Physics and Dynamics grid. The other parameters are</p> <ul> <li> <p><code>Averaging Type</code>: how the fields are integrated in time before being saved. Valid   options are</p> <ul> <li>Instant: no integration, each time frame saved corresponds to instantaneous values   of the fields</li> <li>Average/Max/Min: the fields undergo the corresponding operation over the time   interval specified in the <code>output_control</code> section. In the case above, each snapshot   saved to file corresponds to an average of the output fields over 6h windows.</li> </ul> </li> <li> <p><code>filename_prefix</code>: the prefix of the output file, which will be created in the run   directory. The full filename will be <code>$prefix.$avgtype.$frequnits_x$freq.$timestamp.nc</code>,   where $timestamp corresponds to the first snapshot saved in the file for Instant output,   or the beginning of the first averaging window for the other averaging types</p> </li> <li><code>Max Snapshots Per File</code>: specifies how many time snapshots can be put in a file. Once   this number is reached, EAMxx will close the file and open a new one.</li> <li><code>Frequency</code>: how many units of time are between two consecutive writes to file. For   Instant output the fields are \"sampled\" at this frequency, while for other averaging   types the fields are \"integrated\" in time over this window</li> <li><code>frequency_units</code>: units of the output frequency. Valid options are <code>nsteps</code> (the   number of atmosphere time steps), <code>nsecs</code>, <code>nmins</code>, <code>nhours</code>, <code>ndays</code>, <code>nmonths</code>,   <code>nyears</code>.</li> </ul>"},{"location":"user/model_output/#diagnostic-output","title":"Diagnostic output","text":"<p>In addition to the fields computed by EAMxx as part of the timestep, the user can request to output derived quantities, which will be computed on the fly by the I/O interface of EAMxx. There are two types of diagnostic outputs:</p> <ul> <li> <p>quantities computed as a function of EAMxx fields. These are simply physical quantities   that EAMxx does not keep in persistent storage. As of August 2023, the available   derived quantities are (case sensitive):</p> <ul> <li><code>PotentialTemperature</code></li> <li><code>AtmosphereDensity</code></li> <li><code>Exner</code></li> <li><code>VirtualTemperature</code></li> <li><code>z_int</code></li> <li><code>z_mid</code></li> <li><code>geopotential_int</code></li> <li><code>geopotential_mid</code></li> <li><code>dz</code></li> <li><code>DryStaticEnergy</code></li> <li><code>SeaLevelPressure</code></li> <li><code>LiqWaterPath</code></li> <li><code>IceWaterPath</code></li> <li><code>VapWaterPath</code></li> <li><code>RainWaterPath</code></li> <li><code>RimeWaterPath</code></li> <li><code>ShortwaveCloudForcing</code></li> <li><code>LongwaveCloudForcing</code></li> <li><code>RelativeHumidity</code></li> <li><code>ZonalVapFlux</code></li> <li><code>MeridionalVapFlux</code></li> <li><code>precip_liq_surf_mass_flux</code></li> <li><code>precip_ice_surf_mass_flux</code></li> <li><code>precip_total_surf_mass_flux</code></li> <li><code>surface_upward_latent_heat_flux</code></li> </ul> </li> <li> <p>lower-dimensional slices of a field. These are hyperslices of an existing field or of   another diagnostic output. As of August 2023, given a field X, the available options   are:</p> <ul> <li><code>X_at_lev_N</code>: slice the field <code>X</code> at the N-th vertical level index. Recall that   in EAMxx N=0 corresponds to the model top.</li> <li><code>X_at_model_bot</code>, <code>X_at_model_top</code>: special case for top and bottom of the model.</li> <li><code>X_at_Ymb</code>, <code>X_at_YPa</code>, <code>X_at_YhPa</code>: interpolates the field <code>X</code> at a vertical position   specified by the give pressure <code>Y</code>. Available units are <code>mb</code> (millibar), <code>Pa</code>, and <code>hPa</code>.</li> <li><code>X_at_Ym</code>: interpolates the field <code>X</code> at a vertical height of <code>Y</code> meters.</li> </ul> </li> </ul>"},{"location":"user/model_output/#remapped-output","title":"Remapped output","text":"<p>The following options can be used to to save fields on a different grid from the one they are computed on.</p> <ul> <li><code>horiz_remap_file</code>: a path to a map file (as produced by <code>ncremap</code>) between the grid   where the fields are defined and a coarser grid. EAMxx will use this to remap fields   on the fly, allowing to reduce the size of the output file. Note: with this feature,   the user can only specify fields from a single grid.</li> <li><code>vertical_remap_file</code>: similar to the previous option, this map file is used to   refine/coarsen fields in the vertical direction.</li> <li><code>IOGrid</code>: this parameter can be specified inside one of the grids sections, and will   denote the grid (which must exist in the simulation) where the fields must be remapped   before being saved to file. This feature is really only used to save fields on the   dynamics grid without saving twice the DOFs at the interface of two spectral elements.   In fact, native output from the Dynamics grid would produce <code>6*num_elems*ngp*ngp</code>,   where <code>ngp</code> is the number of Gauss points along each axis in the 2d spectral element.   Note: this feature cannot be used along with the horizontal/vertical remapper.</li> </ul>"},{"location":"user/model_output/#add-output-stream-to-a-cime-case","title":"Add output stream to a CIME case","text":"<p>In order to tell EAMxx that a new output stream is needed, one must add the name of the yaml file to be used to the list of yaml files that EAMxx will process. From the case folder, after <code>case.setup</code> has run, one can do</p> <pre><code>./atmchange output_yaml_files=/path/to/my/yaml/file\n</code></pre> <p>to specify a single yaml file, or</p> <pre><code>./atmchange output_yaml_files+=/path/to/my/yaml/file\n</code></pre> <p>to append to the list of yaml files.</p>"},{"location":"user/model_output/#important-notes","title":"Important notes","text":"<ul> <li>The user should not specify a path to a file in <code>$RUNDIR/data</code>. EAMxx will put a copy of the specified yaml files in that directory, pruning any existing copy of that file. This happens every time that <code>buildnml</code> runs; in particular, it happens during <code>case.submit</code>.</li> <li>As a consequence of the above, the user should not modify the generated yaml files   that are in <code>$RUNDIR/data</code>, since any modification will be lost on the next run   of <code>buildnml</code>. To modify output parmeters, the user should modify the yaml file   that was specified with the <code>atmchange</code> command.</li> <li>EAMxx will parse the yaml file and expand any string of the form $VAR, by looking   for the value of the variable VAR in the CIME case. If VAR is not a valid CIME   variable, an error will be raised.</li> </ul>"}]}