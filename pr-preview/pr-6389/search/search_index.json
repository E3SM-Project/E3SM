{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Energy Exascale Earth System Model (E3SM)","text":"<p>The E3SM documentation is organized into sections for each component model and additional sections for shared tools and general guides.</p>"},{"location":"#component-models","title":"Component Models","text":"<ul> <li>EAM</li> <li>EAMxx</li> <li>ELM</li> <li>MOSART</li> </ul>"},{"location":"#tools","title":"Tools","text":"<ul> <li>generate_domain_files</li> </ul> <p>Please see Developing Docs to learn about how to contribute to the documentation.</p>"},{"location":"EAM/","title":"The E3SM Atmosphere Model (EAM)","text":"<p>Some introductory text here</p> <ul> <li>The EAM User's Guide explains how to control EAM when its running within E3SM.</li> <li>The EAM Developer's Guide explains EAM data structures and how to write new code.</li> <li>The EAM Techincal Guide explains the science behind EAM's code</li> </ul>"},{"location":"EAM/dev-guide/","title":"Developers's Guide","text":"<p>start of the EAM Developer's Guide</p>"},{"location":"EAM/tech-guide/","title":"Technical Guide","text":"<p>start of the EAM Technical Guide</p>"},{"location":"EAM/user-guide/","title":"Users's Guide","text":"<p>start of the EAM User's Guide</p>"},{"location":"ELM/","title":"The E3SM Land Model (ELM)","text":"<p>Some introductory text here</p> <ul> <li>The ELM User's Guide explains how to control ELM when its running within E3SM and how to run in Coupler-bypass mode</li> <li>The ELM Developer's Guide explains ELM data structures and how to develop new code.</li> <li>The ELM Techincal Guide explains the science behind ELM's code</li> </ul>"},{"location":"ELM/dev-guide/","title":"Developers's Guide","text":"<p>This guide contains information for developing ELM and MOSART.</p>"},{"location":"ELM/dev-guide/#_1","title":"Developers's Guide","text":"<ul> <li>Testing development branches: Generating baselines and comparing new development against baselines</li> </ul>"},{"location":"ELM/dev-guide/testing/","title":"Testing","text":"<p>When a developer is ready to issue a PR to integrate their new developments into E3SM's <code>master</code> branch, they need to test their code development to ensure the new development does not introduce unexpected bugs. A land developer needs to atleast run the <code>e3sm_land_developer</code> test suite that involves following two steps: </p> <ul> <li>Step-1: Generate the baselines using the hash on <code>master</code> that was the starting point of the    development branch, and</li> <li>Step-2: Switch to the development branch and re-run the test suite to compare against    the baselines generated in Step-1.</li> </ul> <p>For the purpose of these document, let's assume the developer branch is <code>bishtgautam/lnd/emi-example</code>.</p>"},{"location":"ELM/dev-guide/testing/#step-1-generate-baselines","title":"Step-1: Generate Baselines","text":"<p>Find the starting hash on <code>master</code> by switching to the developer branch and looking at the Git graph.</p> <pre><code>cd &lt;e3sm-dir&gt;\n\n# Switch to your branch\ngit checkout bishtgautam/lnd/emi-example\n\n# Let's look at the graph\ngit log --oneline --decorate --graph\n* 9a2cd8459 (HEAD -&gt; bishtgautam/lnd/emi-example, origin/bishtgautam/lnd/emi-example) Updates the Stub EM code\n* d11fb8c52 Adds a readme and makefile for EMI Demo code\n* 15a0e4b8d Minor update to the EMI demo code\n* 63e2f6dcd Minor fix to ELM configure script\n* 551fc79cc Updates ELM stub and demo code to use CNCarbonStateType\n* 8c9d41f87 Adds code to exchange CNCarbonStateType\n* 0000ded51 Minor fix\n* 2baa4ebec Adds fixes to cmake\n* f77ae2cea Rename few cmake files\n* b48b66dd6 Adds a demo for a Stub EM\n* fa94aea0d Fixes length of variable to store name of EMI data\n* cca0e0be1 Adds capability to print all EMI Data in a list\n* beb1fe9ee Adds .gitignore files for EMI\n* 301acfe7a Renames ExternalModelInterfaceDataMod.F90\n* f0eb5b40b Renames ExternalModelInterfaceDataDimensionMod.F90\n* 076100882 Restructures ELM's EMI directory\n*   cfb7fc2b2 Merge branch 'qzhu-lbl/lnd/ch4_inundation_bugfix' (PR #2814)\n|\\\n| * ec99b1cb4 (origin/qzhu-lbl/lnd/ch4_inundation_bugfix)  - fix ch4 inundatation parameter read in bug\n* |   c59c98116 Merge branch 'darincomeau/mpaso/enable_eddystats' (PR #2821)\n|\\ \\\n| * | c21bb46a4 Turn on eddy stats for oEC60to30v3 and oEC60to30v3wLI ocn grids by default\n* | |   a2dd2fce5 Merge pull request #2811 from E3SM-Project/jayeshkrishna/pio2_cime_changes\n</code></pre> <p>The above Git graph tells us that <code>bishtgautam/lnd/emi-example</code> started with the <code>cfb7fc2b2</code> hash on the <code>master</code>. So, we will generate the baselines using <code>cfb7fc2b2</code>. Checkout <code>cfb7fc2b2</code> and update the submodels via:</p> <pre><code>git checkout cfb7fc2b2\nNote: checking out 'cfb7fc2b2'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b &lt;new-branch-name&gt;\n\nHEAD is now at cfb7fc2b2... Merge branch 'qzhu-lbl/lnd/ch4_inundation_bugfix' (PR #2814)\n\ngit submodule update --init\n</code></pre> <p>Now we will use <code>cime/scripts/create_test</code> to generate baseline for the <code>e3sm_land_developer</code> test suite.</p> <pre><code>cd cime/scripts\n</code></pre> <p>A few things that you need to decide at this stage include the directory location where the baselines will be saved, the name and ID for the baselines, the project allocation that you will use for running the simulation, if you would like to receive email notifications about tests, etc.</p> <pre><code># Define the directory to hold the baseline \nexport MY_BASELINE_DIR=/global/cscratch1/sd/gbisht/e3sm_baselines\n\n# Do you want to use a name for the baseline? \n# One choice could be the git hash that is being used to generate the baselines.\nexport BASELINE_NAME=cfb7fc2b2\n\n# Let's set TEST_ID to be same as BASELINE_NAME\nexport TEST_ID=${BASELINE_NAME}\n\n# If you are a member of E3SM, you could use 'e3sm' project allocation\nexport PROJECT=e3sm\n\n# Set your email\nexport MAIL_USER=&lt;your-mail@something&gt;\n</code></pre> <p>Use <code>./create_test --help</code> to get a complete list of arguments. Below are some additional useful arguments for <code>./create_test</code>:</p> <pre><code># Other arguments\n# -v         : Verbose option\n# -g         : Generate the baseline\n# -q         : If you want to use a particular job queue (e.g. 'debug' queue on NERSC)\n# --walltime : Specify the wall time for jobs (e.g. 30 min is max allowable for 'debug' queue on NERSC)\n# --mail-user: If you want to receive emails about your jobs\n# --mail-type: When to receive emails. Options are: never, all, begin, end, fail.\n# -j         : Number of parallel jobs\n</code></pre> <p>Now run the <code>e3sm_land_developer</code></p> <pre><code>./create_test e3sm_land_developer  \\\n--baseline-root ${MY_BASELINE_DIR} \\\n-b ${BASELINE_NAME}                \\\n-t ${TEST_ID}                      \\\n-q regular                         \\\n-p ${PROJECT}                      \\\n--walltime 00:30:00                \\\n--mail-user $MAIL_USER             \\\n--mail-type all                    \\\n-g                                 \\\n-v                                 \\\n-j 4\n</code></pre> <p>The cases would be named <code>*.G.*</code> to denote one is generating the baselines. It will take a while to compile all the cases and submit the code. It can take a long time (&gt;30mins) for the test suite to run. To avoid interrupting the test suite in the middle, one can run the test suite within a <code>screen</code> command. After the cases have been successfully compiled and submitted, you can check that  status of test by running the <code>cs.status.${TEST_ID}</code> file that was created in the scratch directory.</p>"},{"location":"ELM/dev-guide/testing/#step-2-compare-against-previously-generated-baselines","title":"Step-2: Compare against previously generated baselines","text":"<p>Now, switch to the development branch and be sure to update submodules.</p> <pre><code>cd &lt;e3sm-dir&gt;\ngit checkout bishtgautam/lnd/emi-example\nPrevious HEAD position was cfb7fc2b2... Merge branch 'qzhu-lbl/lnd/ch4_inundation_bugfix' (PR #2814)\nSwitched to branch 'bishtgautam/lnd/emi-example'\nYour branch is up-to-date with 'origin/bishtgautam/lnd/emi-example'.\n\n# Checkout the appropriate submodules\ngit submodule update --init\n</code></pre> <p>Again initialize few settings.</p> <pre><code>cd cime/scripts\n\n# Let's use the settings as the last time\nexport MY_BASELINE_DIR=/global/cscratch1/sd/gbisht/e3sm_baselines\n\n# IMPORTANT: One needs to use the same BASELINE_NAME as in Step-1 because one wants\n#            to compare against the baselines previously generated in Step-1.\nexport BASELINE_NAME=cfb7fc2b2\n\n# You can use the hash at the tip of your branch as the ID\nexport TEST_ID=9a2cd8459\n</code></pre> <p>Run the test suite and compare (via <code>-c</code>) against previously generated baselines.</p> <pre><code>./create_test e3sm_land_developer  \\\n--baseline-root ${MY_BASELINE_DIR} \\\n-b ${BASELINE_NAME}                \\\n-t ${TEST_ID}                      \\\n-q debug                           \\\n--walltime 00:30:00                \\\n--mail-user $MAIL_USER             \\\n--mail-type all                    \\\n-c                                 \\\n-v                                 \\\n-j 4\n</code></pre> <p>The cases would be named <code>*.C.*</code> to denote one is comparing against previously generated baselines. Similar to the last time, a new <code>cs.status.${TEST_ID}</code> would be created and you can check the status of test by running it.</p>"},{"location":"ELM/tech-guide/","title":"Technical Guide","text":"<p>This Technical Guide describes the physics of ELM.</p> <ul> <li>TOP Parameterization: Parameterization of sub-grid topographical effects on solar radiation.</li> </ul>"},{"location":"ELM/tech-guide/top_solar_parameterization/","title":"Top solar parameterization","text":"<p>The TOP solar radiation parameterization in ELM accounts for the effects of sub-grid topography on solar radiation flux, including the shadow effects and multi-scattering between adjacent terrain<sup>1</sup>.</p>"},{"location":"ELM/tech-guide/top_solar_parameterization/#overview","title":"Overview","text":"<p>The incoming solar radiation for a flat surface is composed of direct radiation (\\(F_{dir}^{PP}\\)) from sun, diffuse radiation (\\(F_{dif}^{PP}\\)) from sky, and coupled radiation (\\(F_{couple}^{PP}\\)) that represents surface reflected radiation that is further reflected or scattered by atmospheric particles. ELM v1.0 and ELM v2.0 assume flat surfaces and accounts for \\(F_{dir}^{PP}\\) and \\(F_{dif}^{PP}\\), while neglecting \\(F_{couple}^{PP}\\). The solar radiation scheme of ELM v1.0 and  ELM v2.0 uses the two-stream approximations<sup>2</sup>. In contrast, the incoming solar radiation parametrization of Lee et al. (2011)<sup>3</sup> over mountainous regions includes five components (illustrated in Fig. 1): </p> <ol> <li>direct flux (\\(F_{dir}^{TOP}\\)) represents photons that are transmitted from the sun to the ground surface without encountering any reflection or scattering, </li> <li>the direct-reflected flux (\\(F_{rdir}^{TOP}\\)) represents photons that are not scattered photons reflected by surrounding terrain, </li> <li>diffuse flux (\\(F_{dif}^{TOP}\\)) represents photons that are scattered by atmospheric particles but are not reflected by the ground surface, </li> <li>diffuse-reflected flux (\\(F_{rdif}^{TOP}\\)) represents scattered photons reflected by surrounding terrain, and </li> <li>coupled flux (\\(F_{couple}^{TOP}\\)) represents remaining photons that are reflected multiple times or scattered by ground surface and atmospheric particles.</li> </ol> <p> </p>    Fig 1.: A schematic diagram of the five components of incoming solar radiation over mountains adapted from Lee et al. (2011)[^3]. The components of incoming solar radiation included are (1) direct flux, (2) diffuse flux, (3) direct-reflected flux, (4) diffuse-reflected flux, and (5) coupled flux. Local solar zenith angle (\u03b8), sky view factor (V<sub>d</sub>), and terrain configuration factor (C<sub>T</sub>) are also marked.    <p>\\(F_{dir}^{TOP}\\) is different from \\(F_{dir}^{PP}\\) because of the adjustment of solar illumination geometry and shadowing effects. \\(F_{dif}^{PP}\\) is different from \\(F_{dif}^{TOP}\\) because the sky hemisphere is occluded by adjacent terrain. Lee et al. (2011)<sup>3</sup> used the radiation fluxes over flat surfaces (i.e., \\(F_{dir}^{PP}\\) and \\(F_{dif}^{PP}\\)) to calculate the radiation fluxes over mountainous terrain based on sub-grid topographic factors. The relative deviation (\\(f_{dir}\\)) of direct flux between flat surfaces and mountains under the same atmospheric condition is defined as follows</p> \\[ \\label{eqn_fdir} f_{dir} = \\frac{F_{dir}^{TOP} - F_{dir}^{PP}}{F_{dir}^{PP}} \\] <p>The relative deviation (\\(f_{rdir}\\)) of direct-reflected flux over mountains to direct flux over flat surfaces is defined as follows:</p> \\[ \\label{eqn_frdir} f_{rdir} = \\frac{F_{rdir}^{TOP}}{F_{dir}^{PP}} \\] <p>Similarly, the relative deviations (\\(f_{dif}\\) and \\(f_{rdif}\\)) of diffuse and diffuse-reflected fluxes are expressed as follows:</p> \\[ \\label{eqn_fdif} f_{dif} = \\frac{F_{dif}^{TOP} - F_{dif}^{PP}}{F_{dir}^{PP}} \\] \\[ \\label{eqn_frdif} f_{rdif} = \\frac{F_{rdif}^{TOP}}{F_{dif}^{PP}} \\]"},{"location":"ELM/tech-guide/top_solar_parameterization/#multiple-linear-regression-model-of-lee-et-al-2011","title":"Multiple Linear Regression Model of Lee et al. (2011)","text":"<p>In theory, these four relative deviations (i.e., \\(f_{dir}\\), \\(f_{rdir}\\), \\(f_{dif}\\) and \\(f_{rdif}\\)) depend on solar illumination geometry and sub-grid topographic distribution. Based on a series of 3D Monte Carlo photon tracing simulations, Lee et al. (2011)<sup>3</sup> built a multiple linear regression parameterization to predict these four relative deviations well. The parameterization of Lee et al. (2011)<sup>3</sup> uses four variables that include the standard deviation of elevation (\\(\\sigma_h\\)) within a grid cell, grid-averaged values of cosine of the local solar incident angle (\\(\\mu\\)), sky view factor (\\(\\overline{V_d}\\)), and terrain configuration factor (\\(\\overline{C_T}\\)). Lee et al. (2011)<sup>3</sup> parameterization is given as follows:</p> \\[\\begin{bmatrix} f_{dir} \\\\ f_{dif} \\\\ f_{rdir} \\\\ f_{rdif} \\end{bmatrix} = \\mathbf{A} \\cdot  \\begin{bmatrix} \\overline{\\mu} \\\\ \\sigma_h \\\\ \\overline{V_d} \\\\ \\overline{C_T} \\\\ 1 \\end{bmatrix} \\] <p>where \\(\\mathbf{A}\\) represents the fitted parameter matrix, which was obtained based on the data generated by the 3D Monte Carlo simulations. The sky view factor (\\(V_d\\)) represents the portion of visible sky limited by surrounding terrain<sup>4</sup>, while the terrain configuration factor (\\(C_T\\)), the counterpart of the sky view factor, represents the portion of surrounding terrain which is visible to the ground target<sup>5</sup>. For an unobstructed infinite slope with the slope of \\(\\alpha\\) and aspect of \\(\\beta\\) and a given solar illumination geometry (i.e., solar zenith angle, \\(SZA\\), and solar azimuth angle, \\(SAA\\)), the cosine of the local solar incident angle (\\(\\mu\\)) can be calculated by</p> \\[ \\mu = \\cos(SZA) \\cos(\\alpha) + \\sin(SZA) \\sin(\\alpha) \\cos(SAA-\\beta) \\] <p>The \\(SZA\\) and \\(SAA\\) are assumed to be constant within a grid cell, but \\(\\alpha\\) and \\(\\beta\\) vary within a grid cell. The grid cell average solar incident angle, , can be expressed as follows:</p> \\[ \\begin{eqnarray} \\overline{\\mu} &amp;=&amp; \\overline{\\cos(SZA) \\cos(\\alpha)} + \\overline{\\sin(SZA) \\sin(\\alpha) \\cos(SAA-\\beta)} \\nonumber \\\\ &amp;=&amp; \\cos(SZA)  \\overline{\\cos(\\alpha)} +  \\sin(SZA) \\cos(SAA) + \\overline{\\sin(\\alpha) \\cos(\\beta)} + \\nonumber \\\\ &amp; &amp; \\sin(SZA) \\sin(SAA) + \\overline{\\sin(\\alpha) \\sin(\\beta)} \\end{eqnarray} \\] <p>where overlines represent grid-averaged values. To further improve the regression parameterization, \\(\\mu\\), \\(V_d\\), and \\(C_T\\) are normalized by \\(\\cos(\\alpha)\\). The land surface albedo is adjusted, instead of modifying incoming solar radiation, to maintain the surface energy conservation and the consistency between the surface and the first levels of atmosphere above the surface (Lee et al., 2015). Specifically, to keep the absorbed solar radiation of the ground surface unchanged, Lee et al. (2015) built the relationship between direct (\\(\\alpha_{dir}^{TOP}\\)) and diffuse (\\(\\alpha_{dif}^{TOP}\\)) albedo over mountains and those (\\(\\alpha_{dir}^{PP}\\) and \\(\\alpha_{dif}^PP\\)) over flat surfaces as follows:</p> \\[ \\begin{eqnarray} F_{dir}^{PP} (1 - \\alpha_{dir}^{TOP}) &amp;=&amp; (F_{dir}^{TOP} + F_{rdir}^{TOP})(1 - \\alpha_{dir}^{PP}) \\label{eqn_fdir_pp} \\\\ F_{dif}^{PP} (1 - \\alpha_{dif}^{TOP}) &amp;=&amp; (F_{dif}^{TOP} + F_{rdif}^{TOP})(1 - \\alpha_{dif}^{PP}) \\label{eqn_fdif_pp} \\end{eqnarray} \\] <p>Substituting Eqns \\eqref{eqn_fdir}-\\eqref{eqn_frdif} into Eqs \\eqref{eqn_fdir_pp}-\\eqref{eqn_fdif_pp} leads to</p> \\[ \\begin{eqnarray} \\alpha_{dir}^{TOP} &amp;=&amp; 1 - (1 + f_{dir} + f_{rdir}) (1 - \\alpha_{dir}^{PP}) \\label{eqn_alb_dir_top} \\\\ \\alpha_{dif}^{TOP} &amp;=&amp; 1 - (1 + f_{dif} + f_{rdif}) (1 - \\alpha_{dif}^{PP}) \\label{eqn_alb_dif_top} \\end{eqnarray} \\] <p>The parameterizations represented by Eqs. \\eqref{eqn_linear_reg}, \\eqref{eqn_alb_dir_top}, and \\eqref{eqn_alb_dif_top} are implemented in ELM to account for the sub-grid topographic effects on solar radiation fluxes.</p> <ol> <li> <p>Dalei Hao, Gautam Bisht, Yu Gu, Wei-Liang Lee, Kuo-Nan Liou, and L Ruby Leung. A parameterization of sub-grid topographical effects on solar radiation in the e3sm land model (version 1.0): implementation and evaluation over the tibetan plateau. Geoscientific Model Development, 14(10):6273\u20136289, 2021. doi:https://doi.org/10.5194/gmd-14-6273-2021.\u00a0\u21a9</p> </li> <li> <p>K. Oleson, D. Lawrence, G. Bonan, B. Drewniak, M. Huang, C. Koven, Z. M. Subin, and S. C. Swenson. Technical description of version 4.5 of the community land model (clm), ncar technical note. Technical Report NCAR/TN-503+ STR, National Center for Atmospheric Research (NCAR), Boulder, CO, USA, 2013. doi:https://doi.org/10.5065/D6RR1W7M.\u00a0\u21a9</p> </li> <li> <p>Wei-Liang Lee, KN Liou, and Alex Hall. Parameterization of solar fluxes over mountain surfaces for application to climate models. Journal of Geophysical Research: Atmospheres, 2011. doi:https://doi.org/10.1029/2010JD014722.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Klemen Zak\u0161ek, Kristof O\u0161tir, and \u017diga Kokalj. Sky-view factor as a relief visualization technique. Remote sensing, 3(2):398\u2013415, 2011. doi:https://doi.org/10.3390/rs3020398.\u00a0\u21a9</p> </li> <li> <p>Jeff Dozier and James Frew. Rapid calculation of terrain parameters for radiation modeling from digital elevation data. IEEE Transactions on geoscience and remote sensing, 28(5):963\u2013969, 1990. doi:https://doi.org/10.1109/36.58986.\u00a0\u21a9</p> </li> </ol>"},{"location":"ELM/user-guide/","title":"Users's Guide","text":"<p>start of the ELM User's Guide</p>"},{"location":"MOSART/","title":"Model for Scale Adaptive River Transport (MOSART)","text":"<p>Some introductory text here</p> <ul> <li>The MOSART User's Guide explains how to control MOSART when its running within E3SM</li> <li>The MOSART Developer's Guide explains MOSART data structures and how to develop new code.</li> <li>The MOSART Techincal Guide explains the science behind MOSART's code</li> </ul>"},{"location":"MOSART/dev-guide/","title":"Developers's Guide","text":"<p>Please refer to the ELM's Developer Guide for MOSART development.</p>"},{"location":"MOSART/tech-guide/","title":"Technical Guide","text":"<p>start of the MOSART Technical Guide</p>"},{"location":"MOSART/user-guide/","title":"Users's Guide","text":"<p>start of the MOSART User's Guide</p>"},{"location":"generate_domain_files/","title":"Generating Domain Files","text":"<p>Domain files are needed at runtime by the coupler, data models, and land model. The land model uses the mask to determine where to run and the coupler use the land fraction to merge fluxes from multiple surface types to the atmosphere above them.</p> <p>Domain files are created from a conservative, monotone mapping file from the ocean grid (where the mask is defined) to the atmosphere grid.</p>"},{"location":"generate_domain_files/#environment","title":"Environment","text":"<p>The new domain generation tool requires a few special packages, such as xarray, numba, and itertools. These are all included in the E3SM unified environment: https://e3sm.org/resources/tools/other-tools/e3sm-unified-environment/</p> <p>Alternatively, a simple conda environment can be created with the following command:</p> <pre><code>conda create --name example_env --channel conda-forge xarray numpy numba scikit-learn netcdf4\n</code></pre>"},{"location":"generate_domain_files/#map-file-generation","title":"Map File Generation","text":"<p>The map file used to generate the domain files can be created a few different ways. For a typical E3SM configuration we recommend using a conservative, monotone map. Here is an example command that can be used to generate one (as of NCO version 5.2.2)</p> <pre><code>ncremap -5 -a traave --src_grd=${OCN_GRID} --dst_grd=${ATM_GRID} --map_file=${MAP_FILE}\n</code></pre> <p>Note that existing ocean grid files can be found in the inputdata repository: <code>inputdata/ocn/mpas-o/&lt;ocn_grid_name&gt;/</code></p> <p>The atmosphere grid file should be on the \"pg2\" grid. These grid files are easily generated with three TempestRemap commands as follows:</p> <pre><code>NE=30\nGenerateCSMesh --alt --res ${NE} --file ${GRID_FILE_PATH}/ne${NE}.g\nGenerateVolumetricMesh --in ${GRID_FILE_PATH}/ne${NE}.g --out ${GRID_FILE_PATH}/ne${NE}pg2.g --np 2 --uniform\nConvertMeshToSCRIP --in ${GRID_FILE_PATH}/ne${NE}pg2.g --out ${GRID_FILE_PATH}/ne${NE}pg2_scrip.nc\n</code></pre> <p>For RRM grids the last two commands would be used on the exodus file produced by SQuadGen (See the Adding Support for New Grids tutorial for more information.).</p>"},{"location":"generate_domain_files/#running-the-domain-generation-tool","title":"Running the Domain Generation Tool","text":"<p>Below is a typical example of how to invoke the domain generation tool from the command line:</p> <pre><code>NE=30\nMAP_FILE=${MAP_FILE_ROOT}/map_oEC60to30v3_to_ne${NE}pg2_traave.20240313.nc\npython generate_domain_files_E3SM.py -m ${MAP_FILE} -o oEC60to30v3 -l ne${NE}pg2 --date-stamp=9999 --output-root=${OUTPUT_ROOT}\n</code></pre>"}]}