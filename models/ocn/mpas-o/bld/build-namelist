#!/usr/bin/env perl
#-----------------------------------------------------------------------------------------------
#
# build-namelist
#
# This script builds the namelists for the MPAS-O configuration of CESM1.
#
# build-namelist uses a config_cache.xml file that current contains the ocean grid information.
# build-namelist reads this file to obtain information it needs to provide
# default values that are consistent with the MPAS-O XML file.  For example, the grid resolution
# is obtained from the cache file and used to determine appropriate defaults for namelist input
# that is resolution dependent.
#
# The simplest use of build-namelist is to execute it from the build directory where configure
# was run.  By default it will use the config_cache.xml file that was written by configure to
# determine the build time properties of the executable, and will write the files that contain 
# the output namelists in that same directory.  
#
#
# Date        Contributor      Modification
# -------------------------------------------------------------------------------------------
# 2015-01-28  djacobsen      Original version
#--------------------------------------------------------------------------------------------
use strict;
use Cwd;
use English;
use Getopt::Long;
use IO::File;

#-----------------------------------------------------------------------------------------------

sub usage {
    die <<EOF;
SYNOPSIS
     build-namelist [options]
OPTIONS
     -infile "filepath"    Specify a file containing namelists to read values from.
     -namelist "namelist"  Specify namelist settings directly on the commandline by supplying 
                           a string containing FORTRAN namelist syntax, e.g.,
                              -namelist "&mpas-o_nml dt=1800 /"
     -help [or -h]         Print usage to STDOUT.
     -test                 Enable checking that input datasets exist on local filesystem.
     -verbose              Turn on verbose echoing of informational messages.
     -caseroot             CASEROOT directory variable
     -casebuild            CASEBUILD directory variable          
     -scriptsroot          SCRIPTSROOT directory variable
     -ocn_grid             OCN_GRID variable
     -date_stamp           date_stamp variable
     -cfg_grid             Directory containing MPAS-O configuration scripts.
                           If not defined, location is set as \$ProgDir or \$cwd
                           (Needed to run build-namelist from SourceMods dir)
     -inst_string          inst_string variable


NOTE: The precedence for setting the values of namelist variables is (highest to lowest):
      1. namelist values set by specific command-line options, i.e. (none right now)
      2. values set on the command-line using the -namelist option,
      3. values read from the file specified by -infile,
      4. values from the namelist defaults file - or values specifically set in build-namelist 
EOF
}

#-----------------------------------------------------------------------------------------------
# Set the directory that contains the MPAS-O configuration scripts.  If the command was
# issued using a relative or absolute path, that path is in $ProgDir.  Otherwise assume the
# command was issued from the current working directory.

(my $ProgName = $0) =~ s!(.*)/!!;      # name of this script
my $ProgDir = $1;                      # name of directory containing this script -- may be a
                                       # relative or absolute path, or null if the script is in
                                       # the user's PATH
my $cwd = getcwd();                    # current working directory
my $cfgdir;                            # absolute pathname of directory that contains this script
if ($ProgDir) { 
    $cfgdir = absolute_path($ProgDir);
} else {
    $cfgdir = $cwd;
}

#-----------------------------------------------------------------------------------------------

# Process command-line options.

my %opts = ( help        => 0,
             test        => 0,
             verbose     => 0,
             preview     => 0,
             caseroot    => undef,
             casebuild   => undef,
             scriptsroot => undef,
             inst_string => undef,
             ocn_grid    => undef,
             date_stamp    => undef,
             cfg_dir     => $cfgdir,
           );

GetOptions(
    "h|help"        => \$opts{'help'},
    "infile=s"      => \$opts{'infile'},
    "namelist=s"    => \$opts{'namelist'},
    "v|verbose"     => \$opts{'verbose'},
    "caseroot=s"    => \$opts{'caseroot'},
    "casebuild=s"   => \$opts{'casebuild'},
    "scriptsroot=s" => \$opts{'scriptsroot'},
    "inst_string=s" => \$opts{'inst_string'},	   
    "ocn_grid=s"    => \$opts{'ocn_grid'},
    "date_stamp=s"  => \$opts{'date_stamp'},
    "cfg_dir=s"     => \$opts{'cfg_dir'},
    "preview"       => \$opts{'preview'},
)  or usage();

# Give usage message.
usage() if $opts{'help'};

# Check for unparsed arguments
if (@ARGV) {
    print "ERROR: unrecognized arguments: @ARGV\n";
    usage();
}

# Define print levels:
# 0 - only issue fatal error messages
# 1 - only informs what files are created (currently not used)
# 2 - verbose
my $print = 0;
my $preview = 0;
if ($opts{'verbose'}) { $print = 2; }
if ($opts{'preview'}) { $preview = 1; }
my $eol = "\n";

if ($print>=2) { print "Setting MPAS-O configuration script directory to $cfgdir$eol"; }

my $CASEROOT    = $opts{'caseroot'};
my $CASEBUILD   = $opts{'casebuild'};
my $SCRIPTSROOT = $opts{'scriptsroot'};
my $inst_string = $opts{'inst_string'};
my $OCN_GRID    = $opts{'ocn_grid'};
my $date_stamp  = $opts{'date_stamp'};
$cfgdir         = $opts{'cfg_dir'};

# Validate some of the commandline option values.
validate_options("commandline", \%opts);

# build config_cache.xml file (needed below)
my $config_cache = "${CASEBUILD}/mpas-oconf/config_cache.xml";
my  $fh = new IO::File;
$fh->open(">$config_cache") or die "** can't open file: $config_cache\n";
print $fh  <<"EOF";
<?xml version="1.0"?>
<config_definition>
<entry id="ocn_grid" value="$OCN_GRID">
<entry id="date_stamp" value="$date_stamp">
</config_definition>
EOF
$fh->close;
if ($print>=2) { print "Wrote file $config_cache $eol"; }
(-f "config_cache.xml")  or  die <<"EOF";
** $ProgName - Cannot find configuration cache file: config_cache.xml\" **
EOF

#-----------------------------------------------------------------------------------------------
# Make sure we can find required perl modules, definition, and defaults files.
# Look for them under the directory that contains the configure script.

# The root directory for the perl5 required utilities 
my $perl5lib_dir = "${SCRIPTSROOT}/ccsm_utils/Tools/perl5lib";

# The XML::Lite module is required to parse the XML files.
(-f "$perl5lib_dir/XML/Lite.pm")  or  die <<"EOF";
** $ProgName - Cannot find perl module \"XML/Lite.pm\" in directory \"$perl5lib_dir\" **
EOF

# The Build::Config module provides utilities to access the configuration information
# in the config_cache.xml file (see below)
(-f "$perl5lib_dir/Build/Config.pm")  or  die <<"EOF";
** $ProgName - Cannot find perl module \"Build/Config.pm\" in directory \"$perl5lib_dir\" **
EOF

# The Build::NamelistDefinition module provides utilities to validate that the output
# namelists are consistent with the namelist definition file
(-f "$perl5lib_dir/Build/NamelistDefinition.pm")  or  die <<"EOF";
** $ProgName - Cannot find perl module \"Build/NamelistDefinition.pm\" in directory \"$perl5lib_dir\" **
EOF

# The Build::NamelistDefaults module provides a utility to obtain default values of namelist
# variables based on finding a best fit with the attributes specified in the defaults file.
(-f "$perl5lib_dir/Build/NamelistDefaults.pm")  or  die <<"EOF";
** $ProgName - Cannot find perl module \"Build/NamelistDefaults.pm\" in directory \"$perl5lib_dir\" **
EOF

# The Build::Namelist module provides utilities to parse input namelists, to query and modify
# namelists, and to write output namelists.
(-f "$perl5lib_dir/Build/Namelist.pm")  or  die <<"EOF";
** $ProgName - Cannot find perl module \"Build/Namelist.pm\" in directory \"$perl5lib_dir\" **
EOF

# The namelist definition file contains entries for all namelist variables that
# can be output by build-namelist.  The version of the file that is associate with a
# fixed MPAS-O tag is $cfgdir/namelist_files/namelist_definition.xml.  To aid developers
# who make use of the SourceMods/src.mpas-o directory - we allow the definition file 
# to come from that directory
my $nl_definition_file;
if (-f "${CASEROOT}/SourceMods/src.mpas-o/namelist_definition_mpas-o.xml") {
    $nl_definition_file = "${CASEROOT}/SourceMods/src.mpas-o/namelist_definition_mpas-o.xml";
}
if (! defined $nl_definition_file) {
    # default location of namelist definition file
    $nl_definition_file = "$cfgdir/namelist_files/namelist_definition_mpas-o.xml";
    (-f "$nl_definition_file")  or  die <<"EOF";
    ** $ProgName - ERROR: Cannot find namelist definition file \"$nl_definition_file\" **
EOF
}
if ($print>=2) { print "Using namelist definition file $nl_definition_file$eol"; }

# The namelist defaults file contains default values for all required namelist variables.
my $nl_defaults_file;
if (-f "${CASEROOT}/SourceMods/src.mpas-o/namelist_defaults_mpas-o.xml") {
    $nl_defaults_file = "${CASEROOT}/SourceMods/src.mpas-o/namelist_defaults_mpas-o.xml";
}
if (! defined $nl_defaults_file) {
    $nl_defaults_file = "$cfgdir/namelist_files/namelist_defaults_mpas-o.xml";
    (-f "$nl_defaults_file")  or  die <<"EOF";
    ** $ProgName - Cannot find namelist defaults file \"$nl_defaults_file\" **
EOF
}
if ($print>=2) { print "Using namelist defaults file $nl_defaults_file$eol"; }

#-----------------------------------------------------------------------------------------------
# Add $perl5lib_dir to the list of paths that Perl searches for modules
unshift @INC, "$perl5lib_dir";
require XML::Lite;
require Build::Config;
require Build::NamelistDefinition;
require Build::NamelistDefaults;
require Build::Namelist;

#-----------------------------------------------------------------------------------------------
# Create a configuration object from the MPAS-O config_cache.xml file-  created by 
# mpas-o.cpl7.template in $CASEBUILD/mpas-oconf
my $cfg = Build::Config->new('config_cache.xml');

# Create a namelist definition object.  This object provides a method for verifying that the
# output namelist variables are in the definition file, and are output in the correct
# namelist groups.
my $definition = Build::NamelistDefinition->new($nl_definition_file);

# Create a namelist defaults object.  This object provides default values for variables
# contained in the input defaults file.  The configuration object provides attribute
# values that are relevent for the MPAS-O library for which the namelist is being produced.
my $defaults = Build::NamelistDefaults->new($nl_defaults_file, $cfg);

# Create an empty namelist object.  Add values to it in order of precedence.
my $nl = Build::Namelist->new();

#-----------------------------------------------------------------------------------------------
# Process the user input in order of precedence.  At each point we'll only add new
# values to the namelist and not overwrite previously specified specified values which
# have higher precedence.

# Process the commandline args that provide specific namelist values.

# Process the -namelist arg.
if (defined $opts{'namelist'}) {
    # Parse commandline namelist
    my $nl_arg = Build::Namelist->new($opts{'namelist'});

    # Validate input namelist -- trap exceptions
    my $nl_arg_valid;
    eval { $nl_arg_valid = $definition->validate($nl_arg); };
    if ($@) {
      die "$ProgName - ERROR: Invalid namelist variable in commandline arg '-namelist'.\n $@";
    }

    # Merge input values into namelist.  Previously specified values have higher precedence
    # and are not overwritten.
    $nl->merge_nl($nl_arg_valid);
}

# Process the -infile arg.
if (defined $opts{'infile'}) {
    # Parse namelist input from a file
    my $nl_infile = Build::Namelist->new($opts{'infile'});
    my $nl_infile_valid = Build::Namelist->new();

    # Validate namelist variables (going to do this one variable at a time)
    for my $group ($nl_infile->get_group_names()) {
      for my $var ($nl_infile->get_variable_names($group)) {
        my $var_local; # Name of variable to write to infile
        my $nl_check_var = Build::Namelist->new();
        my $nl_check_valid;
        my $val = $nl_infile->get_variable_value($group, $var);
        my @broken = split(/&/,$var);
        my $check_grp = 0; # If 1, make sure group found in definitions file
                           # matches that specified in user_nl_mpaso

        # if variable has ampersand, truncate it unless it is type derived
        if ($broken[1]) {
          my $nl_check_amp = Build::Namelist->new();
          $nl_check_amp->set_variable_value($group, $var, $val);
          eval { $definition->validate($nl_check_amp) };
          if (not $@) {
            # & is required in variable name
            $var_local = $var;
          } else {
            # & should not be in variable name
            $var_local = $broken[0];
            $check_grp = 1;
          }
        } else {
          $var_local = $var;
        }

        # Make sure variable is defined in namelist_definition_mpas-o.xml
        $nl_check_var->set_variable_value($group, $var_local,$val);
        eval { $nl_check_valid = $definition->validate($nl_check_var); };
        (not $@) or die <<"EOF";
** ERROR: either $var_local is not a valid MPAS-O namelist variable or $var_local = $val is not a valid value; please fix user_nl_mpaso. Note that $var_local may appear in multiple namelists, in which case you need to specify the correct namelist in user_nl_mpaso using the format $var_local\&namelist_nml = $val, where \&namelist_nml is the mpaso_in namelist containing $var_local.**
EOF

        # If group was specified in user_nl_mpaso, make sure it matches
        # the group in the definitions file.
        my @group_valid = $nl_check_valid->get_group_names();
        ((not $check_grp) or ($broken[1] eq $group_valid[0])) or die <<"EOF";
** ERROR: $broken[0] is in $group_valid[0], not $broken[1]! Please fix this in user_nl_mpaso. **
EOF

        # Add variable to validated namelist
        $nl_infile_valid->set_variable_value($group_valid[0], $var_local, $val);
      }
    }

    # If preview is desired and something has been changed in $nl_infile_valid,
    # output everything in $nl_infile_valid
    if (($preview == 1) && ($nl_infile_valid->get_group_names)) {
      print " - The following values have been set in user_nl_mpaso:\n";
      print_nl_to_screen($nl_infile_valid);
    }
    # Merge input values into namelist.  Previously specified values have higher
    # precedence and are not overwritten.
    $nl->merge_nl($nl_infile_valid);
}

#-----------------------------------------------------------------------------------------------
# Determine xml variables
unshift @INC, "$CASEROOT/Tools";
require XML::Lite;
require SetupTools;

my %xmlvars = ();
SetupTools::getxmlvars($CASEROOT, \%xmlvars);
foreach my $attr (keys %xmlvars) {
  $xmlvars{$attr} = SetupTools::expand_env_var($xmlvars{$attr}, \%xmlvars);
}

my $RUNDIR                 = "$xmlvars{'RUNDIR'}";
my $CODEROOT               = "$xmlvars{'CODEROOT'}";
my $DIN_LOC_ROOT           = "$xmlvars{'DIN_LOC_ROOT'}";
my $CASE                   = "$xmlvars{'CASE'}";
my $CALENDAR               = "$xmlvars{'CALENDAR'}";
my $NCPL_BASE_PERIOD       = "$xmlvars{'NCPL_BASE_PERIOD'}";
my $OCN_NCPL               = "$xmlvars{'OCN_NCPL'}";
my $OCN_COUPLING           = "$xmlvars{'OCN_COUPLING'}";
my $OCN_ICE_FORCING        = "$xmlvars{'OCN_ICE_FORCING'}";
my $NTASKS_OCN             = "$xmlvars{'NTASKS_OCN'}";
my $NINST_OCN              = "$xmlvars{'NINST_OCN'}";
my $INFO_DBUG              = "$xmlvars{'INFO_DBUG'}";
my $RUN_TYPE               = "$xmlvars{'RUN_TYPE'}";
my $RUN_STARTDATE          = "$xmlvars{'RUN_STARTDATE'}";
my $START_TOD              = "$xmlvars{'START_TOD'}";
my $RUN_REFDATE            = "$xmlvars{'RUN_REFDATE'}";
my $CONTINUE_RUN           = "$xmlvars{'CONTINUE_RUN'}";

my $output_r = "./${CASE}.mpas-o.r";
my $output_h = "./${CASE}.mpas-o.h";
my $output_d = "./${CASE}.mpas-o.d";
if ($inst_string) {
    $output_r = "./${CASE}.mpas-o${inst_string}.r";
    $output_h = "./${CASE}.mpas-o${inst_string}.h";
    $output_d = "./${CASE}.mpas-o${inst_string}.d";
} 

# Environment variables set in mpas-o.buildnml.csh that are not xml variables
my $RESTART_INPUT_TS_FMT = "$ENV{'RESTART_INPUT_TS_FMT'}"; 
my $LID = $ENV{'LID'};

my $ntasks = $NTASKS_OCN / $NINST_OCN; 

if ($CONTINUE_RUN eq 'TRUE') {$RUN_TYPE = "continue";}

print "MPAS-O build-namelist: ocn_grid is $OCN_GRID \n";

(-d $DIN_LOC_ROOT)  or mkdir $DIN_LOC_ROOT;
if ($print>=2) { print "CESM inputdata root directory: $DIN_LOC_ROOT$eol"; }

#-----------------------------------------------------------------------------------------------
# Determine namelist 
#-----------------------------------------------------------------------------------------------


####################################
# namelist group: run_modes  #
####################################

add_default($nl, 'config_ocean_run_mode');

####################################
# namelist group: time_management  #
####################################

# if ($RUN_TYPE eq 'startup' && $topography_opt eq 'bathymetry') {
if ($CONTINUE_RUN eq 'TRUE') {
	add_default($nl, 'config_do_restart', 'val'=>".true.");
} else {
	add_default($nl, 'config_do_restart', 'val'=>".false.");
}
add_default($nl, 'config_restart_timestamp_name');
add_default($nl, 'config_calendar_type', 'calendar'=>"$CALENDAR");
if ($CONTINUE_RUN eq 'TRUE') {
	add_default($nl, 'config_start_time', 'val'=>"'file'");
} else {
	add_default($nl, 'config_start_time', 'val'=>"'${RUN_STARTDATE}_${START_TOD}'");
}
#######################
# namelist group: io  #
#######################

add_default($nl, 'config_stats_interval');
add_default($nl, 'config_write_stats_on_startup');
add_default($nl, 'config_write_output_on_startup');
add_default($nl, 'config_pio_num_iotasks');
add_default($nl, 'config_pio_stride');

####################################
# namelist group: time_integration #
####################################

add_default($nl, 'config_dt');
add_default($nl, 'config_time_integrator');


#####################################
# namelist group: ALE_vertical_grid #
#####################################
add_default($nl, 'config_vert_coord_movement');
add_default($nl, 'config_use_min_max_thickness');
add_default($nl, 'config_min_thickness');
add_default($nl, 'config_max_thickness_factor');
if ($CONTINUE_RUN eq 'TRUE') {
	add_default($nl, 'config_set_restingThickness_to_IC', 'val'=>'.false.');
} else {
	add_default($nl, 'config_set_restingThickness_to_IC', 'val'=>'.true.');
}
add_default($nl, 'config_dzdk_positive');

####################################################
# namelist group: ALE_frequency_filtered_thickness #
####################################################

add_default($nl, 'config_use_freq_filtered_thickness');
add_default($nl, 'config_thickness_filter_timescale');
add_default($nl, 'config_use_highFreqThick_restore');
add_default($nl, 'config_highFreqThick_restore_time');
add_default($nl, 'config_use_highFreqThick_del2');
add_default($nl, 'config_highFreqThick_del2');

########################################
# namelist group: partial_bottom_cells #
########################################

# if ($RUN_TYPE eq 'startup' && $topography_opt eq 'bathymetry') {
if ($CONTINUE_RUN eq 'TRUE' ) {
	add_default($nl, 'config_alter_ICs_for_pbcs', 'val'=>".false.");
} else {
	add_default($nl, 'config_alter_ICs_for_pbcs', 'val'=>".true.");
}
add_default($nl, 'config_pbc_alteration_type');
add_default($nl, 'config_min_pbc_fraction');
add_default($nl, 'config_check_ssh_consistency');

#################################
# namelist group: decomposition #
#################################

add_default($nl, 'config_num_halos');
add_default($nl, 'config_block_decomp_file_prefix', 'val'=>"'${DIN_LOC_ROOT}/ocn/mpas-o/${OCN_GRID}/mpas-o.graph.info.${date_stamp}.part.'");
add_default($nl, 'config_number_of_blocks');
add_default($nl, 'config_explicit_proc_decomp');
add_default($nl, 'config_proc_decomp_file_prefix');

########################
# namelist group: hmix #
########################

add_default($nl, 'config_hmix_scaleWithMesh');
add_default($nl, 'config_maxMeshDensity');
add_default($nl, 'config_apvm_scale_factor');

#############################
# namelist group: hmix_del2 #
#############################

add_default($nl, 'config_use_mom_del2');
add_default($nl, 'config_use_tracer_del2');
add_default($nl, 'config_mom_del2');
add_default($nl, 'config_tracer_del2');

#############################
# namelist group: hmix_del4 #
#############################

add_default($nl, 'config_use_mom_del4');
add_default($nl, 'config_use_tracer_del4');
add_default($nl, 'config_mom_del4');
add_default($nl, 'config_tracer_del4');

###############################
# namelist group: hmix_Leith  #
###############################

add_default($nl, 'config_use_Leith_del2');
add_default($nl, 'config_Leith_parameter');
add_default($nl, 'config_Leith_dx');
add_default($nl, 'config_Leith_dx');
add_default($nl, 'config_Leith_visc2_max');

####################################################
# namelist group: mesoscale_eddy_parameterization  #
####################################################

add_default($nl, 'config_use_standardGM');
add_default($nl, 'config_standardGM_tracer_kappa');
add_default($nl, 'config_Redi_kappa');
add_default($nl, 'config_gravWaveSpeed_trunc');
add_default($nl, 'config_max_relative_slope');

####################################
# namelist group: hmix_del2_tensor #
####################################
    
add_default($nl, 'config_use_mom_del2_tensor');
add_default($nl, 'config_mom_del2_tensor');

####################################
# namelist group: hmix_del4_tensor #
####################################
    
add_default($nl, 'config_use_mom_del4_tensor');
add_default($nl, 'config_mom_del4_tensor');

#####################################
# namelist group: Rayleigh_damping  #
#####################################
    
add_default($nl, 'config_Rayleigh_friction');
add_default($nl, 'config_Rayleigh_damping_coeff');

########################
# namelist group: vmix #
########################

add_default($nl, 'config_convective_visc');
add_default($nl, 'config_convective_diff');

###############################
# namelist group: vmix_const  #
###############################

add_default($nl, 'config_use_const_visc');
add_default($nl, 'config_use_const_diff');
add_default($nl, 'config_vert_visc');
add_default($nl, 'config_vert_diff');

##############################
# namelist group: vmix_rich  #
##############################

add_default($nl, 'config_use_rich_visc');
add_default($nl, 'config_use_rich_diff');
add_default($nl, 'config_bkrd_vert_visc');
add_default($nl, 'config_bkrd_vert_diff');
add_default($nl, 'config_rich_mix');

##############################
# namelist group: vmix_tanh  #
##############################

add_default($nl, 'config_use_tanh_visc');
add_default($nl, 'config_use_tanh_diff');
add_default($nl, 'config_max_visc_tanh');
add_default($nl, 'config_min_visc_tanh');
add_default($nl, 'config_max_diff_tanh');
add_default($nl, 'config_min_diff_tanh');
add_default($nl, 'config_zMid_tanh');
add_default($nl, 'config_zWidth_tanh');

##########################
# namelist group: cvmix  #
##########################

add_default($nl, 'config_use_cvmix');
add_default($nl, 'config_cvmix_prandtl_number');
add_default($nl, 'config_use_cvmix_background');
add_default($nl, 'config_cvmix_background_diffusion');
add_default($nl, 'config_cvmix_background_viscosity');
add_default($nl, 'config_use_cvmix_convection');
add_default($nl, 'config_cvmix_convective_diffusion');
add_default($nl, 'config_cvmix_convective_viscosity');
add_default($nl, 'config_cvmix_convective_basedOnBVF');
add_default($nl, 'config_cvmix_convective_triggerBVF');
add_default($nl, 'config_use_cvmix_shear');
add_default($nl, 'config_cvmix_shear_mixing_scheme');
add_default($nl, 'config_cvmix_shear_PP_nu_zero');
add_default($nl, 'config_cvmix_shear_PP_alpha');
add_default($nl, 'config_cvmix_shear_PP_exp');
add_default($nl, 'config_cvmix_shear_KPP_nu_zero');
add_default($nl, 'config_cvmix_shear_KPP_Ri_zero');
add_default($nl, 'config_cvmix_shear_KPP_exp');
add_default($nl, 'config_use_cvmix_tidal_mixing');
add_default($nl, 'config_use_cvmix_double_diffusion');
add_default($nl, 'config_use_cvmix_kpp');
add_default($nl, 'config_use_cvmix_fixed_boundary_layer');
add_default($nl, 'config_cvmix_kpp_boundary_layer_depth');
add_default($nl, 'config_cvmix_kpp_criticalBulkRichardsonNumber');
add_default($nl, 'config_cvmix_kpp_matching');
add_default($nl, 'config_cvmix_kpp_EkmanOBL');
add_default($nl, 'config_cvmix_kpp_MonObOBL');
add_default($nl, 'config_cvmix_kpp_interpolationOMLType');
add_default($nl, 'config_cvmix_kpp_surface_layer_extent');
add_default($nl, 'config_cvmix_kpp_surface_layer_averaging');
add_default($nl, 'config_cvmix_kpp_stop_OBL_search');

###########################
# namelist group: forcing #
###########################

add_default($nl, 'config_forcing_type');
add_default($nl, 'config_restoreT_timescale');
add_default($nl, 'config_restoreS_timescale');
add_default($nl, 'config_restoreT_lengthscale');
add_default($nl, 'config_restoreS_lengthscale');
add_default($nl, 'config_flux_attenuation_coefficient');
add_default($nl, 'config_frazil_ice_formation');
add_default($nl, 'config_sw_absorption_type');
add_default($nl, 'config_jerlov_water_type');
add_default($nl, 'config_fixed_jerlov_weights');

#############################
# namelist group: advection #
#############################

add_default($nl, 'config_vert_tracer_adv');
add_default($nl, 'config_vert_tracer_adv_order');
add_default($nl, 'config_horiz_tracer_adv_order');
add_default($nl, 'config_coef_3rd_order');
add_default($nl, 'config_monotonic');

###############################
# namelist group: bottom_drag #
###############################

add_default($nl, 'config_bottom_drag_coeff');

#####################################
# namelist group: pressure_gradient #
#####################################

add_default($nl, 'config_pressure_gradient_type'); 
add_default($nl, 'config_density0'); 
add_default($nl, 'config_common_level_weight'); 

#######################
# namelist group: eos #
#######################

add_default($nl, 'config_eos_type'); 

##############################
# namelist group: eos_linear #
##############################

add_default($nl, 'config_eos_linear_alpha'); 
add_default($nl, 'config_eos_linear_beta'); 
add_default($nl, 'config_eos_linear_Tref'); 
add_default($nl, 'config_eos_linear_Sref'); 
add_default($nl, 'config_eos_linear_densityref'); 

#####################################
# namelist group: split_explicit_ts #
#####################################

add_default($nl, 'config_n_ts_iter'); 
add_default($nl, 'config_n_bcl_iter_beg'); 
add_default($nl, 'config_n_bcl_iter_mid'); 
add_default($nl, 'config_n_bcl_iter_end'); 
add_default($nl, 'config_n_btr_subcycles'); 
add_default($nl, 'config_n_btr_cor_iter'); 
add_default($nl, 'config_vel_correction'); 
add_default($nl, 'config_btr_subcycle_loop_factor'); 
add_default($nl, 'config_btr_gam1_velWt1'); 
add_default($nl, 'config_btr_gam2_SSHWt1'); 
add_default($nl, 'config_btr_gam3_velWt2'); 
add_default($nl, 'config_btr_solve_SSH2'); 

############################
# namelist group: testing  #
############################

add_default($nl, 'config_conduct_tests');
add_default($nl, 'config_test_tensors');
add_default($nl, 'config_tensor_test_function');

##########################
# namelist group: debug  #
##########################

add_default($nl, 'config_disable_redi_k33');
add_default($nl, 'config_disable_redi_horizontal_term1');
add_default($nl, 'config_disable_redi_horizontal_term2');
add_default($nl, 'config_disable_redi_horizontal_term3');
add_default($nl, 'config_check_zlevel_consistency');
add_default($nl, 'config_filter_btr_mode');
add_default($nl, 'config_prescribe_velocity');
add_default($nl, 'config_prescribe_thickness');
add_default($nl, 'config_include_KE_vertex');
add_default($nl, 'config_check_tracer_monotonicity');
add_default($nl, 'config_disable_thick_all_tend');
add_default($nl, 'config_disable_thick_hadv');
add_default($nl, 'config_disable_thick_vadv');
add_default($nl, 'config_disable_thick_sflux');
add_default($nl, 'config_disable_vel_all_tend');
add_default($nl, 'config_disable_vel_coriolis');
add_default($nl, 'config_disable_vel_pgrad');
add_default($nl, 'config_disable_vel_hmix');
add_default($nl, 'config_disable_vel_windstress');
add_default($nl, 'config_disable_vel_vmix');
add_default($nl, 'config_disable_vel_vadv');
add_default($nl, 'config_disable_tr_all_tend');
add_default($nl, 'config_disable_tr_adv');
add_default($nl, 'config_disable_tr_hmix');
add_default($nl, 'config_disable_tr_vmix');
add_default($nl, 'config_disable_tr_sflux');
add_default($nl, 'config_disable_tr_nonlocalflux');

#################################
# namelist group: global_stats  #
#################################

add_default($nl, 'config_use_global_stats');
add_default($nl, 'config_global_stats_compute_interval');
add_default($nl, 'config_global_stats_compute_startup');


#########################################
# namelist group: sfc_area_weighted_avg #
#########################################

add_default($nl, 'config_use_AM_sfc_area_weighted_avg');
add_default($nl, 'config_AM_sfc_area_weighted_avg_compute_interval');
add_default($nl, 'config_AM_sfc_area_weighted_avg_compute_startup');


########################################
# namelist group: AM_water_mass_census #
########################################

add_default($nl, 'config_use_AM_water_mass_census');
add_default($nl, 'config_AM_water_mass_census_compute_interval');
add_default($nl, 'config_AM_water_mass_census_compute_startup');
add_default($nl, 'config_AM_water_mass_census_minTemperature');
add_default($nl, 'config_AM_water_mass_census_maxTemperature');
add_default($nl, 'config_AM_water_mass_census_minSalinity');
add_default($nl, 'config_AM_water_mass_census_maxSalinity');


################################################
# namelist group: AM_layer_volume_weighted_avg #
################################################

add_default($nl, 'config_use_AM_layer_volume_weighted_avg');
add_default($nl, 'config_AM_layer_volume_weighted_avg_compute_interval');
add_default($nl, 'config_AM_layer_volume_weighted_avg_compute_startup');

##############################
# namelist group: zonal_mean #
##############################

add_default($nl, 'config_use_zonal_mean');
add_default($nl, 'config_zonal_mean_compute_interval');
add_default($nl, 'config_zonal_mean_compute_startup');
add_default($nl, 'config_number_zonal_mean_bins');
add_default($nl, 'config_min_zonal_mean_bin');
add_default($nl, 'config_max_zonal_mean_bin');


###############################
# namelist group: okubo_weiss #
###############################

add_default($nl, 'config_use_okubo_weiss');
add_default($nl, 'config_okubo_weiss_compute_startup');
add_default($nl, 'config_okubo_weiss_directory');
add_default($nl, 'config_okubo_weiss_threshold_value');
add_default($nl, 'config_okubo_weiss_normalization');
add_default($nl, 'config_okubo_weiss_lambda2_normalization');
add_default($nl, 'config_okubo_weiss_use_lat_lon_coords');
add_default($nl, 'config_okubo_weiss_compute_eddy_census');
add_default($nl, 'config_okubo_weiss_eddy_min_cells');


################################################
# namelist group: AM_meridional_heat_transport #
################################################

add_default($nl, 'config_use_meridional_heat_transport');
add_default($nl, 'config_meridional_heat_transport_compute_interval');
add_default($nl, 'config_meridional_heat_transport_compute_startup');
add_default($nl, 'config_number_meridional_heat_transport_bins');
add_default($nl, 'config_min_meridional_heat_transport_bin');
add_default($nl, 'config_max_meridional_heat_transport_bin');


# DWJ -- Maybe convert this to the streams file?
##########################################
# tavg contents file                     #
##########################################

# Create tavg contents file

# DWJ: Turn off tavg for now.
#  my $mpas-o_tavg_file  = "${CASEBUILD}/mpas-oconf/${OCN_GRID}_tavg_contents";
#  my $sysmod;
#  my $file;
#   #-------------------------
#   # 1. base tavg contents
#   #-------------------------
#   
#   # 1.a. create $CASEBUILD/mpas-oconf/base.tavg.nml file 
#   $sysmod;
#   $file = "ocn.base.tavg.csh";
#   if (-f "${my_path}/$file"){
#       $sysmod = "${my_path}/${file}";
#   } else {
#       $sysmod = "${CODEROOT}/ocn/mpas-o/input_templates/${file}";
#   }
#   system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#   
#   # 1.b. read in mpas-oconf/base.tavg.nml file and fill in %tavg_nml entries
#   my $fh_in = new IO::File;
#   $fh_in->open("<$CASEBUILD/mpas-oconf/base.tavg.nml") or die "** can't open filepath file: $\n";
#   my $line;
#   my $numcols;
#   while ($line = <$fh_in> )  {
#       chomp($line);
#       $line =~ /(.+)=(.+)/;
#       my $key = $1;
#       my $val = $2;
#       $key =~ s/^\s+//;
#       $key =~ s/\s+$//;
#       $val =~ s/^\s+//;
#       $val =~ s/\s+$//;
#       my @val = split (' ',$val);
#       push @{ $tavg_nml{$key} }, @val;
#       my @cols = @{$tavg_nml{$key}};
#       $numcols = $#cols + 1;
#   }
#   $fh_in->close();
#   
#   # 1.d create base tavg contents file - in mpas-oconf/
#   #     either from $my_path (first) or from 
#   my $base_tavg_file  = "${CASEBUILD}/mpas-oconf/${OCN_GRID}_tavg_contents";
#   if ($OCN_TAVG_HIFREQ eq "TRUE") {
#       # High-frequency tavg contents
#       $file = "${OCN_GRID}_tavg_contents_high_freq";
#   } else {
#       # Default resolution dependent tavg contents
#       $file = "${OCN_GRID}_tavg_contents";
#   }
#   if (-f "$my_path/$file") {
#     $sysmod = "cp -fp ${my_path}/$file $base_tavg_file";
#     system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#   } else {
#     if (-f "${CODEROOT}/ocn/mpas-o/input_templates/$file") {
#       $sysmod = "cp -fp ${CODEROOT}/ocn/mpas-o/input_templates/$file $base_tavg_file";
#       system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#     }
#   }
#   
#   # 1.e add niw-specific fields to tavg_contents file
#   my $lniw_mixing = $nl->get_value('lniw_mixing');
#   if ($lniw_mixing =~ /true/) {
#     $file = "niw_tavg_contents";
#     my $niw_tavg_file = "${CASEBUILD}/mpas-oconf/$file";
#     if (-f "$my_path/${OCN_GRID}_$file") {
#       $sysmod = "cp -fp ${my_path}/${OCN_GRID}_$file $niw_tavg_file";
#       system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#     } else {
#       if (-f "${CODEROOT}/ocn/mpas-o/input_templates/${OCN_GRID}_$file") {
#         $sysmod = "cp -fp ${CODEROOT}/ocn/mpas-o/input_templates/${OCN_GRID}_$file $niw_tavg_file";
#         system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#       }
#     }
#     if (-f "$niw_tavg_file") {
#     $sysmod = "cat $niw_tavg_file >> $mpas-o_tavg_file";
#     system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#     }
#   }
#   
#   #-------------------------
#   # 2. budget tavg contents
#   #-------------------------
#   my $budget_tavg_file = "${CASEBUILD}/mpas-oconf/budget_tavg_contents";
#   $file = "tavg_contents_tracer_budget_terms";
#   if ($OCN_TAVG_TRACER_BUDGET eq "TRUE") {
#     # tracer budget tavg contents 
#     if (-f "${my_path}/$file") {
#       $sysmod = "cp -fp ${my_path}/$file $budget_tavg_file";
#       system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#     } else {
#       $sysmod = "cp -fp ${CODEROOT}/ocn/mpas-o/input_templates/$file $budget_tavg_file";
#       system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#     }
#     $sysmod = "cat $budget_tavg_file >> $mpas-o_tavg_file";
#     system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#   }
#   
#   #-------------------------
#   # 3. tracer tavg contents 
#   #-------------------------
#   for my $module (@OCN_TRACER_MODULES) {
#     my $file = "ocn.${module}.tavg.csh";
#     my $my_stream = $numcols+1;
#     if (-f "${my_path}/$file"){
#       $sysmod = "${my_path}/${file} $my_stream";
#       system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#     } else {
#       $sysmod = "${CODEROOT}/ocn/mpas-o/input_templates/${file} $my_stream";
#       system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#     }
#   
#     # Create new tracer stream namelists - if appropriate
#     if (-f "${CASEBUILD}/mpas-oconf/${module}.tavg.nml") {
#       my $fh_in = new IO::File;
#       $fh_in->open("<${CASEBUILD}/mpas-oconf/$module.tavg.nml") or die "** can't open filepath file: $\n";
#       my $line;
#       while ($line = <$fh_in> )  {
#         chomp($line);
#         $line =~ /(.+)=(.+)/;
#         my $key = $1;
#         my $val = $2;
#         $key =~ s/^\s+//;
#         $key =~ s/\s+$//;
#         $val =~ s/^\s+//;
#         $val =~ s/\s+$//;
#         my @val = split (' ',$val);
#         push @{ $tavg_nml{$key} }, @val;
#         my @cols = @{$tavg_nml{$key}};
#         $numcols = $#cols + 1;
#       }
#       $fh_in->close();
#     }
#     $sysmod = "cat ${CASEBUILD}/mpas-oconf/${module}_tavg_contents >> $mpas-o_tavg_file";
#     system($sysmod) == 0 or die "ERROR: $sysmod failed: $?\n";
#   }

#-----------------------------------------------------------------------------------------------
# *** Write output namelist file (mpaso_in) and input dataset list (mpas-o.input_data_list) ***
#-----------------------------------------------------------------------------------------------
# Set namelist groups to be written out

my @groups = qw(time_management
                io
                time_integration
                ale_vertical_grid
                ale_frequency_filtered_thickness
                partial_bottom_cells
                decomposition
                hmix
                hmix_del2
                hmix_del4
                hmix_leith
                mesoscale_eddy_parameterization
                hmix_del2_tensor
                hmix_del4_tensor
                rayleigh_damping
                vmix
                vmix_const
                vmix_rich
                vmix_tanh
                cvmix
                forcing
                advection
                bottom_drag
                pressure_gradient
                eos
                eos_linear
                split_explicit_ts
                testing
                debug
                global_stats
                zonal_mean);

# Check for variables in the "derived" group, add them to appropriate group
for my $var ($nl->get_variable_names('derived')) {
  my @broken = split(/&/,$var);
  my $val = $nl->get_variable_value('derived', $var);
  $nl->set_variable_value($broken[1], $broken[0], $val);
}

# Write out all groups  to mpaso_in
my $outfile = "./mpaso_in";
$nl->write($outfile, 'groups'=>\@groups);
if ($print>=2) { print "Writing mpas-o ocean component namelist to $outfile $eol"; }

# Write input dataset list.
check_input_files($DIN_LOC_ROOT, "../mpas-o.input_data_list");

#-----------------------------------------------------------------------------------------------
# END OF MAIN SCRIPT
#===============================================================================================

#===============================================================================================
sub add_default {

# Add a value for the specified variable to the specified namelist object.  The variables
# already in the object have the higher precedence, so if the specified variable is already
# defined in the object then don't overwrite it, just return.
#
# This method checks the definition file and adds the variable to the correct
# namelist group.
#
# The value can be provided by using the optional argument key 'val' in the
# calling list.  Otherwise a default value is obtained from the namelist
# defaults object.  If no default value is found this method throws an exception
# unless the 'nofail' option is set true.
#
# Additional optional keyword=>value pairs may be specified.  If the keyword 'val' is
# not present, then any other keyword=>value pairs that are specified will be used to
# match attributes in the defaults file.
#
# Example 1: Specify the default value $val for the namelist variable $var in namelist
#            object $nl:
#
#  add_default($nl, $var, 'val'=>$val)
#
# Example 2: Add a default for variable $var if an appropriate value is found.  Otherwise
#            don't add the variable
#
#  add_default($nl, $var, 'nofail'=>1)
#
#
# ***** N.B. ***** This routine assumes the following variables are in package main::
#  $definition        -- the namelist definition object
#  $DIN_LOC_ROOT -- CCSM inputdata root directory

    my $nl = shift;     # namelist object
    my $var = shift;    # name of namelist variable
    my %opts = @_;      # options

    my $val = undef;

    # Query the definition to find which group the variable belongs to.  Exit if not found.
    my $group = $definition->get_group_name($var);
    unless ($group) {
      my $fname = $definition->get_file_name();
      die "$ProgName - ERROR: variable \"$var\" not found in namelist definition file $fname.\n";
    }

    # check whether the variable has a value in the namelist object -- if so then return
    $val = $nl->get_variable_value($group, $var);
    if (defined $val) { return; }

    # Look for a specified value in the options hash
    if (defined $opts{'val'}) {
      $val = $opts{'val'};
    }
    # or else get a value from namelist defaults object.
    # Note that if the 'val' key isn't in the hash, then just pass anything else
    # in %opts to the get_value method to be used as attributes that are matched
    # when looking for default values.
    else {
      $val = get_default_value($var, \%opts);
    }

    # if no value is found then exit w/ error (unless 'nofail' option set)
    unless (defined $val) {
      unless ($opts{'nofail'}) {
        print "$ProgName - ERROR: No default value found for $var\n".
              "user defined attributes:\n";
        foreach my $key (keys(%opts)) {
          if ($key ne 'nofail' and $key ne 'val') {
            print "key=$key  val=$opts{$key}\n";
          }
        }
        die;
      } else {
        return;
      }
    }

    # query the definition to find out if the variable is an input pathname
    my $is_input_pathname = $definition->is_input_pathname($var);

    # The default values for input pathnames are relative.  If the namelist
    # variable is defined to be an absolute pathname, then prepend
    # the CCSM inputdata root directory.
    # TODO: unless ignore_abs is passed as argument 
    if ($is_input_pathname eq 'abs') {
      unless ($opts{'noprepend'}){
        $val = set_abs_filepath($val, $DIN_LOC_ROOT);
      }
    }

    # query the definition to find out if the variable takes a string value.
    # The returned string length will be >0 if $var is a string, and 0 if not.
    my $str_len = $definition->get_str_len($var);

    # If the variable is a string, then add quotes if they're missing
    if ($str_len > 0) {
      $val = quote_string($val);
    }

    # set the value in the namelist
    $nl->set_variable_value($group, $var, $val);
}

#-----------------------------------------------------------------------------------------------

sub get_default_value {

# Return a default value for the requested variable.
# Return undef if no default found.
#
# ***** N.B. ***** This routine assumes the following variables are in package main::
#  $defaults          -- the namelist defaults object
#  $uc_defaults       -- the use CASE defaults object

    my $var_name    = lc(shift);   # name of namelist variable (CASE insensitive interface)
    my $usr_att_ref = shift;       # reference to hash containing user supplied attributes

    # Check in the namelist defaults
    return $defaults->get_value($var_name, $usr_att_ref);

}

#-----------------------------------------------------------------------------------------------

sub check_input_files {

# For each variable in the namelist which is an input dataset, check to see if it
# exists locally.
#
# ***** N.B. ***** This routine assumes the following variables are in package main::
#  $definition        -- the namelist definition object

    my $inputdata_rootdir = shift;    # if false prints test, else creates inputdata file
    my $data_file_list = shift;
    open(my $fh, "<:encoding(UTF-8)", $data_file_list) or die "Couldn't open data file list $data_file_list";

	while (my $row = <$fh>) {
		chomp $row;
		my @split = split(' = ', $row);
		#my $input_path = $split[2]

		if (-e $split[1] ) {
			print "OK -- found $split[1]\n"
		} else {
			print "NOT FOUND: $split[1]\n"
		}
	}
    close $fh;
    return 0 if defined $inputdata_rootdir;
}

#-----------------------------------------------------------------------------------------------

sub set_abs_filepath {

# check whether the input filepath is an absolute path, and if it isn't then
# prepend a root directory

    my ($filepath, $rootdir) = @_;

    # strip any leading/trailing whitespace
    $filepath =~ s/^\s+//;
    $filepath =~ s/\s+$//;
    $rootdir  =~ s/^\s+//;
    $rootdir  =~ s/\s+$//;

    # strip any leading/trailing quotes
    $filepath =~ s/^['"]+//;
    $filepath =~ s/["']+$//;
    $rootdir =~ s/^['"]+//;
    $rootdir =~ s/["']+$//;

    my $out = $filepath;
    unless ( $filepath =~ /^\// ) {  # unless $filepath starts with a /
      $out = "$rootdir/$filepath"; # prepend the root directory
    }
    return $out;
}

#-----------------------------------------------------------------------------------------------


sub absolute_path {
#
# Convert a pathname into an absolute pathname, expanding any . or .. characters.
# Assumes pathnames refer to a local filesystem.
# Assumes the directory separator is "/".
#
  my $path = shift;
  my $cwd = getcwd();  # current working directory
  my $abspath;         # resulting absolute pathname

# Strip off any leading or trailing whitespace.  (This pattern won't match if
# there's embedded whitespace.
  $path =~ s!^\s*(\S*)\s*$!$1!;

# Convert relative to absolute path.

  if ($path =~ m!^\.$!) {          # path is "."
      return $cwd;
  } elsif ($path =~ m!^\./!) {     # path starts with "./"
      $path =~ s!^\.!$cwd!;
  } elsif ($path =~ m!^\.\.$!) {   # path is ".."
      $path = "$cwd/..";
  } elsif ($path =~ m!^\.\./!) {   # path starts with "../"
      $path = "$cwd/$path";
  } elsif ($path =~ m!^[^/]!) {    # path starts with non-slash character
      $path = "$cwd/$path";
  }

  my ($dir, @dirs2);
  my @dirs = split "/", $path, -1;   # The -1 prevents split from stripping trailing nulls
                                     # This enables correct processing of the input "/".

  # Remove any "" that are not leading.
  for (my $i=0; $i<=$#dirs; ++$i) {
      if ($i == 0 or $dirs[$i] ne "") {
        push @dirs2, $dirs[$i];
      }
  }
  @dirs = ();

  # Remove any "."
  foreach $dir (@dirs2) {
      unless ($dir eq ".") {
        push @dirs, $dir;
      }
  }
  @dirs2 = ();

  # Remove the "subdir/.." parts.
  foreach $dir (@dirs) {
    if ( $dir !~ /\.\./ ) {
        push @dirs2, $dir;
    } else {
        pop @dirs2;   # remove previous dir when current dir is ..
    }
  }
  if ($#dirs2 == 0 and $dirs2[0] eq "") { return "/"; }
  $abspath = join '/', @dirs2;
  return( $abspath );
}

#-------------------------------------------------------------------------------

sub valid_option {

    my ($val, @expect) = @_;
    my ($expect);

    $val =~ s/^\s+//;
    $val =~ s/\s+$//;
    foreach $expect (@expect) {
      if ($val =~ /^$expect$/i) { return $expect; }
    }
    return undef;
}

#-------------------------------------------------------------------------------

sub validate_options {

    my $source = shift;   # text string declaring the source of the options being validated
    my $opts   = shift;   # reference to hash that contains the options

    my ($opt, $old, @expect);

}

#-------------------------------------------------------------------------------

sub quote_string {
    my $str = shift;
    $str =~ s/^\s+//;
    $str =~ s/\s+$//;
    unless ($str =~ /^['"]/) {        #"'
        $str = "\'$str\'";
    }
    return $str;
}

#-------------------------------------------------------------------------------

sub expand_env_xml {

    my $value = shift;

    if ($value =~ /\$([\w_]+)(.*)$/) {
	my $subst = $xmlvars{$1};
	$value =~ s/\$${1}/$subst/g;
    }
    return $value; 
}	 

#-------------------------------------------------------------------------------

sub print_nl_to_screen {

  my $namelist = $_[0];
  # Loop through every group in the namelist
  for my $group ($namelist->get_group_names()) {
    # Loop through every variable in group
    for my $var ($namelist->get_variable_names($group)) {
      my $val = $namelist->get_variable_value($group, $var);
      # For derived type, $var contains variable name and group name
      if ($group eq "derived") {
        my @broken = split(/&/,$var);
        print "   * ", $broken[0], " = ", $val, " in \&", $broken[1], "\n";
      }
      else {
        print "   * ", $var, " = ", $val, " in \&", $group, "\n";
      }
    }
  }
}

#-------------------------------------------------------------------------------

sub valid_date {
# return 1 if given date ($$month/$$day/$$year) exists in calendar $cal
# otherwise subtract number of days in $$month from $$day, and increment
# $$month by 1 (also incrementing $$year if going from Dec to Jan) and 
# then return 0.

  use Switch;

  my $day = shift;
  my $month = shift;
  my $year = shift;
  my $cal = shift;

  my $maxday = -1;
  switch ($$month) {
    case 1 { $maxday = 31; }
    case 2 {
      if (($cal eq 'NO_LEAP') || (not leap($$year))) {
        $maxday = 28;
      } else {
        $maxday = 29;
      }
    }
    case 3 { $maxday = 31; }
    case 4 { $maxday = 30; }
    case 5 { $maxday = 31; }
    case 6 { $maxday = 30; }
    case 7 { $maxday = 31; }
    case 8 { $maxday = 31; }
    case 9 { $maxday = 30; }
    case 10 { $maxday = 31; }
    case 11 { $maxday = 30; }
    case 12 { $maxday = 31; }
  }
  if ($maxday == -1) {
    die "ERROR: can not figure out what month $$month is";
  }
  if ($$day > $maxday) {
    $$month++;
    if ($$month == 13) {
      $$year++;
      $$month = 1;
    }
    $$day = $$day - $maxday;
    return 0;
  }
  return 1;
}

#-------------------------------------------------------------------------------

sub leap() {
# return 1 if given year is a leap year, 0 otherwise

  my $year = shift;

  if (($year%4 == 0) && (($year%400 == 0) || ($year%100 != 0))) {
    return 1;
  }
  return 0;
}


#-------------------------------------------------------------------------------

sub any() {
# return 1 if array (arg 0) contains val (arg 1). Note that this uses "eq"
# instead of "==" because it's meant for strings

  my $array_ref = shift;
  my @array = @$array_ref;
  my $val = shift;

  foreach (@array) {
    if ($_ eq $val) {
      return 1;
    }
  }
  return 0;
}
