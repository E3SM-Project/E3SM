module test_dynVarTimeInterp

  ! Tests of dyn_var_time_interp

  use pfunit_mod
  use shr_kind_mod, only : r8 => shr_kind_r8
  use dynVarTimeInterpMod, only : dyn_var_time_interp_type
  use test_dynVarShared
  use dynFileMod, only : dyn_file_type
  use ncdio_pio, only : ncd_get_read_times, ncd_reset_read_times

  implicit none
  save

  real(r8), parameter :: tol = 1.e-13_r8

contains
  
  @Test
  subroutine test_get_current_data_1d_noReads()
    ! Test get_current_data_1d with no reads after initialization
    
    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_interp_type) :: var
    real(r8) :: data(3)
    real(r8) :: expected(3)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_interp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    call var%get_current_data(data)
    expected = [4.0_r8, 5.0_r8, 6.0_r8]*0.25_r8 + &
               [7.0_r8, 8.0_r8, 9.0_r8]*0.75_r8
    @assertEqual(expected, data, tolerance=tol)

    ! Make sure that the above get_current_data call didn't trigger i/o:
    @assertFalse(any(ncd_get_read_times(dyn_file, 'foo_1d')))

  end subroutine test_get_current_data_1d_noReads

  @Test
  subroutine test_get_current_data_1d_noReads_update()
    ! Test get_current_data_1d with no reads after initialization, although it has an
    ! set_current_year call that shouldn't do anything
    
    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_interp_type) :: var
    real(r8) :: data(3)
    real(r8) :: expected(3)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_interp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    ! make sure that a call to set_current_year with an unchanged year doesn't affect things at all
    call dyn_file%time_info%set_current_year(12)

    call var%get_current_data(data)
    expected = [4.0_r8, 5.0_r8, 6.0_r8]*0.25_r8 + &
               [7.0_r8, 8.0_r8, 9.0_r8]*0.75_r8
    @assertEqual(expected, data, tolerance=tol)

    ! Make sure that the above get_current_data call didn't trigger i/o:
    @assertFalse(any(ncd_get_read_times(dyn_file, 'foo_1d')))

  end subroutine test_get_current_data_1d_noReads_update


  @Test
  subroutine test_get_current_data_1d_noReads_conversion()
    ! Test get_current_data_1d with no reads after initialization, with a conversion
    ! factor
    
    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_interp_type) :: var
    real(r8) :: data(3)
    real(r8) :: expected(3)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_interp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=2.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    call var%get_current_data(data)
    expected = [4.0_r8, 5.0_r8, 6.0_r8]*0.25_r8 + &
               [7.0_r8, 8.0_r8, 9.0_r8]*0.75_r8
    expected = expected / 2.0_r8
    @assertEqual(expected, data, tolerance=tol)

  end subroutine test_get_current_data_1d_noReads_conversion


  @Test
  subroutine test_get_current_data_1d_yearsIncreaseBy1()
    ! Test get_current_data_1d, where we move into the next interval so that both year
    ! endpoints increase by 1. This should cause a read of new year 2's data, but
    ! shouldn't need to read new year's 1 data

    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_interp_type) :: var
    real(r8) :: data(3)
    real(r8) :: expected(3)
    logical, allocatable :: read_times(:)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_interp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    ! advance to the next year, which should force a read
    call dyn_file%time_info%set_current_year(13)

    call var%get_current_data(data)
    expected = [7.0_r8, 8.0_r8, 9.0_r8]*0.25_r8 + &
               [10.0_r8, 11.0_r8, 12.0_r8]*0.75_r8
    @assertEqual(expected, data, tolerance=tol)

    ! Make sure that the above get_current_data call DID trigger i/o in this case.
    ! However, it should only have triggered i/o for year 4, since year 3 should already
    ! have been stored
    read_times = ncd_get_read_times(dyn_file, 'foo_1d')
    @assertTrue(read_times(4))
    @assertFalse(any(read_times(1:3)))

  end subroutine test_get_current_data_1d_yearsIncreaseBy1

  @Test
  subroutine test_get_current_data_1d_yearsIncreaseBy2()
    ! Test get_current_data_1d, where we move forward by two intervals, so that both year
    ! endpoints increase by 2. This should cause a read for both new end points.

    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_interp_type) :: var
    real(r8) :: data(3)
    real(r8) :: expected(3)
    logical, allocatable :: read_times(:)

    ! Set up test data
    dyn_file = create_dyn_file(11)
    var = dyn_var_time_interp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    ! advance by two years, which should force a read
    call dyn_file%time_info%set_current_year(13)

    call var%get_current_data(data)
    expected = [7.0_r8, 8.0_r8, 9.0_r8]*0.25_r8 + &
               [10.0_r8, 11.0_r8, 12.0_r8]*0.75_r8
    @assertEqual(expected, data, tolerance=tol)

    ! Make sure that the above get_current_data call DID trigger i/o in this case, for
    ! both years 3 and 4.
    read_times = ncd_get_read_times(dyn_file, 'foo_1d')
    @assertTrue(read_times(3))
    @assertTrue(read_times(4))
    @assertFalse(any(read_times(1:2)))

  end subroutine test_get_current_data_1d_yearsIncreaseBy2

  @Test
  subroutine test_get_current_data_1d_year2Changes()
    ! Test get_current_data_1d, where year 2 changes but not year 1. This would be the
    ! case when we start prior to the time series, then enter the time series. In this
    ! case, we should read year 2, but not year 1 data.

    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_interp_type) :: var
    real(r8) :: data(3)
    real(r8) :: expected(3)
    logical, allocatable :: read_times(:)

    ! Set up test data
    dyn_file = create_dyn_file(10)
    var = dyn_var_time_interp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    ! advance by a year, into the time series
    call dyn_file%time_info%set_current_year(11)

    call var%get_current_data(data)
    expected = [1.0_r8, 2.0_r8, 3.0_r8]*0.25_r8 + &
               [4.0_r8, 5.0_r8, 6.0_r8]*0.75_r8
    @assertEqual(expected, data, tolerance=tol)

    ! Make sure that the above get_current_data call DID trigger i/o in this case, but
    ! just for year 2
    read_times = ncd_get_read_times(dyn_file, 'foo_1d')
    @assertFalse(read_times(1))
    @assertTrue(read_times(2))
    @assertFalse(any(read_times(3:4)))

  end subroutine test_get_current_data_1d_year2Changes


  @Test
  subroutine test_get_current_data_1d_year1Changes()
    ! Test get_current_data_1d, where year 1 changes but not year 2. This would be the
    ! case when we start in the last interval of the time series, then exit the time
    ! series.

    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_interp_type) :: var
    real(r8) :: data(3)
    real(r8) :: expected(3)
    logical, allocatable :: read_times(:)

    ! Set up test data
    dyn_file = create_dyn_file(13)
    var = dyn_var_time_interp_type( &
         dyn_file=dyn_file, &
         varname='foo_1d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &
         data_shape = shape(data))

    call ncd_reset_read_times(dyn_file, 'foo_1d')

    ! advance by a year, past the end of the time series
    call dyn_file%time_info%set_current_year(14)

    call var%get_current_data(data)
    expected = [10._r8, 11._r8, 12._r8]
    @assertEqual(expected, data, tolerance=tol)

    ! Make sure that the above get_current_data call did NOT trigger i/o in this case
    ! (year 2 is the same as before; year 1 should have gotten its data from the old year 2)
    @assertFalse(any(ncd_get_read_times(dyn_file, 'foo_1d')))

  end subroutine test_get_current_data_1d_year1Changes

  @Test
  subroutine test_get_current_data_2d()
    ! Test get_current_data_2d
    
    type(dyn_file_type), target :: dyn_file
    type(dyn_var_time_interp_type) :: var
    real(r8) :: data(2,3)
    real(r8) :: expected_time1(2,3), expected_time2(2,3), expected(2,3)

    ! Set up test data
    dyn_file = create_dyn_file(12)
    var = dyn_var_time_interp_type( &
         dyn_file=dyn_file, &
         varname='foo_2d', &
         dim1name='grlnd', &
         conversion_factor=1.0_r8, &
         do_check_sums_equal_1 = .false., &   ! setting this to false to avoid needing to set up the test data carefully
         data_shape = shape(data))

    call var%get_current_data(data)
    expected_time1 = reshape([ 7._r8,  8._r8,  9._r8, 10._r8, 11._r8, 12._r8], [2,3])
    expected_time2 = reshape([13._r8, 14._r8, 15._r8, 16._r8, 17._r8, 18._r8], [2,3])
    expected = expected_time1 * 0.25_r8 + expected_time2 * 0.75_r8
    @assertEqual(expected, data, tolerance=tol)

  end subroutine test_get_current_data_2d

  
end module test_dynVarTimeInterp
