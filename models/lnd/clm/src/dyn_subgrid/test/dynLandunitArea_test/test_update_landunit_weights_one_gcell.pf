module test_update_landunit_weights_one_gcell

  ! Tests of the update_landunit_weights_one_gcell routine in the dynLandunitArea module

  use pfunit_mod
  use dynLandunitAreaMod
  use landunit_varcon, only : istsoil, istcrop, isturb_md, istice, istice_mec, max_lunit
  use shr_kind_mod   , only : r8 => shr_kind_r8
  

  implicit none
  save

  real(r8), parameter :: tol = 1.e-14_r8

contains

  function create_landunit_weights()
    ! Create default version of the landunit weights
    real(r8), dimension(max_lunit), allocatable :: create_landunit_weights(:)

    create_landunit_weights = [.25_r8, .2_r8, .16_r8, .14_r8, .08_r8, .06_r8, .05_r8, .04_r8, .02_r8]
  end function create_landunit_weights

  @Test
  subroutine test_no_change()
    ! Test with no changes needed in landunit areas, because they already add to 100%
    
    real(r8) :: landunit_weights(max_lunit)
    real(r8) :: expected(max_lunit)

    landunit_weights = create_landunit_weights()
    expected = landunit_weights

    call update_landunit_weights_one_gcell(landunit_weights)
    @assertEqual(expected, landunit_weights)
  end subroutine test_no_change

  @Test
  subroutine test_less_than_1()
    ! Test with the input summing to less than 1, which should result in an increase in
    ! the natural vegetated area

    real(r8) :: landunit_weights(max_lunit)
    real(r8) :: expected(max_lunit)

    landunit_weights = create_landunit_weights()
    landunit_weights(istice_mec) = landunit_weights(istice_mec) - 0.01_r8
    expected = landunit_weights
    expected(istsoil) = landunit_weights(istsoil) + 0.01_r8

    call update_landunit_weights_one_gcell(landunit_weights)
    @assertEqual(expected, landunit_weights, tolerance=tol)
  end subroutine test_less_than_1

  @Test
  subroutine test_greater_than_1_one_change()
    ! Test with the input summing to greater than 1, resulting in a change in a single
    ! landunit

    real(r8) :: landunit_weights(max_lunit)
    real(r8) :: expected(max_lunit)

    landunit_weights = create_landunit_weights()
    landunit_weights(istice_mec) = landunit_weights(istice_mec) + 0.01_r8
    expected = landunit_weights
    expected(istsoil) = landunit_weights(istsoil) - 0.01_r8

    call update_landunit_weights_one_gcell(landunit_weights)
    @assertEqual(expected, landunit_weights, tolerance=tol)
  end subroutine test_greater_than_1_one_change

  @Test
  subroutine test_greater_than_1_multiple_changes()
    ! Test with the input summing to greater than 1, resulting in a change in multiple
    ! landunits (but not all landunits)

    real(r8) :: landunit_weights(max_lunit)
    real(r8) :: expected(max_lunit)

    landunit_weights = create_landunit_weights()

    ! In the following, we assume that the first few elements of decrease_order are:
    ! istsoil, istcrop, isturb_md
    landunit_weights(istice_mec) = landunit_weights(istice_mec) + &
         landunit_weights(istsoil) + landunit_weights(istcrop) + 0.01_r8
    expected = landunit_weights
    expected(istsoil) = 0._r8
    expected(istcrop) = 0._r8
    expected(isturb_md) = expected(isturb_md) - 0.01_r8
    
    call update_landunit_weights_one_gcell(landunit_weights)
    @assertEqual(expected, landunit_weights, tolerance=tol)
  end subroutine test_greater_than_1_multiple_changes

  @Test
  subroutine test_greater_than_1_all_changes()
    ! Test with the input summing to greater than 1, resulting in a change in ALL
    ! landunits (except istice_mec, which is the one set manually here, and which can
    ! never change)

    real(r8) :: landunit_weights(max_lunit)
    real(r8) :: expected(max_lunit)

    landunit_weights = create_landunit_weights()
    landunit_weights(istice_mec) = 0.99_r8

    ! In the following, we assume that the last element of decrease_order is istice (not
    ! to be confused with istice_mec)
    expected(:) = 0._r8
    expected(istice_mec) = 0.99_r8
    expected(istice) = 0.01_r8
    
    call update_landunit_weights_one_gcell(landunit_weights)
    @assertEqual(expected, landunit_weights, tolerance=tol)
  end subroutine test_greater_than_1_all_changes

  @Test
  subroutine test_greater_than_1_all_changes_to_0()
    ! Similar to test_greater_than_1_all_changes, but now all landunits except istice_mec
    ! are reduced to 0

    real(r8) :: landunit_weights(max_lunit)
    real(r8) :: expected(max_lunit)

    landunit_weights = create_landunit_weights()
    landunit_weights(istice_mec) = 1.0_r8
    expected(:) = 0._r8
    expected(istice_mec) = 1.0_r8

    call update_landunit_weights_one_gcell(landunit_weights)
    @assertEqual(expected, landunit_weights, tolerance=tol)
  end subroutine test_greater_than_1_all_changes_to_0

end module test_update_landunit_weights_one_gcell
