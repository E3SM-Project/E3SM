module test_init_columns
  
  ! Tests of the dynInitColumns module

  use pfunit_mod
  use unittestSubgridMod
  use dynInitColumnsMod
  use ColumnType      , only : col
  use LandunitType    , only : lun
  use GridcellType    , only : grc 
  use decompMod       , only : bounds_type
  use clm_varcon      , only : ispval
  use clm_varpar      , only : nlevsno, nlevgrnd
  use shr_kind_mod    , only : r8 => shr_kind_r8
  use TemperatureType , only : temperature_type

  implicit none
  save

  logical, allocatable, private :: cactive_prior(:)
  integer :: c_new     ! column index of the new column to initialize in some tests
  integer :: l1        ! index of the landunit with landunit type 1
  integer :: l2        ! index of the landunit with landunit type 2

  type(temperature_type) :: temperature_vars

contains

  subroutine setup()
    ! Set up variables needed for tests: various subgrid type  variables, along with
    ! bounds and cactive_prior.
    !
    ! col%active and cactive_prior need to be set by specific tests
    integer :: c, lev

    ! Set up subgrid structure
    ! The weights (of both landunits and columns) and column types in the following are
    ! arbitrary, since they are not important for these tests

    call unittest_subgrid_setup_start()

    call unittest_add_gridcell()

    call unittest_add_landunit(my_gi=gi, ltype=3, wtgcell=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)

    call unittest_add_landunit(my_gi=gi, ltype=1, wtgcell=0.5_r8)
    l1 = li
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    ! This column (the second column on the landunit with ltype=1) will be the target for
    ! some tests of initialization of a new column
    c_new = ci
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)

    call unittest_add_landunit(my_gi=gi, ltype=2, wtgcell=0.25_r8)
    l2 = li
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.25_r8)
    call unittest_add_column(my_li=li, ctype=1, wtlunit=0.5_r8)

    call unittest_subgrid_setup_end()

    col%active(begc:endc) = .false.
    allocate(cactive_prior(bounds%begc:bounds%endc), source=.false.)

    nlevgrnd=10
    allocate(temperature_vars%t_soisno_col(bounds%begc:bounds%endc, -nlevsno+1:nlevgrnd))
    do lev = -nlevsno+1, nlevgrnd
       do c = bounds%begc, bounds%endc
          temperature_vars%t_soisno_col(c, lev) = c*1000 + lev
       end do
    end do
  end subroutine setup

  subroutine cleanup()
    ! clean up stuff set up in setup()

    call unittest_subgrid_teardown()

    deallocate(cactive_prior)
    deallocate(temperature_vars%t_soisno_col)
    
  end subroutine cleanup

  ! ------------------------------------------------------------------------
  ! Tests of initial_template_col
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_initial_template_no_landunit()
    ! no landunit of the given landunit_type on this grid cell
    call setup()
    cactive_prior(:) = .true.
    grc%landunit_indices(2,gi) = ispval
    @assertEqual(ispval, initial_template_col(bounds, c_new, 2, cactive_prior))
    call cleanup()
  end subroutine test_initial_template_no_landunit

  @Test
  subroutine test_initial_template_no_active()
    ! no active columns on the given landunit_type
    integer :: template_col
    call setup()
    cactive_prior(:) = .true.
    cactive_prior(lun%coli(l2):lun%colf(l2)) = .false.
    @assertEqual(ispval, initial_template_col(bounds, c_new, 2, cactive_prior))
    call cleanup()
  end subroutine test_initial_template_no_active

  @Test
  subroutine test_initial_template_all_active()
    ! all active columns on the given landunit type; should take the first
    call setup()
    cactive_prior(:) = .true.
    @assertEqual(lun%coli(l2), initial_template_col(bounds, c_new, 2, cactive_prior))
    call cleanup()
  end subroutine test_initial_template_all_active

  @Test
  subroutine test_initial_template_second_active()
    ! first col on the given landunit is inactive, second is active; should take the
    ! second (ignoring the inactive column)
    call setup()
    cactive_prior(:) = .true.
    cactive_prior(lun%coli(l2)) = .false.
    @assertEqual(lun%coli(l2)+1, initial_template_col(bounds, c_new, 2, cactive_prior))
    call cleanup()
  end subroutine test_initial_template_second_active

  ! ------------------------------------------------------------------------
  ! Tests of initial_template_col_crop
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_crop_active_in_soil_and_crop()
    ! there are active columns both on the soil & crop landunits; should take the soil one
    call setup()
    cactive_prior(:) = .true.
    @assertEqual(lun%coli(l1), initial_template_col_crop(bounds, c_new, cactive_prior))
    call cleanup()
  end subroutine test_crop_active_in_soil_and_crop

  @Test
  subroutine test_crop_no_soil()
    ! no soil landunit, should take a crop column
    call setup()
    cactive_prior(:) = .true.
    grc%landunit_indices(1,gi) = ispval
    @assertEqual(lun%coli(l2), initial_template_col_crop(bounds, c_new, cactive_prior))
    call cleanup()
  end subroutine test_crop_no_soil

  @Test
  subroutine test_crop_no_soil_or_crop()
    ! no soil or crop landunits, should give ispval
    call setup()
    cactive_prior(:) = .true.
    grc%landunit_indices(1:2,gi) = ispval
    @assertEqual(ispval, initial_template_col_crop(bounds, c_new, cactive_prior))
    call cleanup()
  end subroutine test_crop_no_soil_or_crop

  ! ------------------------------------------------------------------------
  ! Tests of initialize_new_columns
  ! 
  ! Note that, although we don't have any explicit tests of copy_state, its behavior is
  ! implicitly tested through these tests
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_initialize_new_columns_none()
    ! Nothing to initialize
    real(r8), allocatable :: t_soisno_expected(:,:)
    call setup()
    ! col%active and cactive_prior are a mix of true/true, false/false and false/true, so
    ! there's nothing to initialize
    col%active(:) = .true.
    cactive_prior(:) = .true.
    col%active(lun%coli(l2)+1) = .false.
    cactive_prior(lun%coli(l2)+1) = .false.
    col%active(lun%coli(l2)+2) = .false.
    t_soisno_expected = temperature_vars%t_soisno_col
    call initialize_new_columns(bounds, cactive_prior, temperature_vars)
    @assertEqual(t_soisno_expected, temperature_vars%t_soisno_col)
    call cleanup()
  end subroutine test_initialize_new_columns_none

  @Test
  subroutine test_initialize_new_columns_ispval()
    ! Something to initialize, but template_col results in ispval: state should remain
    ! the same as before
    real(r8), allocatable :: t_soisno_expected(:,:)
    call setup()
    col%active(:) = .false.
    col%active(lun%coli(l2)+1) = .true.
    ! all cactive_prior points were false, so there's nothing to use as a template:
    cactive_prior(:) = .false.
    t_soisno_expected = temperature_vars%t_soisno_col
    call initialize_new_columns(bounds, cactive_prior, temperature_vars)
    @assertEqual(t_soisno_expected, temperature_vars%t_soisno_col)
    call cleanup()
  end subroutine test_initialize_new_columns_ispval

  @Test
  subroutine test_initialize_new_columns_copy_state()
    ! Something to initialize, which results in a state copy
    real(r8), allocatable :: t_soisno_expected(:,:)
    integer :: source_col, dest_col

    call setup()

    col%active(:) = .false.
    dest_col = lun%coli(l2) + 1
    col%active(dest_col) = .true.

    cactive_prior(:) = .false.
    source_col = lun%coli(l1) + 1
    cactive_prior(source_col) = .true.

    t_soisno_expected = temperature_vars%t_soisno_col
    t_soisno_expected(dest_col,:) = temperature_vars%t_soisno_col(source_col,:)
    call initialize_new_columns(bounds, cactive_prior, temperature_vars)
    @assertEqual(t_soisno_expected, temperature_vars%t_soisno_col)
    call cleanup()
  end subroutine test_initialize_new_columns_copy_state

end module test_init_columns
