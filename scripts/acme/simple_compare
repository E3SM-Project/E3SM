#!/usr/bin/env python

"""
Compare files in a normalized way. Used by create_test for
diffing non-namelist files.
"""

import acme_util
acme_util.check_minimum_python_version(2, 7)

import argparse, sys, os, doctest, re

from acme_util import expect, warning, verbose_print

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
usage="""\n%s <Path to gold namelist file> <Path to non-namelist file> [-c <CASEBASEID>] [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Compare files\033[0m
    > %s baseline_dir/test/file mytestarea/file -c <CASE>
""" % ((os.path.basename(args[0]), ) * 4),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    parser.add_argument("gold_file", help="Path to gold file")

    parser.add_argument("new_file", help="Path to file to compare against gold")

    parser.add_argument("-c", "--case", action="store", dest="case", default=None,
                        help="The case base id (<TESTCASE>.<GRID>.<COMPSET>). Helps us normalize data.")

    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="Print extra information")

    args = parser.parse_args(args[1:])

    acme_util.set_verbosity(args.verbose)

    # Normalize case
    if (args.case is not None):
        args.case = acme_util.normalize_case_id(args.case)

    return args.gold_file, args.new_file, args.case

###############################################################################
def normalize_string_value(value, case):
###############################################################################
    """
    Some of the strings are inherently prone to diffs, like file
    paths, etc. This function attempts to normalize that data so that
    it will not cause diffs.
    """
    # Any occurance of case must be normalized because test-ids might not match
    if (case is not None):
        case_re = re.compile(r'%s[.]([GC])[.]([^./\s]+)' % case)
        value = case_re.sub("%s.ACTION.TESTID" % case, value)

    if ("/" in value):
        # File path, just return the basename
        return os.path.basename(value)
    else:
        return value

###############################################################################
def skip_comments_and_whitespace(lines, idx):
###############################################################################
    if (idx == len(lines)):
        return

    comment_re = re.compile(r'^[#!]')

    lines_slice = lines[idx:]
    for line in lines_slice:
        line = line.strip()
        if (comment_re.match(line) is not None or line == ""):
            idx += 1
        else:
            return idx

    return idx

###############################################################################
def compare_data(gold_lines, comp_lines, case):
###############################################################################
    """
    TODO: Unit test
    """
    rv = True
    gidx, cidx = 0, 0
    gnum, cnum = len(gold_lines), len(comp_lines)
    while (gidx < gnum or cidx < cnum):
        gidx = skip_comments_and_whitespace(gold_lines, gidx)
        cidx = skip_comments_and_whitespace(comp_lines, cidx)

        if (gidx == gnum):
            if (cidx == cnum):
                return rv
            else:
                print "Found extra lines"
                print "\n".join(comp_lines[cidx:])
                return False
        elif (cidx == cnum):
            print "Missing lines"
            print "\n".join(gold_lines[gidx:1])
            return False

        gold_value = gold_lines[gidx].strip()
        comp_value = comp_lines[cidx].strip()

        norm_gold_value = normalize_string_value(gold_value, case)
        norm_comp_value = normalize_string_value(comp_value, case)

        if (norm_gold_value != norm_comp_value):
            rv = False
            print "Inequivalent lines %s != %s" % (gold_value, comp_value)
            print "  NORMALIZED: %s != %s" % (norm_gold_value, norm_comp_value)

        gidx += 1
        cidx += 1

    return rv

###############################################################################
def compare_files(gold_file, compare_file, case):
###############################################################################
    expect(os.path.exists(gold_file), "FAIL: File not found: %s" % gold_file)
    expect(os.path.exists(compare_file), "FAIL: File not found: %s" % compare_file)

    return compare_data(open(gold_file, "r").readlines(),
                        open(compare_file, "r").readlines(),
                        case)

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        doctest.testmod()
        return

    gold_file, compare_file, case = \
        parse_command_line(sys.argv, description)

    if (case is None):
        warning("No case id data available, will not be able to normalize values as effectively")
    else:
        verbose_print("Using case: '%s'" % case)

    expect(compare_files(gold_file, compare_file, case),
           "FAIL: Diff between files %s and %s" % (gold_file, compare_file))

    print "Files %s and %s MATCH" % (gold_file, compare_file)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
