#!/usr/bin/env python

"""This script recreates the acme_developer suite within the CESM testlist.xml
file, which should be given as the only argument. It deletes any existing
"acme_developer" category from the XML file, draws from information within
this file to create new test entries, and then inserts these entries into
the XML file."""

# First off, we need a non-ancient Python.
import sys
if (sys.version_info.major != 2) or (sys.version_info.minor < 7):
    print('update_acme_developer: Python 2.7+ is required.')
    print('(Note: Python 3.x is not yet supported.)')
    exit(-1)

# Here are the tests belonging to the acme_developer suite. Format is
# <test>.<grid>.<compset>
acme_developer_tests = [
  'ERS.f19_g16_rx1.A',
  'ERS.f45_g37.B1850C5',
  'ERS.f45_g37_rx1.DTEST',
  'ERS.ne30_g16_rx1.A',
  'ERS_D.f45_g37.B1850C5',
  'ERS_IOP.f19_g16_rx1.A',
  'ERS_IOP.f45_g37_rx1.DTEST',
  'ERS_IOP.ne30_g16_rx1.A',
  'ERS_IOP4c.f19_g16_rx1.A',
  'ERS_IOP4c.ne30_g16_rx1.A',
  'ERS_IOP4p.f19_g16_rx1.A',
  'ERS_IOP4p.ne30_g16_rx1.A',
  'ERS_Ly21.f09_g16.TG',
  'NCK.f19_g16_rx1.A',
  'PEA_P1_M.f45_g37_rx1.A',
  'SMS.ne30_f19_g16_rx1.A']

###############################################################################
def find_all_machines(xml_file):
###############################################################################
    f = open(xml_file, 'r')
    lines = f.readlines()
    f.close()
    machine_set = set()
    for line in lines:
        if '<machine' in line:
            i1 = line.index('compiler') + len('compiler="')
            i2 = line.index('"', i1)
            compiler = line[i1:i2]
            j1 = line.index('>') + 1
            j2 = line.index('<', j1)
            machine = line[j1:j2]
            machine_set.add((machine, compiler))
    return [m for m in machine_set]

###############################################################################
def replace_testlist_xml(output, xml_file):
###############################################################################
    # manage_xml_entries creates a temporary file intended for people to manually check the
    # changes. This made sense before revision control, but not anymore.
    import shutil
    if 'now writing the new test list to' in output:
        i1 = output.index('now writing') + len('now writing the new test list to ')
        i2 = output.index('xml') + 3
        new_xml_file = output[i1:i2]
        shutil.move(new_xml_file, xml_file)

###############################################################################
def generate_acme_developer_entries(tests, machines):
###############################################################################
    import tempfile
    test_file = tempfile.NamedTemporaryFile(mode='w', delete = False)
    for test in tests:
        for machine, compiler in machines:
            test_file.write('%s.%s_%s\n'%(test, machine, compiler))
    name = test_file.name
    test_file.close()
    return name

###############################################################################
def _main_func():
###############################################################################
    import os.path
    if len(sys.argv) == 1:
        print('update_acme_developer: usage: update_acme_developer testlist.xml')
        exit(-1)

    # Get the absolute path to the XML file.
    xml_file = sys.argv[1]
    xml_file_dir = os.path.abspath(os.path.dirname(xml_file))
    xml_file = os.path.join(xml_file_dir, os.path.basename(xml_file))
    if not os.path.exists(xml_file):
        print('Invalid XML file: %s'%xml_file)
        exit(-1)

    # Fish all of the existing machine/compiler combos out of the XML file.
    machines = find_all_machines(xml_file)

    # Try to find the manage_xml_entries script. Too fancy?
    manage_xml_entries = None
    for root, _, files in os.walk('.'):
        for name in files:
            if name == 'manage_xml_entries':
                manage_xml_entries = os.path.abspath(os.path.join(root, name))
    if manage_xml_entries is None:
        print('Couldn\'t find manage_xml_entries. You might be too deep in the source tree.')
        exit(-1)

    # Remove any existing acme_developer category from the file.
    import subprocess
    output = subprocess.check_output([manage_xml_entries, '-removetests', '-category', 'acme_developer'])
    replace_testlist_xml(output, xml_file)

    # Generate a list of test entries corresponding to our suite at the top
    # of the file.
    import os
    new_test_file = generate_acme_developer_entries(acme_developer_tests, machines)
    output = subprocess.check_output([manage_xml_entries, '-addlist',
                                     '-file', new_test_file,
                                     '-category', 'acme_developer'])
    os.unlink(new_test_file)
    replace_testlist_xml(output, xml_file)

if __name__ == "__main__":
    _main_func()
