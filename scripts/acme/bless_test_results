#!/usr/bin/env python

"""
Analyze results from a test root area, finding namelist and non-BFB
changes, and updating baselines. Purpose is, instead of re-running tests
in generate mode, which is very slow, allow for very fast analsis and
blessing of diffs.

Be aware that restart test will overwrite the original namelist files
with versions of the files that you should not bless.
"""

import acme_util
acme_util.check_minimum_python_version(2, 7)

import argparse, sys, os, socket, shutil, glob, doctest

import wait_for_tests, compare_namelists, simple_compare
from acme_util import expect, warning, verbose_print, run_cmd

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
usage="""\n%s [-r] [-n] [-t <TESTROOT>] [<TEST> <TEST> ...] [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# From most recent run, bless any namelist changes \033[0m
    > %s -n
    \033[1;32m# From most recent run, bless all changes \033[0m
    > %s
    \033[1;32m# From most recent run, bless changes to test foo and bar only \033[0m
    > %s foo bar
    \033[1;32m# From most recent run, bless only namelist changes to test foo and bar only \033[0m
    > %s -n foo bar
""" % ((os.path.basename(args[0]), ) * 7),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Print extra information")

    parser.add_argument("-n", "--namelists-only", action="store_true",
                        help="Only analyze namelists.")

    parser.add_argument("-b", "--branch",
                        help="Force us to use baselines for a specific branch instead of the current branch.")

    parser.add_argument("-r", "--report-only", action="store_true",
                        help="Only report what files will be overwritten and why. Caution is a good thing when updating baselines")

    parser.add_argument("-t", "--test-root",
                        help="Instead of looking at last night's Jenkins results, use a custom test area")

    parser.add_argument("-f", "--force", action="store_true",
                        help="Update every diff without asking. VERY DANGEROUS. Should only be used within testing scripts.")

    parser.add_argument("bless_tests", nargs="*",
                        help="When blessing, limit the bless to tests matching these regex")

    args = parser.parse_args(args[1:])

    expect(not (args.report_only and args.force),
           "Makes no sense to use -r and -f simultaneously")

    acme_util.set_verbosity(args.verbose)

    return args.branch, args.namelists_only, args.report_only, args.test_root, args.force, args.bless_tests

###############################################################################
def bless_test_results(baseline_branch=None, namelists_only=False, report_only=False, test_root=None, force=False, bless_tests=None):
###############################################################################
    acme_machine = acme_util.probe_machine_name()
    expect(acme_machine is not None,
           "Did not recognize current machine '%s'" % socket.gethostname())

    acme_repo = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", ".."))
    expect(os.path.isdir(os.path.join(acme_repo, ".git")),
           "Expected '%s' to be a git repository" % acme_repo)

    _, _, _, _, acme_root, baseline_root, _ = acme_util.get_machine_info(acme_machine)
    if (test_root is None):
        test_root = os.path.join(acme_root, "jenkins")

    git_branch = acme_util.get_current_branch(repo=acme_repo) if baseline_branch is None else baseline_branch

    test_results = wait_for_tests.get_test_results(glob.glob("%s/*/TestStatus" % test_root),
                                                   True, # no wait
                                                   False, # don't check throughput
                                                   False) # don't ignore namelist diffs

    baseline_area = os.path.join(baseline_root, git_branch)

    for test_name, test_data in test_results.iteritems():
        if (bless_tests in [[], None] or acme_util.match_any(test_name, bless_tests)):
            test_result = test_data[1]

            if (test_result == wait_for_tests.TEST_PASSED_STATUS):
                if (bless_tests not in [[], None]):
                    warning("Asked to bless test %s, but it passed" % test_name)
            else:

                print "###############################################################################"
                print "Blessing results for test:", test_name, "most recent result:", test_result
                print "###############################################################################"

                # Get baseline dir for this test
                baseline_dir_for_test = os.path.join(baseline_area, test_name)
                expect(os.path.isdir(baseline_dir_for_test),
                       "Problem, baseline dir '%s' does not exist" % baseline_dir_for_test)

                # Get testcase dir for this test
                globs = glob.glob("%s*" % os.path.join(test_root, test_name))
                expect(len(globs) == 1, "Expected exactly one match for testcase area for test '%s', found '%s'" % (test_name, globs))
                testcase_dir_for_test = globs[0]
                case = os.path.basename(testcase_dir_for_test)

                # Get user that test was run as (affects loc of hist files)
                user = run_cmd(r"""grep CCSMUSER %s/env_case.xml | sed -E 's/.+value="(.+)".+/\1/g'""" % testcase_dir_for_test).strip()
                acme_root = acme_util.get_machine_info(acme_machine, user=user)[4]

                # Find files of various types
                namelist_files = []
                other_files = []
                for root, _, files in os.walk(baseline_dir_for_test):
                    if (root == baseline_dir_for_test):
                        rel_root = ""
                    else:
                        rel_root = root.replace("%s/" % baseline_dir_for_test, "")

                    for file_ in files:
                        rel_file = os.path.join(rel_root, file_)

                        baseline_file = os.path.join(baseline_dir_for_test, rel_file)
                        testcase_file = os.path.join(testcase_dir_for_test, rel_file)

                        if (rel_root == "CaseDocs" or file_.startswith("user_nl")):
                            if (compare_namelists.is_namelist_file(baseline_file)):
                                if (not compare_namelists.compare_namelist_files(baseline_file, testcase_file, test_name)):
                                    print "Namelist files '%s' and '%s' did not match" % (baseline_file, testcase_file)
                                    print
                                    if (not report_only and
                                        (force or raw_input("Update this file (y/n)? ").upper() in ["Y", "YES"])):
                                        namelist_files.append((rel_file, rel_file))
                            else:
                                if (not simple_compare.compare_files(baseline_file, testcase_file, test_name)):
                                    print "Simple files '%s' and '%s' did not match" % (baseline_file, testcase_file)
                                    print
                                    if (not report_only and
                                        (force or raw_input("Update this file (y/n)? ").upper() in ["Y", "YES"])):
                                        namelist_files.append((rel_file, rel_file))

                        elif (not namelists_only and test_result != wait_for_tests.NAMELIST_FAIL_STATUS):
                            # For now, just do this hist file
                            if (file_ == "cpl.hi.nc"):
                                # Hist file will have different name in testcase, need to find it
                                hist_files = glob.glob("%s/run/%s*.cpl.hi*nc" % (os.path.join(acme_root, case), case))
                                if (len(hist_files) != 1):
                                    warning("Expected to find one hist file, instead found: %s" % ", ".join(hist_files))
                                    warning("This can happen if test failed before running")
                                    warning("Skipping hist files for this test")
                                    continue
                                hist_file = hist_files[0]
                                hist_compare_script = os.path.join(os.path.dirname(__file__), "..", "ccsm_utils", "Tools", "hist_compare.csh")
                                stat = run_cmd("%s %s %s" % (hist_compare_script, hist_file, baseline_file), arg_stdout=None, arg_stderr=None, ok_to_fail=True)[0]
                                if (stat != 0):
                                    print "Hist files '%s' and '%s' did not match" % (baseline_file, hist_file)
                                    print
                                    if (not report_only and
                                        (force or raw_input("Update this file (y/n)? ").upper() in ["Y", "YES"])):
                                        other_files.append((hist_file, rel_file))

                # Update namelist files
                if (namelist_files):
                    acme_util.safe_copy(testcase_dir_for_test, baseline_dir_for_test, namelist_files)

                # Update other files
                if (other_files):
                    acme_util.safe_copy(testcase_dir_for_test, baseline_dir_for_test, other_files)

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    acme_util.stop_buffering_output()

    baseline_branch, namelists_only, report_only, test_root, force, bless_tests = \
        parse_command_line(sys.argv, description)

    bless_test_results(baseline_branch, namelists_only, report_only, test_root, force, bless_tests)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
