#!/usr/bin/env python

"""
Wait for a queued ACME test to finish by watching the TestStatus file.
If the test passes, 0 is returned, otherwise a non-zero error code
is returned.
"""

import argparse, sys, os, doctest, time, threading, Queue

VERBOSE = False
TEST_STATUS_FILENAME = "TestStatus"
TEST_NOT_FINISHED_STATUS = ["GEN", "BUILD", "RUN", "PEND"]
TEST_PASSED_STATUS = "PASS"
SLEEP_INTERVAL_SEC = 5

###############################################################################
def expect(condition, error_msg):
###############################################################################
    if (not condition):
        raise SystemExit(error_msg)

###############################################################################
def verbose_print(msg):
###############################################################################
    if (VERBOSE):
        print msg

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
usage="""\n%s [<Path to TestStatus> <Path to TestStatus> ...]  [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Wait for test in current dir\033[0m
    > %s
    \033[1;32m# Wait for test in user specified tests\033[0m
    > %s path/to/testdir
    \033[1;32m# Wait for all tests in a test area\033[0m
    > %s path/to/testarea/*/TestStatus
""" % ((os.path.basename(args[0]), ) * 6),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    parser.add_argument("paths", default=".", nargs="*", help="Paths to test directories or status file. Pwd default.")

    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="Print shell commands as they are executed")

    args = parser.parse_args(args[1:])

    global VERBOSE
    VERBOSE = args.verbose

    return args.paths

###############################################################################
def parse_test_status_file(file_contents):
###############################################################################
    r"""
    >>> parse_test_status_file('PASS testname')
    ('testname', 'PASS')
    >>> parse_test_status_file('PASS testname \nGEN testname2')
    ('testname', 'GEN')
    >>> parse_test_status_file('PASS testname\nPASS testname2')
    ('testname', 'PASS')
    """
    real_test_name = None
    for line in file_contents.splitlines():
        expect(len(line.split()) == 2, "Line '%s' not in expected format" % line)
        status, test_name = line.split()
        if (real_test_name is None):
            real_test_name = test_name # just take the first one

        verbose_print("Test: '%s' has status '%s'" % (test_name, status))
        if (status != TEST_PASSED_STATUS):
            return real_test_name, status

    expect(real_test_name is not None, "Empty status file!")
    return real_test_name, TEST_PASSED_STATUS

###############################################################################
def wait_for_test(test_path, results):
###############################################################################
    if (os.path.isdir(test_path)):
        test_status_filepath = os.path.join(test_path, TEST_STATUS_FILENAME)
    else:
        test_status_filepath = test_path
    verbose_print("Watching file: '%s'" % test_status_filepath)

    while (True):
        if (os.path.exists(test_status_filepath)):
            test_status_fd = open(test_status_filepath, "r")
            test_status_contents = test_status_fd.read()
            test_name, test_status = parse_test_status_file(test_status_contents)
            if (test_status in TEST_NOT_FINISHED_STATUS):
                time.sleep(SLEEP_INTERVAL_SEC)
                verbose_print("Waiting for test to finish")
            else:
                print ("Test '%s' finished with status '%s'" % (test_name, test_status))
                results.put(test_status)
                return test_status
        else:
            verbose_print("File '%s' does not yet exist" % test_status_filepath)
            time.sleep(SLEEP_INTERVAL_SEC)

###############################################################################
def wait_for_tests(test_paths):
###############################################################################
    results = Queue.Queue()

    for test_path in test_paths:
        t = threading.Thread(target=wait_for_test, args=(test_path, results))
        t.daemon = True
        t.start()

    while threading.active_count() > 0:
        time.sleep(0.1)

    all_pass = True
    for _ in xrange(len(test_paths)):
        test_status = results.get()
        all_pass &= test_status == TEST_PASSED_STATUS

    return all_pass

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        doctest.testmod()
        return

    test_paths = parse_command_line(sys.argv, description)

    sys.exit(0 if wait_for_tests(test_paths) else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
