#!/usr/bin/env python

"""
Wait for a queued ACME test to finish by watching the TestStatus file.
If the test passes, 0 is returned, otherwise a non-zero error code
is returned.
"""

import argparse, sys, os, doctest, time, threading, Queue, signal
import distutils.spawn, subprocess, getpass
import xml.etree.ElementTree as xmlet

VERBOSE = False
TEST_STATUS_FILENAME = "TestStatus"
TEST_NOT_FINISHED_STATUS = ["GEN", "BUILD", "RUN", "PEND"]
TEST_PASSED_STATUS = "PASS"
SLEEP_INTERVAL_SEC = 1
SIGNAL_RECEIVED = False

CLEANUP_ROUTINES = \
{
    "slurm" : "scancel --user=%s" % getpass.getuser(),
    "pbs"   : "qdel $(qselect -u %s)" % getpass.getuser()
}
CLEANUP = False

THROUGHPUT_TEST_STR = ".tputcomp."

###############################################################################
def expect(condition, error_msg):
###############################################################################
    if (not condition):
        raise SystemExit(error_msg)

###############################################################################
def verbose_print(msg):
###############################################################################
    if (VERBOSE):
        print msg

###############################################################################
def warning(msg):
###############################################################################
    print >> sys.stderr, "WARNING:", msg

###############################################################################
def run_cmd(cmd, stdout_arg=None):
###############################################################################
    proc = subprocess.Popen(cmd, shell=True, stdout=stdout_arg, stderr=subprocess.PIPE)
    output, errput = proc.communicate()
    stat = proc.wait()
    expect(stat == 0, "Command: '%s' failed with error '%s'" % (cmd, errput))

    return output

###############################################################################
def probe_batch_system():
###############################################################################
    for batch_system, cmd in CLEANUP_ROUTINES.iteritems():
        exe = cmd.split()[0]
        exe_path = distutils.spawn.find_executable(exe)
        if (exe_path is not None):
            return batch_system

    warning("No batch system found, skipping job cleanup")
    return None

###############################################################################
def signal_handler(signum, frame):
###############################################################################
    global SIGNAL_RECEIVED
    SIGNAL_RECEIVED = True

    # Kill all queue'd jobs
    if (CLEANUP):
        batch_system = probe_batch_system()
        if (batch_system is not None):
            run_cmd(CLEANUP_ROUTINES[batch_system])

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
usage="""\n%s [<Path to TestStatus> <Path to TestStatus> ...]  [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Wait for test in current dir\033[0m
    > %s
    \033[1;32m# Wait for test in user specified tests\033[0m
    > %s path/to/testdir
    \033[1;32m# Wait for all tests in a test area\033[0m
    > %s path/to/testarea/*/TestStatus
""" % ((os.path.basename(args[0]), ) * 6),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    parser.add_argument("paths", default=".", nargs="*", help="Paths to test directories or status file. Pwd default.")

    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="Print shell commands as they are executed")

    parser.add_argument("-n", "--no-wait", action="store_true", dest="no_wait", default=False,
                        help="Do not wait for tests to finish")

    parser.add_argument("-t", "--check-throughput", action="store_true", dest="check_throughput", default=False,
                        help="Fail if throughput check fails (fail if tests slow down)")

    parser.add_argument("-c", "--cleanup", action="store_true", dest="cleanup",
                        default=False,
                        help="Cancel all queued jobs on exit")

    parser.add_argument("-d", "--cdash", action="store_true", dest="cdash", default=False,
                        help="Produce XML for test results that can be used for cdash")

    args = parser.parse_args(args[1:])

    global VERBOSE
    VERBOSE = args.verbose

    global CLEANUP
    CLEANUP = args.cleanup

    return args.paths, args.no_wait, args.check_throughput, args.cdash

###############################################################################
def get_test_time(test_path):
###############################################################################
    cmd = "grep 'TOT Run Time' /dev/null $(find %s -name 'ccsm_timing*') || true" % test_path
    output = run_cmd(cmd, subprocess.PIPE)

    tot_time = 0.0
    for line in output.splitlines():
        if (line != "" and not line.isspace()):
            tokens = line.split()

            if (len(tokens) < 5 or tokens[1:4] != ["TOT", "Run", "Time:"]):
                warning("Line '%s' not in expected format")
                continue

            try:
                cur_time = float(tokens[4])
                tot_time += cur_time
            except ValueError:
                warning("Line '%s' not in expected format, '%s' not a valid float" % (line, tokens[4]))

    if (tot_time == 0.0):
        warning("No timing data found in %s" % test_path)

    return tot_time

###############################################################################
def get_test_output(test_path):
###############################################################################
    output_file = os.path.join(test_path, "TestStatus.out")
    if (os.path.exists(output_file)):
        return open(output_file, 'r').read()
    else:
        warning("File '%s' not found" % output_file)
        return ""

###############################################################################
def create_cdash_xml(start_time, results):
###############################################################################
    # Make necessary dirs
    local_time_tuple = time.localtime(start_time)
    subdir_name = time.strftime('%Y%m%d-%H%M', local_time_tuple)
    data_rel_path = os.path.join("Testing", subdir_name)
    os.makedirs(data_rel_path)

    # Make tag file
    tag_fd = open("Testing/TAG", "w")
    tag_fd.write("%s\nExperimental" % subdir_name)
    tag_fd.close()

    # Preamble - skip for now?
    '''<Site BuildName="dakota_core_rhel6_gcc_ompi"
    BuildStamp="20150115-1944-Continuous"
    Name="face"
    Generator="ctest-2.8.11.1"
    CompilerName=""
    OSName="Linux"
    Hostname="face.sandia.gov"
    OSRelease="2.6.32-504.el6.x86_64"
    OSVersion="#1 SMP Tue Sep 16 01:56:35 EDT 2014"
    OSPlatform="x86_64"
    Is64Bits="1"
    VendorString="GenuineIntel"
    VendorID="Intel Corporation"
    FamilyID="6"
    ModelID="44"
    ProcessorCacheSize="12288"
    NumberOfLogicalCPU="16"
    NumberOfPhysicalCPU="8"
    TotalVirtualMemory="26207"
    TotalPhysicalMemory="24016"
    LogicalProcessorsPerPhysical="2"
    ProcessorClockFrequency="2394.04"
    >'''

    testing_elem = xmlet.Element("Testing")

    start_date_time_elem = xmlet.SubElement(testing_elem, "StartDateTime")
    start_date_time_elem.text = time.ctime(start_time)

    start_test_time_elem = xmlet.SubElement(testing_elem, "StartTestTime")
    start_test_time_elem.text = str(int(start_time))

    test_list_elem = xmlet.SubElement(testing_elem, "TestList")
    for test_name in sorted(results):
        test_elem = xmlet.SubElement(test_list_elem, "Test")
        test_elem.text = test_name

    for test_name in sorted(results):
        test_path, test_status = results[test_name]
        test_passed = test_status == TEST_PASSED_STATUS
        test_norm_path = test_path if os.path.isdir(test_path) else os.path.dirname(test_path)

        full_test_elem = xmlet.SubElement(testing_elem, "Test")
        full_test_elem.attrib["Status"] = "passed" if test_passed else "failed"

        name_elem = xmlet.SubElement(full_test_elem, "Name")
        name_elem.text = test_name

        path_elem = xmlet.SubElement(full_test_elem, "Path")
        path_elem.text = test_norm_path

        full_name_elem = xmlet.SubElement(full_test_elem, "FullName")
        full_name_elem.text = test_name

        full_command_line_elem = xmlet.SubElement(full_test_elem, "FullCommandLine")
        # text ?

        results_elem = xmlet.SubElement(full_test_elem, "Results")

        named_measurements = (
            ("text/string",    "Exit Code",         test_status),
            ("text/string",    "Exit Value",        "0" if test_passed else "1"),
            ("numeric_double", "Execution Time",    str(get_test_time(test_norm_path))),
            ("text/string",    "Completion Status", "Not Completed" if test_status in TEST_NOT_FINISHED_STATUS else "Completed"),
            ("text/string",    "Command line",      "create_test")
        )

        for type_attr, name_attr, value in named_measurements:
            named_measurement_elem = xmlet.SubElement(results_elem, "NamedMeasurement")
            named_measurement_elem.attrib["type"] = type_attr
            named_measurement_elem.attrib["name"] = name_attr

            value_elem = xmlet.SubElement(named_measurement_elem, "Value")
            value_elem.text = value

        measurement_elem = xmlet.SubElement(results_elem, "Measurement")

        value_elem = xmlet.SubElement(measurement_elem, "Value")
        value_elem.text = get_test_output(test_norm_path)

    etree = xmlet.ElementTree(testing_elem)

    etree.write(os.path.join(data_rel_path, "Test.xml"))

###############################################################################
def parse_test_status_file(file_contents, status_file_path, check_throughput):
###############################################################################
    r"""
    >>> parse_test_status_file('PASS testname', '', False)
    ('testname', 'PASS')
    >>> parse_test_status_file('PASS testname \nGEN testname2', '', False)
    ('testname', 'GEN')
    >>> parse_test_status_file('PASS testname\nPASS testname2', '', False)
    ('testname', 'PASS')
    >>> parse_test_status_file('PASS testname\nFAIL testname2.tputcomp.foo', '', False)
    ('testname', 'PASS')
    >>> parse_test_status_file('PASS testname\nFAIL testname2.tputcomp.foo', '', True)
    ('testname', 'FAIL')
    """
    real_test_name = None
    for line in file_contents.splitlines():
        if (len(line.split()) == 2):
            status, test_name = line.split()
            if (real_test_name is None):
                real_test_name = test_name # just take the first one

            verbose_print("Test: '%s' has status '%s'" % (test_name, status))

            # A non-pass is OK if the failure is due to throughput and we
            # aren't checking throughput
            if (status != TEST_PASSED_STATUS and not
                (not check_throughput and THROUGHPUT_TEST_STR in test_name)):
                return real_test_name, status
        else:
            warning("In '%s', line '%s' not in expected format" % (status_file_path, line))

    if (real_test_name is None):
        warning("Empty status file: %s" % status_file_path)

    return real_test_name, TEST_PASSED_STATUS

###############################################################################
def wait_for_test(test_path, results, wait, check_throughput):
###############################################################################
    if (os.path.isdir(test_path)):
        test_status_filepath = os.path.join(test_path, TEST_STATUS_FILENAME)
    else:
        test_status_filepath = test_path
    verbose_print("Watching file: '%s'" % test_status_filepath)

    while (True):
        if (os.path.exists(test_status_filepath)):
            test_status_fd = open(test_status_filepath, "r")
            test_status_contents = test_status_fd.read()
            test_name, test_status = parse_test_status_file(test_status_contents, test_status_filepath, check_throughput)

            if (test_status in TEST_NOT_FINISHED_STATUS and (wait and not SIGNAL_RECEIVED)):
                time.sleep(SLEEP_INTERVAL_SEC)
                verbose_print("Waiting for test to finish")
            else:
                results.put( (test_name, test_path, test_status) )
                break

        else:
            if (wait and not SIGNAL_RECEIVED):
                verbose_print("File '%s' does not yet exist" % test_status_filepath)
                time.sleep(SLEEP_INTERVAL_SEC)
            else:
                test_name = os.path.abspath(test_status_filepath).split("/")[-2]
                results.put( (test_name, test_path, "File '%s' doesn't exist" % test_status_filepath) )
                break

###############################################################################
def wait_for_tests(test_paths, no_wait, check_throughput, cdash):
###############################################################################
    # Set up signal handling, we want to print results before the program
    # is terminated
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)

    if (cdash):
        start_time = time.time()

    results = Queue.Queue()

    for test_path in test_paths:
        t = threading.Thread(target=wait_for_test, args=(test_path, results, not no_wait, check_throughput))
        t.daemon = True
        t.start()

    while threading.active_count() > 1:
        time.sleep(SLEEP_INTERVAL_SEC)

    tests_with_results = dict()
    completed_test_paths = []
    while (not results.empty()):
        test_name, test_path, test_status = results.get()
        if (test_name in tests_with_results):
            prior_path, prior_status = tests_with_results[test_name]
            if (test_status == prior_status):
                warning("Test name '%s' was found in both '%s' and '%s'" %
                        (test_name, test_path, prior_path))
            else:
                raise SystemExit("Test name '%s' was found in both '%s' and '%s' with different results" %
                                 (test_name, test_path, prior_path))

        tests_with_results[test_name] = (test_path, test_status)
        completed_test_paths.append(test_path)

    expect(set(test_paths) == set(completed_test_paths),
           "Missing results for test paths: %s" % (set(test_paths) - set(completed_test_paths)) )

    all_pass = True
    for test_name, test_data in sorted(tests_with_results.iteritems()):
        test_path, test_status = test_data
        print "Test '%s' finished with status '%s'" % (test_name, test_status)
        print "    Path: %s" % test_path
        all_pass &= test_status == TEST_PASSED_STATUS

    if (cdash):
        create_cdash_xml(start_time, tests_with_results)

    return all_pass

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        doctest.testmod()
        return

    test_paths, no_wait, check_throughput, cdash = parse_command_line(sys.argv, description)

    sys.exit(0 if wait_for_tests(test_paths, no_wait, check_throughput, cdash) else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
