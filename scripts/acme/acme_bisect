#!/usr/bin/env python

"""
A script to help track down the commit that caused a test to fail. This
script is intended to be run by git bisect.
"""

import acme_util
acme_util.check_minimum_python_version(2, 7)
import wait_for_tests

import argparse, sys, glob, os, doctest

from acme_util import expect, warning, verbose_print, run_cmd

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n%s <testname> [--compare=<baseline-id>] [--no-batch]  [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Bisect broken test ERS.f45_g37.B1850C5.melvin_gnu \033[0m
    > git bisect start
    > git bisect good [LAST KNOWN WORKING COMMIT]
    > git bisect bad [CURRENT COMMIT]
    > git bisect run scripts/acme/%s ERS.f45_g37.B1850C5.melvin_gnu /scratch/user/acme_scratch
""" % ((os.path.basename(args[0]), ) * 4),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    default_compiler, _, _, default_project, default_testroot, _, _ = acme_util.get_machine_info(raw=True)

    parser.add_argument("testname", help="Name of failing test.")

    parser.add_argument("-r", "--test-root", action="store", dest="testroot", default=default_testroot,
                        help="Path to testroot to use for testcases for bisect.")

    parser.add_argument("-c", "--compiler", action="store", dest="compiler", default=default_compiler,
                        help="What compiler to use to build ACME")

    parser.add_argument("-p", "--project", action="store", dest="project", default=default_project,
                        help="Project to be given to create_test.")

    parser.add_argument("-b", "--baseline-name", action="store", dest="baseline_name", default=None,
                        help="Baseline id for comparing baselines. Not specifying means no comparisons will be done.")

    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="Print extra information")

    parser.add_argument("-n", "--check-namelists", action="store_true", dest="check_namelists", default=False,
                        help="Consider a commit to be broken if namelist check fails")

    parser.add_argument("-t", "--check-throughput", action="store_true", dest="check_throughput", default=False,
                        help="Consider a commit to be broken if throughput check fails (fail if tests slow down)")

    parser.add_argument("-m", "--check-memory", action="store_true", dest="check_memory", default=False,
                        help="Consider a commit to be broken if memory check fails (fail if tests footprint grows)")

    parser.add_argument("--no-batch", action="store_true", dest="no_batch", default=False,
                        help="Force scripts to not submit tests as batch jobs. Default will be to do whatever is standard on the current machine")

    args = parser.parse_args(args[1:])

    acme_util.set_verbosity(args.verbose)

    if (args.test_root == default_testroot):
        args.test_root = acme_util.get_machine_info(project=args.project)

    return args.testname, args.testroot, args.compiler, args.project, args.baseline_name, args.check_namelists, args.check_throughput, args.check_memory, args.no_batch

###############################################################################
def acme_bisect(testname, testroot, compiler, project, baseline_name, check_namelists, check_throughput, check_memory, no_batch):
###############################################################################
    expect(os.path.exists("scripts/acme/create_test"), "Please run from root of repository")

    current_sha = acme_util.get_current_commit(short=True)

    print "####################################################################"
    print "BISECTING COMMIT", current_sha
    print "####################################################################"

    # Formulate and run create_test command

    extra_args = "--no-batch" if no_batch else ""
    compare_args = "-c -b %s" % baseline_name if baseline_name is not None else ""
    create_test_cmd = "scripts/acme/create_test %s --test-root %s --compiler %s -t %s -p %s %s %s" % \
                      (testname, testroot, compiler, current_sha, project, compare_args, extra_args)
    run_cmd(create_test_cmd)

    # Find testcase area
    glob_matches = glob.glob("%s/%s*%s" % (testroot, testname, current_sha))
    expect(len(glob_matches) == 1, "Did not find single match, found: '%s'" % glob_matches)
    testarea = glob_matches[0]

    # Build and run test
    stat = run_cmd("./*test_build", ok_to_fail=True, from_dir=testarea, arg_stdout=None, arg_stderr=None)[0]
    if (stat != 0):
        print "BUILD FAILED!"
        return False

    stat = run_cmd("./*submit", ok_to_fail=True, from_dir=testarea, arg_stdout=None, arg_stderr=None)[0]
    if (stat != 0):
        print "SUBMIT FAILED!"
        return False

    # Wait for test
    return wait_for_tests.wait_for_tests([os.path.join(testarea, "TestStatus")],
                                         no_wait=no_batch, # wait if using batch
                                         check_throughput=check_throughput,
                                         check_memory=check_memory,
                                         ignore_namelists=not check_namelists, # inverse due to opposite defaults
                                         cdash_build_name=None # don't do cdash stuff
                                         )

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    acme_util.stop_buffering_output()

    testname, testroot, compiler, project, baseline_name, check_namelists, check_throughput, check_memory, no_batch = \
        parse_command_line(sys.argv, description)

    try:
        rv = acme_bisect(testname, testroot, compiler, project, baseline_name, check_namelists, check_throughput, check_memory, no_batch)
    except:
        print >> sys.stderr, "Exception in script, aborting bisect entirely:"
        e = sys.exc_info()[1]
        print >> sys.stderr, e
        sys.exit(-1)
    else:
        sys.exit(0 if rv else 1)

###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)
