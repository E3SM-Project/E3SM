#! /bin/csh -f

#################################################################################
if ($PHASE == set_batch) then
#################################################################################

source ./Tools/ccsm_getenv || exit -1

if !(-d /projects/${PROJECT}) then
  echo "  PROJECT in env_case.xml must be set to a valid project name."
  echo "  This can be specified in create_newcase with the -project parameter"
  echo "  or by setting a PROJECT environment variable before executing create_newcase."
  exit -1
endif

set max_tasks_per_node = $MAX_TASKS_PER_NODE
set ntasks = `${CASEROOT}/Tools/taskmaker.pl -sumtasks`
set mthrds = `${CASEROOT}/Tools/taskmaker.pl -maxthrds`

if (${mthrds} > ${max_tasks_per_node}) then
   echo "ERROR max threads greater than max tasks per node"
   exit 1
endif

@ nodes = (${ntasks} * ${mthrds}) / ${max_tasks_per_node}
if ((${nodes} * ${max_tasks_per_node}) < (${ntasks} * ${mthrds})) then
  @ nodes = ${nodes} + 1
endif

@ batchpes = ${nodes} * ${max_tasks_per_node}
./xmlchange -file env_mach_pes.xml -id COST_PES -val ${batchpes}

if ($?TESTMODE) then
 set file = $CASEROOT/${CASE}.test 
else
 set file = $CASEROOT/${CASE}.run 
endif

cat >! $file << EOF1
#! /bin/csh -f
#==============================================================================
#  This is a CCSM coupled model job script.  The job scheduler on
#  this platform does not currently support batch scripts, so this script must
#  be run by the user directly instead.  Please redirect the output from this
#  script, if desired.
#==============================================================================

cd $CASEROOT
source ./Tools/ccsm_getenv || exit -1

# Set walltime
set wt = 90
if ($CCSM_ESTCOST > -3) set wt = 180
if ($CCSM_ESTCOST > 0) set wt = 360

# Determine tasks and threads for batch queue 

set max_tasks_per_node = \$MAX_TASKS_PER_NODE
set ntasks = \`${CASEROOT}/Tools/taskmaker.pl -sumtasks\`
set npes   = \`${CASEROOT}/Tools/taskmaker.pl -sumpes\`
set mthrds = \`${CASEROOT}/Tools/taskmaker.pl -maxthrds\`

if (\${mthrds} > \${max_tasks_per_node}) then
   echo "ERROR max threads greater than max tasks per node"
   exit 1
endif

@ nodes = (\${ntasks} * \${mthrds}) / \${max_tasks_per_node}
if ((\${nodes} * \${max_tasks_per_node}) < (\${ntasks} * \${mthrds})) then
  @ nodes = \${nodes} + 1
endif

echo "nodes  = \${nodes}"
echo "ntasks = \${ntasks}"
echo "mthrds = \${mthrds}"

if ( \${?COBALT_JOBID} == 0 && \$MPILIB != "mpi-serial" ) then
    echo "COBALT_JOBID not set, submitting job"
    echo "qsub -n \${nodes} -t 0 --mode script \$0 -backend"
    qsub -n \${nodes} -t 0 --mode script \$0 -backend
    exit 0
else
    echo "COBALT_JOBID detected, assuming back-end invocation"
endif


EOF1


#################################################################################
else if ($PHASE == set_exe) then
#################################################################################


cat >> ${CASEROOT}/${CASE}.run << EOF1

# -------------------------------------------------------------------------
# Set up the model.  For the single executable, this means determining the
# total number of tasks.  determine by largest max task of any component
# -------------------------------------------------------------------------

set max_tasks_per_node = \$MAX_TASKS_PER_NODE
set ntasks = \`${CASEROOT}/Tools/taskmaker.pl -sumtasks\`
set npes   = \`${CASEROOT}/Tools/taskmaker.pl -sumpes\`
set mthrds = \`${CASEROOT}/Tools/taskmaker.pl -maxthrds\`

@ procs = \${max_tasks_per_node} / \${mthrds}

echo "ntasks = \${ntasks}"
echo "mthrds = \${mthrds}"
echo "procs = \${procs}"

# -------------------------------------------------------------------------
# Run the model
# -------------------------------------------------------------------------

set string = \`qstat -lf \$COBALT_JOBID | grep SubmitTime\`
echo "job \$COBALT_JOBID submitted: \$string" >>& \$CASEROOT/CaseStatus

set string = \`qstat -lf \$COBALT_JOBID | grep StartTime\`
echo "job \$COBALT_JOBID started: \$string" >>& \$CASEROOT/CaseStatus

set syslog_id = 0
if (\$SAVE_TIMING == 'TRUE') then

  if (-d \$SAVE_TIMING_DIR) then
    cd \$SAVE_TIMING_DIR
    if !(-d performance_archive) then
      mkdir performance_archive
      chmod 777 performance_archive
    endif
    cd performance_archive
    if !(-d \$CCSMUSER) then
      mkdir \$CCSMUSER
      chmod 775 \$CCSMUSER
    endif
    cd \$CCSMUSER
    if !(-d \$CASE) then
      mkdir \$CASE
      chmod 775 \$CASE
    endif
    cd \$CASE
    if !(-d \$LID) then
      mkdir \$LID
      chmod 775 \$LID
    endif
    cd \$LID
    if !(-d checkpoints) then
      mkdir checkpoints
      chmod 775 checkpoints
    endif

    qstat -lf > qstatf.\$LID
    qstat -lf \$COBALT_JOBID > qstatf_jobid.\$LID
    chmod a+r *

    mkdir CaseDocs.\$LID
    chmod 775 CaseDocs.\$LID
    cd CaseDocs.\$LID
    cp -p \$CASEROOT/CaseDocs/* .
    cp -p \$CASEROOT/*.run .
    cp -p \$CASEROOT/*.xml .
    chmod a+r *

    if (\$SYSLOG_N > 0) then
      touch \$RUNDIR/cesm.log.\$LID
      csh \$CASEROOT/Tools/mach_syslog \$SYSLOG_N \$COBALT_JOBID \$LID \$RUNDIR \$RUNDIR/timing/checkpoints \$SAVE_TIMING_DIR/performance_archive/\$CCSMUSER/\$CASE/\$LID/checkpoints &
      set syslog_id = \$!
    endif
  endif

endif

cd \$RUNDIR

set sdate = \`date +"%Y-%m-%d %H:%M:%S"\`
echo "runjob started \$sdate" >>& \$CASEROOT/CaseStatus
echo "\`date\` -- CSM EXECUTION BEGINS HERE"

if (\$MPILIB != "mpi-serial") then
setenv LOCARGS "--block \${COBALT_PARTNAME}"

if ( $?COBALT_CORNER ) then
   setenv LOCARGS "\${LOCARGS} --corner \${COBALT_CORNER}"
endif
if ( $?COBALT_SHAPE ) then
   setenv LOCARGS "\${LOCARGS} --shape \${COBALT_SHAPE}"
endif

runjob --label short -p \${procs} -n \${ntasks} \${LOCARGS} --envs BG_THREADLAYOUT=1 --envs OMP_STACKSIZE=32M --envs OMP_NUM_THREADS=\${mthrds} : \${EXEROOT}/cesm.exe   >&! cesm.log.\$LID

else
                                    \$EXEROOT/cesm.exe >&! cesm.log.\$LID
endif
if (\$syslog_id != 0) then
  if { kill -0 \$syslog_id } then 
    kill \$syslog_id
  endif
endif

echo "\`date\` -- CSM EXECUTION HAS FINISHED" 
set sdate = \`date +"%Y-%m-%d %H:%M:%S"\`
echo "runjob ended \$sdate" >>& \$CASEROOT/CaseStatus

if (\$SAVE_TIMING == 'TRUE') then

  if (-d \$SAVE_TIMING_DIR) then
    cd \$SAVE_TIMING_DIR
    if !(-d performance_archive) then
      mkdir performance_archive
      chmod 777 performance_archive
    endif
    cd performance_archive
    if !(-d \$CCSMUSER) then
      mkdir \$CCSMUSER
      chmod 775 \$CCSMUSER
    endif
    cd \$CCSMUSER
    if !(-d \$CASE) then
      mkdir \$CASE
      chmod 775 \$CASE
    endif
    cd \$CASE
    if !(-d \$LID) then
      mkdir \$LID
      chmod 775 \$LID
    endif
    cd \$LID

    cd \$CASEROOT

    set string = \`ls \$COBALT_JOBID*output\`
    cp -p \$string \$SAVE_TIMING_DIR/performance_archive/\$CCSMUSER/\$CASE/\$LID/\$string.\$LID
    chmod a+r \$SAVE_TIMING_DIR/performance_archive/\$CCSMUSER/\$CASE/\$LID/\$string.\$LID

    set string = \`ls \$COBALT_JOBID*cobaltlog\`
    cp -p \$string \$SAVE_TIMING_DIR/performance_archive/\$CCSMUSER/\$CASE/\$LID/\$string.\$LID
    chmod a+r \$SAVE_TIMING_DIR/performance_archive/\$CCSMUSER/\$CASE/\$LID/\$string.\$LID
  endif

endif

unsetenv COBALT_JOBID 

EOF1

#################################################################################
else if ($PHASE == set_larch) then
#################################################################################

if (-e ${CASEROOT}/${CASE}.l_archive) then
   echo ERROR: generate_batch.csh file ${CASE}.l_archive already exists in ${CASEROOT}
   exit -1
endif

# Create the archive script
touch ${CASEROOT}/${CASE}.l_archive
chmod 775 ${CASEROOT}/${CASE}.l_archive

cat >! $CASEROOT/${CASE}.l_archive << EOF1
#! /bin/csh -f
#-----------------------------------------------------------------------
# Determine necessary environment variables
#-----------------------------------------------------------------------

cd $CASEROOT 

source ./Tools/ccsm_getenv || exit -1

#----------------------------------------------
# run the long term archiver
#----------------------------------------------

cd \$DOUT_S_ROOT
$CASEROOT/Tools/lt_archive.sh -m copy_dirs_hsi
exit 0

EOF1


#################################################################################
else
#################################################################################

    echo "  PHASE setting of $PHASE is not an accepted value"
    echo "  accepted values are set_batch, set_exe and set_larch"
    exit 1

#################################################################################
endif
#################################################################################



