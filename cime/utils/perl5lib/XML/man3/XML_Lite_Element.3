.\" Automatically generated by Pod::Man version 1.02
.\" Tue Mar 18 09:37:36 2003
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Lite::Element 3"
.TH Lite::Element 3 "perl v5.6.0" "2003-01-31" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1XML:\s0:Lite::Element \- A class representing an \s-1XML\s0 element in an \s-1XML:\s0:Lite
document
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use \s-1XML:\s0:Lite;
my \f(CW$xml\fR = new \s-1XML:\s0:Lite( \-xml => 'a_file.xml' );
my \f(CW$elm\fR = \f(CW$xml\fR->elements_by_name( 'element_name' );
print \f(CW$elm\fR->get_attribute( 'attribute_name' );
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`XML::Lite::Element\*(C'\fR objects contain rudimentary methods for querying \s-1XML\s0 
elements in an \s-1XML\s0 document as parsed by \s-1XML:\s0:Lite. Usually these objects 
are returned by method calls in \s-1XML:\s0:Lite.
.SH "METHODS"
.IX Header "METHODS"
The following methods are available. All methods like 'get_name' can be 
abbeviated as 'name.'
.Ip "my \f(CW$element\fR = new \s-1XML:\s0:Lite::Element( \f(CW$owner_document\fR, \e@pointers );" 4
.IX Item "my $element = new XML::Lite::Element( $owner_document, @pointers );"
Creates a new \s-1XML:\s0:Lite::Element object from the \s-1XML:\s0:Lite object, \f(CW\*(C`$owner_document\*(C'\fR.
.Sp
Currently, you must not call this manually. You can create an object with one of 
the 'factory' methods in \s-1XML:\s0:Lite, such as \f(CW\*(C`element_by_name\*(C'\fR or \f(CW\*(C`root_element\*(C'\fR 
or with one of the \s-1XML:\s0:Lite::Element 'factory' methods below, like \f(CW\*(C`get_children\*(C'\fR.
.Ip "my \f(CW$content\fR = \f(CW$element\fR->\fIget_content()\fR" 4
.IX Item "my $content = $element->get_content()"
Returns the content of the \s-1XML\s0 element. This may include other \s-1XML\s0 tags. The
entire content is returned as a scalar.
.Ip "my \f(CW%attributes\fR = \f(CW$element\fR->\fIget_attributes()\fR" 4
.IX Item "my %attributes = $element->get_attributes()"
Returns a hash of name \- value pairs for the attributes in this element.
.Ip "my \f(CW$value\fR = \f(CW$element\fR->get_attribute( \f(CW$name\fR )" 4
.IX Item "my $value = $element->get_attribute( $name )"
Returns the value of the named attribute for this element.
.Ip "my \f(CW$name\fR = \f(CW$element\fR->\fIget_name()\fR" 4
.IX Item "my $name = $element->get_name()"
Returns the name of the element tag
.Ip "my \f(CW@children\fR = \f(CW$element\fR->\fIget_children()\fR" 4
.IX Item "my @children = $element->get_children()"
Returns a list of \s-1XML:\s0:Lite::Element objects for each element contained 
within the current element. This does not return any text or \s-1CDATA\s0 in 
the content of this element. You can parse that through the the get_content manpage 
method.
.Sp
If no child elements exist then an empty list is returned.
.Ip "my \f(CW$text\fR = \f(CW$element\fR->\fIget_text()\fR" 4
.IX Item "my $text = $element->get_text()"
Returns a scalar of the text within an element sans children elements.
This effectively takes the content of the element and strips all \s-1XML\s0
elements. All text is concatenated into a single string. White space
is preserved. \s-1CDATA\s0 elements are included without the <![CDATA[ tags.
Other entities are preserved.
.SH "VERSION"
.IX Header "VERSION"
0.14
.SH "AUTHOR"
.IX Header "AUTHOR"
Jeremy Wadsack for Wadsack-Allen Digital Group (dgsupport@wadsack-allen.com)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2001 Wadsack-Allen. All rights reserved.
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
