module test_shr_cal

  ! Tests of shr_cal_mod

  use pfunit_mod
  use shr_cal_mod
  use shr_kind_mod , only : r8 => shr_kind_r8, i4 => shr_kind_in, i8 => shr_kind_i8
  use esmf, only : ESMF_Initialize, ESMF_Finalize, ESMF_Time, ESMF_TimeSet
  use esmf, only : ESMF_CALKIND_GREGORIAN

  implicit none

  @TestCase
  type, extends(TestCase) :: TestShrCal
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestShrCal

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestShrCal), intent(inout) :: this

    call ESMF_Initialize()
  end subroutine setUp

  subroutine tearDown(this)
    class(TestShrCal), intent(inout) :: this

    call ESMF_Finalize()
  end subroutine tearDown

  ! ------------------------------------------------------------------------
  ! Tests of shr_cal_date2ymd
  ! ------------------------------------------------------------------------

  @Test
  subroutine date2ymd_int_basic(this)
    class(TestShrCal), intent(inout) :: this
    integer(i4) :: date, year, month, day

    date = 98760317
    call shr_cal_date2ymd(date, year, month, day)
    @assertEqual(9876, year)
    @assertEqual(3, month)
    @assertEqual(17, day)
  end subroutine date2ymd_int_basic

  @Test
  subroutine date2ymd_long_basic(this)
    class(TestShrCal), intent(inout) :: this
    integer(i8) :: date
    integer(i4) :: year, month, day

    date = 9876540317_i8
    call shr_cal_date2ymd(date, year, month, day)
    @assertEqual(987654, year)
    @assertEqual(3, month)
    @assertEqual(17, day)
  end subroutine date2ymd_long_basic

  ! ------------------------------------------------------------------------
  ! Tests of shr_cal_date2julian
  ! ------------------------------------------------------------------------

  @Test
  subroutine date2julian_int_basic(this)
    class(TestShrCal), intent(inout) :: this
    integer(i4) :: date, sec
    real(r8) :: jday
    real(r8) :: expected

    date = 98760317
    sec = 86400/2
    call shr_cal_date2julian(date = date, sec = sec, jday = jday, calendar = 'noleap')

    expected = 31._r8 + 28._r8 + 17._r8 + 0.5_r8
    @assertEqual(expected, jday)
  end subroutine date2julian_int_basic

  @Test
  subroutine date2julian_long_basic(this)
    class(TestShrCal), intent(inout) :: this
    integer(i8) :: date
    integer(i4) :: sec
    real(r8) :: jday
    real(r8) :: expected

    date = 9876540317_i8
    sec = 86400/2
    call shr_cal_date2julian(date = date, sec = sec, jday = jday, calendar = 'noleap')

    expected = 31._r8 + 28._r8 + 17._r8 + 0.5_r8
    @assertEqual(expected, jday)
  end subroutine date2julian_long_basic

  ! ------------------------------------------------------------------------
  ! Tests of shr_cal_ymd2date
  ! ------------------------------------------------------------------------

  @Test
  subroutine ymd2date_int_basic(this)
    class(TestShrCal), intent(inout) :: this
    integer(i4) :: date

    call shr_cal_ymd2date(year=9876, month=3, day=17, date=date)
    @assertEqual(98760317, date)
  end subroutine ymd2date_int_basic

  @Test
  subroutine ymd2date_long_basic(this)
    class(TestShrCal), intent(inout) :: this
    integer(i8) :: date

    call shr_cal_ymd2date(year=987654, month=3, day=17, date=date)
    @assertEqual(9876540317_i8, date)
  end subroutine ymd2date_long_basic

  ! ------------------------------------------------------------------------
  ! Tests of shr_cal_advDate
  ! ------------------------------------------------------------------------

  @Test
  subroutine advDate_int_1dayPlus1sec(this)
    class(TestShrCal), intent(inout) :: this
    integer(i4) :: date_in, date_out
    real(r8) :: sec_in, sec_out

    date_in = 98760317
    sec_in = 100._r8
    call shr_cal_advDate(delta = 86401._r8, units = 'seconds', &
         dateIN = date_in, secIN = sec_in, &
         dateOUT = date_out, secOUT = sec_out, &
         calendar = 'noleap')

    @assertEqual(98760318, date_out)
    @assertEqual(101._r8, sec_out, tolerance=tol)
  end subroutine advDate_int_1dayPlus1sec

  @Test
  subroutine advDate_int_minus1dayMinus1sec(this)
    class(TestShrCal), intent(inout) :: this
    integer(i4) :: date_in, date_out
    real(r8) :: sec_in, sec_out

    date_in = 98760317
    sec_in = 100._r8
    call shr_cal_advDate(delta = -86401._r8, units = 'seconds', &
         dateIN = date_in, secIN = sec_in, &
         dateOUT = date_out, secOUT = sec_out, &
         calendar = 'noleap')

    @assertEqual(98760316, date_out)
    @assertEqual(99._r8, sec_out, tolerance=tol)
  end subroutine advDate_int_minus1dayMinus1sec

  @Test
  subroutine advDate_long_1dayPlus1sec(this)
    class(TestShrCal), intent(inout) :: this
    integer(i8) :: date_in, date_out
    real(r8) :: sec_in, sec_out

    date_in = 9876540317_i8
    sec_in = 100._r8
    call shr_cal_advDate(delta = 86401._r8, units = 'seconds', &
         dateIN = date_in, secIN = sec_in, &
         dateOUT = date_out, secOUT = sec_out, &
         calendar = 'noleap')

    @assertEqual(9876540318_i8, date_out)
    @assertEqual(101._r8, sec_out, tolerance=tol)
  end subroutine advDate_long_1dayPlus1sec

  @Test
  subroutine advDate_long_minus1dayMinus1sec(this)
    class(TestShrCal), intent(inout) :: this
    integer(i8) :: date_in, date_out
    real(r8) :: sec_in, sec_out

    date_in = 9876540317_i8
    sec_in = 100._r8
    call shr_cal_advDate(delta = -86401._r8, units = 'seconds', &
         dateIN = date_in, secIN = sec_in, &
         dateOUT = date_out, secOUT = sec_out, &
         calendar = 'noleap')

    @assertEqual(9876540316_i8, date_out)
    @assertEqual(99._r8, sec_out, tolerance=tol)
  end subroutine advDate_long_minus1dayMinus1sec

  ! ------------------------------------------------------------------------
  ! Tests of shr_cal_advDateInt
  ! ------------------------------------------------------------------------

  @Test
  subroutine advDateInt_int_1dayPlus1sec(this)
    class(TestShrCal), intent(inout) :: this
    integer(i4) :: date_in, date_out
    integer(i4) :: sec_in, sec_out

    date_in = 98760317
    sec_in = 100
    call shr_cal_advDateInt(delta = 86401, units = 'seconds', &
         dateIN = date_in, secIN = sec_in, &
         dateOUT = date_out, secOUT = sec_out, &
         calendar = 'noleap')

    @assertEqual(98760318, date_out)
    @assertEqual(101, sec_out)
  end subroutine advDateInt_int_1dayPlus1sec

  @Test
  subroutine advDateInt_int_minus1dayMinus1sec(this)
    class(TestShrCal), intent(inout) :: this
    integer(i4) :: date_in, date_out
    integer(i4) :: sec_in, sec_out

    date_in = 98760317
    sec_in = 100
    call shr_cal_advDateInt(delta = -86401, units = 'seconds', &
         dateIN = date_in, secIN = sec_in, &
         dateOUT = date_out, secOUT = sec_out, &
         calendar = 'noleap')

    @assertEqual(98760316, date_out)
    @assertEqual(99, sec_out)
  end subroutine advDateInt_int_minus1dayMinus1sec

  @Test
  subroutine advDateInt_long_1dayPlus1sec(this)
    class(TestShrCal), intent(inout) :: this
    integer(i8) :: date_in, date_out
    integer(i4) :: sec_in, sec_out

    date_in = 9876540317_i8
    sec_in = 100
    call shr_cal_advDateInt(delta = 86401, units = 'seconds', &
         dateIN = date_in, secIN = sec_in, &
         dateOUT = date_out, secOUT = sec_out, &
         calendar = 'noleap')

    @assertEqual(9876540318_i8, date_out)
    @assertEqual(101, sec_out)
  end subroutine advDateInt_long_1dayPlus1sec

  @Test
  subroutine advDateInt_long_minus1dayMinus1sec(this)
    class(TestShrCal), intent(inout) :: this
    integer(i8) :: date_in, date_out
    integer(i4) :: sec_in, sec_out

    date_in = 9876540317_i8
    sec_in = 100
    call shr_cal_advDateInt(delta = -86401, units = 'seconds', &
         dateIN = date_in, secIN = sec_in, &
         dateOUT = date_out, secOUT = sec_out, &
         calendar = 'noleap')

    @assertEqual(9876540316_i8, date_out)
    @assertEqual(99, sec_out)
  end subroutine advDateInt_long_minus1dayMinus1sec

  ! ------------------------------------------------------------------------
  ! Tests of shr_cal_ymdtod2string
  ! ------------------------------------------------------------------------

  @Test
  subroutine ymdtod2string_smallYear(this)
    class(TestShrCal), intent(inout) :: this
    character(len=18) :: date_str

    call shr_cal_ymdtod2string(date_str, yy=123, mm=4, dd=5, tod=6789)
    @assertEqual('0123-04-05-06789', date_str)
  end subroutine ymdtod2string_smallYear

  @Test
  subroutine ymdtod2string_largeYear(this)
    class(TestShrCal), intent(inout) :: this
    character(len=18) :: date_str

    call shr_cal_ymdtod2string(date_str, yy=123456, mm=4, dd=5, tod=6789)
    @assertEqual('123456-04-05-06789', date_str)
  end subroutine ymdtod2string_largeYear

  @Test
  subroutine ymdtod2string_noTOD(this)
    class(TestShrCal), intent(inout) :: this
    character(len=18) :: date_str

    call shr_cal_ymdtod2string(date_str, yy=123, mm=4, dd=5)
    @assertEqual('0123-04-05', date_str)
  end subroutine ymdtod2string_noTOD

  @Test
  subroutine ymdtod2string_noDay(this)
    class(TestShrCal), intent(inout) :: this
    character(len=18) :: date_str

    call shr_cal_ymdtod2string(date_str, yy=123, mm=4)
    @assertEqual('0123-04', date_str)
  end subroutine ymdtod2string_noDay

  @Test
  subroutine ymdtod2string_noMonth(this)
    class(TestShrCal), intent(inout) :: this
    character(len=18) :: date_str

    call shr_cal_ymdtod2string(date_str, yy=123)
    @assertEqual('0123', date_str)
  end subroutine ymdtod2string_noMonth

  @Test
  subroutine ymdtod2string_yearTooLarge(this)
    class(TestShrCal), intent(inout) :: this
    character(len=18) :: date_str

    call shr_cal_ymdtod2string(date_str, yy=1234567, mm=4, dd=5)
    @assertExceptionRaised('ABORTED: shr_cal_ymdtod2string : year too large (max of 999999)')
  end subroutine ymdtod2string_yearTooLarge

  @Test
  subroutine ymdtod2string_stringTooShort(this)
    class(TestShrCal), intent(inout) :: this
    character(len=17) :: date_str

    call shr_cal_ymdtod2string(date_str, yy=123456, mm=4, dd=5, tod=6789)
    @assertExceptionRaised('ABORTED: shr_cal_ymdtod2string : output string too short')
  end subroutine ymdtod2string_stringTooShort

  @Test
  subroutine ymdtod2string_stringTooShort_noTOD(this)
    class(TestShrCal), intent(inout) :: this
    character(len=11) :: date_str

    call shr_cal_ymdtod2string(date_str, yy=123456, mm=4, dd=5)
    @assertExceptionRaised('ABORTED: shr_cal_ymdtod2string : output string too short')
  end subroutine ymdtod2string_stringTooShort_noTOD

  ! ------------------------------------------------------------------------
  ! Tests of shr_cal_datetod2string
  ! ------------------------------------------------------------------------

  @Test
  subroutine datetod2string_int_basic(this)
    class(TestShrCal), intent(inout) :: this
    character(len=18) :: date_str

    call shr_cal_datetod2string(date_str = date_str, ymd = 1230405, tod = 6789)
    @assertEqual('0123-04-05-06789', date_str)
  end subroutine datetod2string_int_basic

  @Test
  subroutine datetod2string_long_basic(this)
    class(TestShrCal), intent(inout) :: this
    character(len=18) :: date_str

    call shr_cal_datetod2string(date_str = date_str, ymd = 9876540405_i8, tod = 6789)
    @assertEqual('987654-04-05-06789', date_str)
  end subroutine datetod2string_long_basic

  ! ------------------------------------------------------------------------
  ! Tests of shr_cal_ymds2rday_offset
  ! ------------------------------------------------------------------------

  @Test
  subroutine ymds2rdayOffset_basic(this)
    class(TestShrCal), intent(inout) :: this
    type(ESMF_Time) :: etime
    real(r8) :: rdays_offset
    real(r8) :: expected

    ! Most of the current time settings here are arbitrary. However, the year and month
    ! are important.
    call ESMF_TimeSet(etime, yy=2000, mm=4, dd=15, h=1, m=5, s=30, &
         calkindflag = ESMF_CALKIND_GREGORIAN)

    call shr_cal_ymds2rday_offset(etime=etime, &
         rdays_offset    = rdays_offset, &
         years_offset    = -1, &
         months_offset   = -1, &
         days_offset     = -2, &
         seconds_offset = -21600)

    expected = -366._r8 &  ! -1 year, since year-2000 is a leap year
             -   31._r8 &  ! -1 month, since starting month is April
             -    2._r8 &  ! -2 days
             -    0.25_r8  ! -21600 seconds = -0.25 days

    @assertEqual(expected, rdays_offset, tolerance=tol)

  end subroutine ymds2rdayOffset_basic

end module test_shr_cal
