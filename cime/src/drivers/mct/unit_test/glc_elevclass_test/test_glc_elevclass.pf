module test_glc_elevclass

  ! Tests of glc_elevclass_mod

  use pfunit_mod
  use glc_elevclass_mod
  use shr_kind_mod, only : r8 => shr_kind_r8

  implicit none

  @TestCase
  type, extends(TestCase) :: TestGLCElevclass
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestGLCElevclass

contains

  subroutine setUp(this)
    class(TestGLCElevclass), intent(inout) :: this
  end subroutine setUp

  subroutine tearDown(this)
    class(TestGLCElevclass), intent(inout) :: this

    call glc_elevclass_clean()
  end subroutine tearDown

  ! ------------------------------------------------------------------------
  ! Tests of glc_elevclass_init
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_init_with_0ECs(this)
    class(TestGLCElevclass), intent(inout) :: this
    integer :: num_elevation_classes

    call glc_elevclass_init(0)

    num_elevation_classes = glc_get_num_elevation_classes()
    @assertEqual(0, num_elevation_classes)
  end subroutine test_init_with_0ECs

  @Test
  subroutine test_init_with_1EC(this)
    class(TestGLCElevclass), intent(inout) :: this
    integer :: num_elevation_classes
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(1)

    num_elevation_classes = glc_get_num_elevation_classes()
    @assertEqual(1, num_elevation_classes)
    call glc_get_elevation_class(9999._r8, elevation_class, err_code)
    @assertEqual(1, elevation_class)
  end subroutine test_init_with_1EC

  @Test
  subroutine test_init_with_10ECs(this)
    class(TestGLCElevclass), intent(inout) :: this
    integer :: num_elevation_classes
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(10)

    num_elevation_classes = glc_get_num_elevation_classes()
    @assertEqual(10, num_elevation_classes)
    call glc_get_elevation_class(9999._r8, elevation_class, err_code)
    @assertEqual(10, elevation_class)
  end subroutine test_init_with_10ECs

  ! ------------------------------------------------------------------------
  ! Tests of glc_get_elevation_class
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_glc_get_elevation_class_lowest(this)
    ! Test an elevation in the lowest elevation class
    class(TestGLCElevclass), intent(inout) :: this
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 300._r8])

    call glc_get_elevation_class(1._r8, elevation_class, err_code)
    @assertEqual(1, elevation_class)
  end subroutine test_glc_get_elevation_class_lowest

  @Test
  subroutine test_glc_get_elevation_class_mid(this)
    ! Test an elevation in a middle elevation class
    class(TestGLCElevclass), intent(inout) :: this
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 300._r8])

    call glc_get_elevation_class(150._r8, elevation_class, err_code)
    @assertEqual(2, elevation_class)
  end subroutine test_glc_get_elevation_class_mid

  @Test
  subroutine test_glc_get_elevation_class_highest(this)
    ! Test an elevation in the highest elevation class
    class(TestGLCElevclass), intent(inout) :: this
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 300._r8])

    call glc_get_elevation_class(250._r8, elevation_class, err_code)
    @assertEqual(3, elevation_class)
  end subroutine test_glc_get_elevation_class_highest


  ! Test glc_get_elevation_class error return values (one test for each possibility)

  @Test
  subroutine test_glc_get_elevation_class_err_none(this)
    class(TestGLCElevclass), intent(inout) :: this
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 300._r8])

    call glc_get_elevation_class(1._r8, elevation_class, err_code)
    @assertEqual(GLC_ELEVCLASS_ERR_NONE, err_code)
  end subroutine test_glc_get_elevation_class_err_none

  @Test
  subroutine test_glc_get_elevation_class_err_low(this)
    class(TestGLCElevclass), intent(inout) :: this
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 300._r8])

    call glc_get_elevation_class(-1._r8, elevation_class, err_code)
    @assertEqual(GLC_ELEVCLASS_ERR_TOO_LOW, err_code)
    @assertEqual(1, elevation_class)
  end subroutine test_glc_get_elevation_class_err_low

  @Test
  subroutine test_glc_get_elevation_class_err_high(this)
    class(TestGLCElevclass), intent(inout) :: this
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 300._r8])

    call glc_get_elevation_class(301._r8, elevation_class, err_code)
    @assertEqual(GLC_ELEVCLASS_ERR_TOO_HIGH, err_code)
    @assertEqual(3, elevation_class)
  end subroutine test_glc_get_elevation_class_err_high

  @Test
  subroutine test_glc_get_elevation_class_err_undefined(this)
    class(TestGLCElevclass), intent(inout) :: this
    integer :: elevation_class
    integer :: err_code

    call glc_elevclass_init(0)

    call glc_get_elevation_class(1._r8, elevation_class, err_code)
    @assertEqual(GLC_ELEVCLASS_ERR_UNDEFINED, err_code)
    @assertEqual(0, elevation_class)
  end subroutine test_glc_get_elevation_class_err_undefined

  ! ------------------------------------------------------------------------
  ! Tests of glc_mean_elevation_virtual
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_glc_mean_elevation_virtual_EC0(this)
    class(TestGLCElevclass), intent(inout) :: this
    real(r8) :: mean_elevation

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 300._r8])
    mean_elevation = glc_mean_elevation_virtual(0)
    @assertEqual(0._r8, mean_elevation)
  end subroutine test_glc_mean_elevation_virtual_EC0

  @Test
  subroutine test_glc_mean_elevation_virtual_EC_mid(this)
    ! Tests an elevation class in the middle of the range (normal case)
    class(TestGLCElevclass), intent(inout) :: this
    real(r8) :: mean_elevation

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 300._r8])
    mean_elevation = glc_mean_elevation_virtual(2)
    @assertEqual(150._r8, mean_elevation)
  end subroutine test_glc_mean_elevation_virtual_EC_mid

  @Test
  subroutine test_glc_mean_elevation_virtual_EC_top(this)
    ! Tests an elevation class at the top of the range
    class(TestGLCElevclass), intent(inout) :: this
    real(r8) :: mean_elevation

    call glc_elevclass_init(3, [0._r8, 100._r8, 200._r8, 1000._r8])
    mean_elevation = glc_mean_elevation_virtual(3)
    @assertEqual(300._r8, mean_elevation)
  end subroutine test_glc_mean_elevation_virtual_EC_top

  @Test
  subroutine test_glc_mean_elevation_virtual_EC_oneEC(this)
    ! Tests a single elevation class
    class(TestGLCElevclass), intent(inout) :: this
    real(r8) :: mean_elevation

    call glc_elevclass_init(1)
    mean_elevation = glc_mean_elevation_virtual(1)
    @assertEqual(1000._r8, mean_elevation)
  end subroutine test_glc_mean_elevation_virtual_EC_oneEC

  ! ------------------------------------------------------------------------
  ! Tests of glc_elevclass_as_string
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_glc_elevclass_as_string_0(this)
    class(TestGLCElevclass), intent(inout) :: this
    character(len=GLC_ELEVCLASS_STRLEN) :: str

    str = glc_elevclass_as_string(0)
    @assertEqual('00', trim(str))
  end subroutine test_glc_elevclass_as_string_0

  @Test
  subroutine test_glc_elevclass_as_string_1digit(this)
    class(TestGLCElevclass), intent(inout) :: this
    character(len=GLC_ELEVCLASS_STRLEN) :: str

    str = glc_elevclass_as_string(2)
    @assertEqual('02', trim(str))
  end subroutine test_glc_elevclass_as_string_1digit

  @Test
  subroutine test_glc_elevclass_as_string_2digits(this)
    class(TestGLCElevclass), intent(inout) :: this
    character(len=GLC_ELEVCLASS_STRLEN) :: str

    str = glc_elevclass_as_string(12)
    @assertEqual('12', trim(str))
  end subroutine test_glc_elevclass_as_string_2digits

  ! ------------------------------------------------------------------------
  ! Tests of glc_all_elevclass_strings
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_glc_all_elevclass_strings(this)
    class(TestGLCElevclass), intent(inout) :: this
    character(len=GLC_ELEVCLASS_STRLEN), allocatable :: elevclass_strings(:)

    call glc_elevclass_init(3)
    elevclass_strings = glc_all_elevclass_strings()

    @assertEqual(3, size(elevclass_strings))
    ! There doesn't seem to be an assertEqual method for an array of strings
    @assertEqual('01', elevclass_strings(1))
    @assertEqual('02', elevclass_strings(2))
    @assertEqual('03', elevclass_strings(3))
  end subroutine test_glc_all_elevclass_strings

  @Test
  subroutine test_glc_all_elevclass_strings_include_zero(this)
    class(TestGLCElevclass), intent(inout) :: this
    character(len=GLC_ELEVCLASS_STRLEN), allocatable :: elevclass_strings(:)

    call glc_elevclass_init(3)
    elevclass_strings = glc_all_elevclass_strings(include_zero=.true.)

    @assertEqual(4, size(elevclass_strings))
    ! There doesn't seem to be an assertEqual method for an array of strings
    @assertEqual('00', elevclass_strings(1))
    @assertEqual('01', elevclass_strings(2))
    @assertEqual('02', elevclass_strings(3))
    @assertEqual('03', elevclass_strings(4))
  end subroutine test_glc_all_elevclass_strings_include_zero
  

end module test_glc_elevclass
