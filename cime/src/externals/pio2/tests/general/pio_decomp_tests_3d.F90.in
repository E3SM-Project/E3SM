! Get a 3D column decomposition
! If force_rearrange is FALSE, the decomposition is such that
! # All even procs have VEC_HGT_SZ blocks of 
! (VEC_COL_SZ rows x VEC_ROW_SZ columns) elements
! # All odd procs have  VEC_HGT_SZ blocks of
! (VEC_COL_SZ rows x VEC_ROW_SZ + 1 columns) elements
! e.g. For VEC_ROW_SZ = 2, VEC_COL_SZ = 2, VEC_HGT_SZ = 2
! and ranks 0, 1, 2,
! e.g. 1) |(1,1,1) (1,2,1) (2,1,1) (2,2,1)|
!         |(1,1,2) (1,2,2) (2,1,2) (2,2,2)| ,
!         |(1,3,1) (1,4,1) (1,5,1) (2,3,1) (2,4,1) (2,5,1)|
!         |(1,3,2) (1,4,2) (1,5,2) (2,3,2) (2,4,2) (2,5,2)|,
!         |(1,6,1) (1,7,1) (2,6,1) (2,7,1)|
!         |(1,6,2) (1,7,2) (2,6,2) (2,7,2)|
! If force_rearrange is TRUE, the decomposition is such that,
! If possible, the even rank "exchanges" elements with the next
! higher ranked odd proc.
! e.g. For VEC_ROW_SZ = 2, VEC_COL_SZ = 2, VEC_HGT_SZ = 2
! and ranks 0, 1, 2,
! e.g. 1  |(1,3,1) (1,4,1) (1,5,1) (2,3,1) (2,4,1) (2,5,1)|
!         |(1,3,2) (1,4,2) (1,5,2) (2,3,2) (2,4,2) (2,5,2)|,
!         |(1,1,1) (1,2,1) (2,1,1) (2,2,1)|
!         |(1,1,2) (1,2,2) (2,1,2) (2,2,2)| ,
!         |(1,6,1) (1,7,1) (2,6,1) (2,7,1)|
!         |(1,6,2) (1,7,2) (2,6,2) (2,7,2)|
! This for example can be used to force rearrangement when reading
! or writing data.
SUBROUTINE get_3d_col_decomp_info(rank, sz, dims, start, count, force_rearrange)
  integer, parameter :: VEC_ROW_SZ = 2
  integer, parameter :: VEC_COL_SZ = 2
  integer, parameter :: VEC_HGT_SZ = 2
  integer, parameter :: NDIMS = 3
  integer, intent(in) :: rank
  integer, intent(in) :: sz
  integer, dimension(NDIMS), intent(out) :: dims
  integer, dimension(NDIMS), intent(out) :: start
  integer, dimension(NDIMS), intent(out) :: count
  logical, intent(in) :: force_rearrange

  logical :: is_even_rank
  integer :: num_odd_procs, num_even_procs
  integer :: iodd, ieven

  is_even_rank = .false.
  if (mod(rank, 2) == 0) then
    is_even_rank = .true.
  end if
  num_odd_procs = sz / 2
  num_even_procs = sz - num_odd_procs
  dims(1) = VEC_COL_SZ
  dims(2) = num_even_procs * VEC_ROW_SZ + num_odd_procs * (VEC_ROW_SZ + 1)
  dims(3) = VEC_HGT_SZ
  ! Number of odd and even procs before this rank
  iodd = rank / 2
  ieven = (rank + 1) / 2

  ! Rows
  start(1) = 1
  count(1) = VEC_COL_SZ

  ! Columns
  if(force_rearrange) then
    ! Make sure that we force rearrangement
    if (is_even_rank) then
      if(rank + 1 < sz) then
        ! Force rearrangement
        count(2) = VEC_ROW_SZ + 1
        start(2) = ieven * VEC_ROW_SZ + iodd * (VEC_ROW_SZ + 1) + (VEC_ROW_SZ) + 1
      else
        count(2) = VEC_ROW_SZ
        start(2) = ieven * VEC_ROW_SZ + iodd * (VEC_ROW_SZ + 1) + 1
      end if
    else
      ! For all odd procs there is an even lower ranked, rank-1, proc
      ! So force rearrangement
      count(2) = VEC_ROW_SZ
      start(2) = ieven * VEC_ROW_SZ + iodd * (VEC_ROW_SZ + 1) - (VEC_ROW_SZ) + 1
    end if
  else
    if (is_even_rank) then
      count(2) = VEC_ROW_SZ
    else
      count(2) = VEC_ROW_SZ + 1
    end if
    start(2) = ieven * VEC_ROW_SZ + iodd * (VEC_ROW_SZ + 1) + 1
  end if

  ! Height
  start(3) = 1
  count(3) = VEC_HGT_SZ
END SUBROUTINE

! Write with one decomp (to force rearrangement) and read with another (no
! rearrangement)
PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN nc_write_read_3d_col_decomp
  implicit none
  type(var_desc_t)  :: pio_var
  type(file_desc_t) :: pio_file
  integer, parameter :: NDIMS = 3
  character(len=PIO_TF_MAX_STR_LEN) :: filename
  type(io_desc_t) :: wr_iodesc, rd_iodesc
  integer, dimension(:), allocatable :: compdof
  integer, dimension(NDIMS) :: start, count
  PIO_TF_FC_DATA_TYPE, dimension(:,:,:), allocatable :: rbuf, wbuf, exp_val
  integer, dimension(NDIMS) :: dims
  integer, dimension(NDIMS) :: pio_dims
  integer :: i, j, k, tmp_idx, ierr, nrows, ncols, nhgts
  ! iotypes = valid io types
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes

  ! Set the decomposition for writing data - forcing rearrangement
  call get_3d_col_decomp_info(pio_tf_world_rank_, pio_tf_world_sz_, dims, start, count, .true.)
  nrows = count(1)
  ncols = count(2)
  nhgts = count(3)
  
  allocate(wbuf(nrows, ncols, nhgts))
  allocate(compdof(nrows * ncols * nhgts))
  do k=1,nhgts
    do j=1,ncols
      do i=1,nrows
        wbuf(i,j,k) = (start(3) - 1 + k - 1) * (dims(1) * dims(2)) +&
                      (start(2) - 1 + j - 1) * dims(1) + i
        tmp_idx = (k - 1) * (ncols * nrows) + (j - 1) * nrows + i
        compdof(tmp_idx) = int(wbuf(i,j,k))
      end do
    end do
  end do

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims, compdof, wr_iodesc)
  deallocate(compdof)

  ! Set the decomposition for reading data - different from the write decomp
  call get_3d_col_decomp_info(pio_tf_world_rank_, pio_tf_world_sz_, dims, start, count, .false.)
  nrows = count(1)
  ncols = count(2)
  nhgts = count(3)
  
  allocate(rbuf(nrows, ncols, nhgts))
  allocate(compdof(nrows * ncols * nhgts))
  allocate(exp_val(nrows, ncols, nhgts))

  do k=1,nhgts
    do j=1,ncols
      do i=1,nrows
        tmp_idx = (k - 1) * (ncols * nrows) + (j - 1) * nrows + i
        compdof(tmp_idx) =  (start(3) - 1 + k - 1) * (dims(1) * dims(2)) +&
                            (start(2) - 1 + j - 1) * dims(1) + i
        exp_val(i,j,k) = compdof(tmp_idx)
      end do
    end do
  end do

  call PIO_initdecomp(pio_tf_iosystem_, PIO_TF_DATA_TYPE, dims, compdof, rd_iodesc)
  deallocate(compdof)

  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  filename = "test_pio_decomp_simple_tests.testfile"
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing : PIO_TF_DATA_TYPE : ", iotype_descs(i)
    ierr = PIO_createfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_CLOBBER) 
    PIO_TF_CHECK_ERR(ierr, "Could not create file " // trim(filename))

    ierr = PIO_def_dim(pio_file, 'PIO_TF_test_dim_row', dims(1), pio_dims(1))
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim : " // trim(filename))

    ierr = PIO_def_dim(pio_file, 'PIO_TF_test_dim_col', dims(2), pio_dims(2))
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim : " // trim(filename))

    ierr = PIO_def_dim(pio_file, 'PIO_TF_test_dim_hgt', dims(3), pio_dims(3))
    PIO_TF_CHECK_ERR(ierr, "Failed to define a dim : " // trim(filename))

    ierr = PIO_def_var(pio_file, 'PIO_TF_test_var', PIO_TF_DATA_TYPE, pio_dims, pio_var)
    PIO_TF_CHECK_ERR(ierr, "Failed to define a var : " // trim(filename))

    ierr = PIO_enddef(pio_file)
    PIO_TF_CHECK_ERR(ierr, "Failed to end redef mode : " // trim(filename))

    ! Write the variable out
    call PIO_write_darray(pio_file, pio_var, wr_iodesc, wbuf, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to write darray : " // trim(filename))

    call PIO_syncfile(pio_file)

    call PIO_read_darray(pio_file, pio_var, rd_iodesc, rbuf, ierr)
    PIO_TF_CHECK_ERR(ierr, "Failed to read darray : " // trim(filename))

    PIO_TF_CHECK_VAL((rbuf, exp_val), "Got wrong val")

    call PIO_closefile(pio_file)
    
    call PIO_deletefile(pio_tf_iosystem_, filename);
  end do

  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

  call PIO_freedecomp(pio_tf_iosystem_, rd_iodesc)
  call PIO_freedecomp(pio_tf_iosystem_, wr_iodesc)
  deallocate(exp_val)
  deallocate(rbuf)
  deallocate(wbuf)
PIO_TF_AUTO_TEST_SUB_END nc_write_read_3d_col_decomp
