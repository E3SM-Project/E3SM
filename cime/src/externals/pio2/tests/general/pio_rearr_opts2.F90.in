MODULE pio_rearr_opts_tgv
  use pio_tutil
  character(len=PIO_TF_MAX_STR_LEN), parameter ::tgv_fname ="pio_rearr_opts2_test.nc"
  character(len=PIO_TF_MAX_STR_LEN), parameter ::tgv_var_name ="dummy_var"
  character(len=PIO_TF_MAX_STR_LEN), parameter ::tgv_dim_name ="dummy_dim"
END MODULE pio_rearr_opts_tgv

SUBROUTINE print_rearr_opts(pio_rearr_opts, ret)
  use pio_tutil
  implicit none

  type(pio_rearr_opt_t), intent(in) :: pio_rearr_opts
  integer, intent(inout) :: ret

  ret = PIO_NOERR

  PIO_TF_LOG(0,*) "PIO rearranger options :"
  if(pio_rearr_opts%comm_type == PIO_rearr_comm_p2p) then
    PIO_TF_LOG(0,*) " comm_type = PIO_rearr_comm_p2p"
  else if(pio_rearr_opts%comm_type == PIO_rearr_comm_coll) then
    PIO_TF_LOG(0,*) " comm_type = PIO_rearr_comm_coll"
  else
    PIO_TF_LOG(0,*) " comm_type = INVALID"
  end if

  if(pio_rearr_opts%fcd == PIO_rearr_comm_fc_2d_enable) then
    PIO_TF_LOG(0,*) " fcd = PIO_rearr_comm_fc_2d_enable"
  else if(pio_rearr_opts%fcd == PIO_rearr_comm_fc_1d_comp2io) then
    PIO_TF_LOG(0,*) " fcd = PIO_rearr_comm_fc_1d_comp2io"
  else if(pio_rearr_opts%fcd == PIO_rearr_comm_fc_1d_io2comp) then
    PIO_TF_LOG(0,*) " fcd = PIO_rearr_comm_fc_1d_io2comp"
  else if(pio_rearr_opts%fcd == PIO_rearr_comm_fc_2d_disable) then
    PIO_TF_LOG(0,*) " fcd = PIO_rearr_comm_fc_2d_disable"
  else
    PIO_TF_LOG(0,*) " fcd = INVALID"
  end if

  PIO_TF_LOG(0,*) " comp2io max_pend_req =", pio_rearr_opts%comm_fc_opts_comp2io%max_pend_req
  if(pio_rearr_opts%comm_fc_opts_comp2io%enable_hs) then
    PIO_TF_LOG(0,*) " comp2io enable_hs = TRUE"
  else
    PIO_TF_LOG(0,*) " comp2io enable_hs = FALSE"
  end if
  if(pio_rearr_opts%comm_fc_opts_comp2io%enable_isend) then
    PIO_TF_LOG(0,*) " comp2io enable_isend = TRUE"
  else
    PIO_TF_LOG(0,*) " comp2io enable_isend = FALSE"
  end if

  PIO_TF_LOG(0,*) " io2comp max_pend_req =", pio_rearr_opts%comm_fc_opts_io2comp%max_pend_req
  if(pio_rearr_opts%comm_fc_opts_io2comp%enable_hs) then
    PIO_TF_LOG(0,*) " io2comp enable_hs = TRUE"
  else
    PIO_TF_LOG(0,*) " io2comp enable_hs = FALSE"
  end if
  if(pio_rearr_opts%comm_fc_opts_io2comp%enable_isend) then
    PIO_TF_LOG(0,*) " io2comp enable_isend = TRUE"
  else
    PIO_TF_LOG(0,*) " io2comp enable_isend = FALSE"
  end if

END SUBROUTINE print_rearr_opts

! If force_rearrange is FALSE, the decomposition is such that
! # All even procs have VEC_LOCAL_SZ elements
! # All odd procs have VEC_LOCAL_SZ + 1 elements
! e.g. For VEC_LOCAL_SZ = 2,
! e.g. 1)    [1,2] [3,4,5] [6,7]
! e.g. 2)    [1,2] [3,4,5] [6,7] [8,9,10]
! e.g. 3)    [1,2] [3,4,5] [6,7] [8,9,10] [11,12]
! If force_rearrange is TRUE, the decomposition is such that,
! If possible, the even rank "exchanges" elements with the next
! higher ranked odd proc.
! This for example can be used to force rearrangement when reading
! or writing data.
! e.g. For VEC_LOCAL_SZ = 2,
! e.g. 1)    [3,4,5] [1,2] [6,7]
! e.g. 2)    [3,4,5] [1,2] [8,9,10] [6,7]
! e.g. 3)    [3,4,5] [1,2] [8,9,10] [6,7] [11,12]
SUBROUTINE get_1d_bc_info(rank, sz, dims, start, count, force_rearrange)
  implicit none

  integer, parameter :: VEC_LOCAL_SZ = 3
  integer, intent(in) :: rank
  integer, intent(in) :: sz
  integer, dimension(1), intent(out) :: dims
  integer, dimension(1), intent(out) :: start
  integer, dimension(1), intent(out) :: count
  logical, intent(in) :: force_rearrange

  logical :: is_even_rank
  integer :: num_odd_procs, num_even_procs
  integer :: iodd, ieven

  is_even_rank = .false.
  if (mod(rank, 2) == 0) then
    is_even_rank = .true.
  end if
  num_odd_procs = sz / 2
  num_even_procs = sz - num_odd_procs
  dims(1) = num_even_procs * VEC_LOCAL_SZ + num_odd_procs * (VEC_LOCAL_SZ + 1)
  ! Number of odd and even procs before this rank
  iodd = rank / 2
  ieven = (rank + 1) / 2
  if(force_rearrange) then
    ! Make sure that we force rearrangement
    if (is_even_rank) then
      if(rank + 1 < sz) then
        ! Force rearrangement
        count(1) = VEC_LOCAL_SZ + 1
        start(1) = ieven * VEC_LOCAL_SZ + iodd * (VEC_LOCAL_SZ + 1) + (VEC_LOCAL_SZ) + 1
      else
        count(1) = VEC_LOCAL_SZ
        start(1) = ieven * VEC_LOCAL_SZ + iodd * (VEC_LOCAL_SZ + 1) + 1
      end if
    else
      ! For all odd procs there is an even lower ranked, rank-1, proc
      ! So force rearrangement
      count(1) = VEC_LOCAL_SZ
      start(1) = ieven * VEC_LOCAL_SZ + iodd * (VEC_LOCAL_SZ + 1) - (VEC_LOCAL_SZ) + 1
    end if
  else
    if (is_even_rank) then
      count(1) = VEC_LOCAL_SZ
    else
      count(1) = VEC_LOCAL_SZ + 1
    end if
    start(1) = ieven * VEC_LOCAL_SZ + iodd * (VEC_LOCAL_SZ + 1) + 1
  end if

END SUBROUTINE

! Create a decomp that will be used by tests below
! The iodesc needs to be freed by the caller
SUBROUTINE create_decomp_and_init_buf(iodesc, wbuf, dims, ret)
  use pio_tutil
  implicit none

  type(io_desc_t), intent(out) :: iodesc
  real, dimension(:), allocatable, intent(inout) :: wbuf
  integer, dimension(1), intent(out) :: dims
  integer, intent(out) :: ret

  integer, dimension(:), allocatable :: compdof
  integer, dimension(1) :: start, count
  integer :: i

  ret = PIO_NOERR

  call get_1d_bc_info(pio_tf_world_rank_, pio_tf_world_sz_, dims, start, count, .true.)
  allocate(wbuf(count(1)))
  allocate(compdof(count(1)))
  do i=1,count(1)
    wbuf(i) = start(1) + i - 1
    compdof(i) = int(wbuf(i))
  end do

  call PIO_initdecomp(pio_tf_iosystem_, PIO_real, dims, compdof, iodesc)
  deallocate(compdof)

END SUBROUTINE

! Create file and var used in the tests below
! All details are picked from pio_rearr_opts_tgv module
SUBROUTINE create_file_and_var(iotype, ret)
  use pio_tutil
  use pio_rearr_opts_tgv
  implicit none

  integer, intent(in) :: iotype
  integer, intent(out) :: ret

  type(file_desc_t) :: pio_file
  type(var_desc_t) :: pio_var
  integer :: pio_dim
  integer, dimension(1) :: dims
  integer, dimension(1) :: start, count

  call get_1d_bc_info(pio_tf_world_rank_, pio_tf_world_sz_, dims, start, count, .true.)

  ret = PIO_createfile(pio_tf_iosystem_, pio_file, iotype, tgv_fname, PIO_CLOBBER)
  PIO_TF_CHECK_ERR(ret, "Could not create file " // trim(tgv_fname))

  ret = PIO_def_dim(pio_file, tgv_dim_name, dims(1), pio_dim)
  PIO_TF_CHECK_ERR(ret, "Failed to define dim file =" // trim(tgv_fname))

  ret = PIO_def_var(pio_file, tgv_var_name, pio_real, (/pio_dim/), pio_var)
  PIO_TF_CHECK_ERR(ret, "Failed to define var file =" // trim(tgv_fname))

  ret = PIO_enddef(pio_file)
  PIO_TF_CHECK_ERR(ret, "Failed to enddef file =" // trim(tgv_fname))

  call PIO_closefile(pio_file)

END SUBROUTINE

! Open file and inq var
! All details are picked from pio_rearr_opts_tgv module
! Note: The file is kept open so the called needs to close it
SUBROUTINE open_file_and_get_var(pio_file, iotype, pio_var, ret)
  use pio_tutil
  use pio_rearr_opts_tgv
  implicit none

  type(file_desc_t), intent(out) :: pio_file
  integer, intent(in) :: iotype
  type(var_desc_t), intent(out) :: pio_var
  integer, intent(out) :: ret

  ret = PIO_openfile(pio_tf_iosystem_, pio_file, iotype, tgv_fname, pio_write)
  PIO_TF_CHECK_ERR(ret, "Could not create file " // trim(tgv_fname))

  ret = PIO_inq_varid(pio_file, tgv_var_name, pio_var)
  PIO_TF_CHECK_ERR(ret, "Could not inq var " // trim(tgv_fname))

END SUBROUTINE

! Test all possible combinations of rearranger options
! using the pio interface to explicitly set the rearranger options
! after init.
PIO_TF_AUTO_TEST_SUB_BEGIN set_rearr_opts_and_write
  use pio_rearr_opts_tgv
  implicit none
  interface
    subroutine create_decomp_and_init_buf(iodesc, wbuf, dims, ret)
      use pio_tutil
      type(io_desc_t), intent(out) :: iodesc
      real, dimension(:), allocatable, intent(inout) :: wbuf
      integer, dimension(1), intent(out) :: dims
      integer, intent(out) :: ret
    end subroutine create_decomp_and_init_buf
  end interface 

  type(pio_rearr_opt_t) :: pio_rearr_opts

  ! Different rearranger options that are tested here
  integer, parameter :: NUM_COMM_TYPE_OPTS = 2
  integer :: comm_type_opts(NUM_COMM_TYPE_OPTS) =&
                  (/pio_rearr_comm_p2p,pio_rearr_comm_coll/)
  integer, parameter :: NUM_FCD_OPTS = 4
  integer :: fcd_opts(NUM_FCD_OPTS) = &
                  (/pio_rearr_comm_fc_2d_disable,&
                    pio_rearr_comm_fc_1d_comp2io,&
                    pio_rearr_comm_fc_1d_io2comp,&
                    pio_rearr_comm_fc_2d_enable/)
  integer :: num_fcd_opts_comm_type
  integer, parameter :: NUM_ENABLE_HS_OPTS = 2
  logical :: enable_hs_opts(NUM_ENABLE_HS_OPTS) = (/.true.,.false./)
  integer :: num_enable_hs_opts_comp2io, num_enable_hs_opts_io2comp
  integer, parameter :: NUM_ENABLE_ISEND_OPTS = 2
  logical :: enable_isend_opts(NUM_ENABLE_ISEND_OPTS) = (/.true.,.false./)
  integer :: num_enable_isend_opts_comp2io, num_enable_isend_opts_io2comp
  integer, parameter :: NUM_MAX_PEND_REQ_OPTS = 3
  integer :: max_pend_req_opts(NUM_MAX_PEND_REQ_OPTS) = &
                  (/pio_rearr_comm_unlimited_pend_req, 1, 2/)
  integer :: num_max_pend_req_opts_comp2io, num_max_pend_req_opts_io2comp

  integer ::  cur_comm_type_opt, cur_fcd_opt, cur_enable_hs_c2i, &
              cur_enable_isend_c2i, cur_max_pend_req_c2i, &
              cur_enable_hs_i2c, cur_enable_isend_i2c, cur_max_pend_req_i2c

  type(file_desc_t) :: pio_file
  type(io_desc_t) :: iodesc
  type(var_desc_t) :: pio_var
  integer, dimension(1) :: dims

  real, dimension(:), allocatable :: rbuf, wbuf

  ! iotypes = valid io types
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes
  integer :: ret, i

  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing : ", iotype_descs(i)
    ! Create the file and decomp 
    call create_file_and_var(iotypes(i), ret)
    PIO_TF_CHECK_ERR(ret, "Creating file/decomp/var reqd for test failed :" // trim(tgv_fname))

    call open_file_and_get_var(pio_file, iotypes(i), pio_var, ret)
    PIO_TF_CHECK_ERR(ret, "Creating file/decomp/var reqd for test failed :" // trim(tgv_fname))

    ! Test all combinations of these flow control parameters
    do cur_comm_type_opt=1,NUM_COMM_TYPE_OPTS
      pio_rearr_opts%comm_type = comm_type_opts(cur_comm_type_opt)
      if(pio_rearr_opts%comm_type == pio_rearr_comm_coll) then
        ! For coll we only test pio_rearr_comm_fc_2d_disable
        num_fcd_opts_comm_type = 1
      else if(pio_rearr_opts%comm_type == pio_rearr_comm_p2p) then
        ! for p2p we test all possible combinations
        num_fcd_opts_comm_type = NUM_FCD_OPTS
      else
        PIO_TF_ERROR("Unexpected comm type")
      end if
      do cur_fcd_opt=1,num_fcd_opts_comm_type
        pio_rearr_opts%fcd = fcd_opts(cur_fcd_opt)
        if(pio_rearr_opts%fcd == pio_rearr_comm_fc_2d_enable) then
          num_enable_hs_opts_comp2io = NUM_ENABLE_HS_OPTS
          num_enable_hs_opts_io2comp = NUM_ENABLE_HS_OPTS
          num_enable_isend_opts_comp2io = NUM_ENABLE_ISEND_OPTS
          num_enable_isend_opts_io2comp = NUM_ENABLE_ISEND_OPTS
          num_max_pend_req_opts_comp2io = NUM_MAX_PEND_REQ_OPTS
          num_max_pend_req_opts_io2comp = NUM_MAX_PEND_REQ_OPTS
        else if(pio_rearr_opts%fcd == pio_rearr_comm_fc_1d_comp2io) then
          ! Only test different rearr opts in comp2io direction
          num_enable_hs_opts_comp2io = NUM_ENABLE_HS_OPTS
          num_enable_hs_opts_io2comp = 1
          num_enable_isend_opts_comp2io = NUM_ENABLE_ISEND_OPTS
          num_enable_isend_opts_io2comp = 1
          num_max_pend_req_opts_comp2io = NUM_MAX_PEND_REQ_OPTS
          num_max_pend_req_opts_io2comp = 1
        else if(pio_rearr_opts%fcd == pio_rearr_comm_fc_1d_io2comp) then
          ! Only test different rearr opts in io2comp direction
          num_enable_hs_opts_comp2io = 1
          num_enable_hs_opts_io2comp = NUM_ENABLE_HS_OPTS
          num_enable_isend_opts_comp2io = 1
          num_enable_isend_opts_io2comp = NUM_ENABLE_ISEND_OPTS
          num_max_pend_req_opts_comp2io = 1
          num_max_pend_req_opts_io2comp = NUM_MAX_PEND_REQ_OPTS
        else if(pio_rearr_opts%fcd == pio_rearr_comm_fc_2d_disable) then
          ! Just test one default combination
          num_enable_hs_opts_comp2io = 1
          num_enable_hs_opts_io2comp = 1
          num_enable_isend_opts_comp2io = 1
          num_enable_isend_opts_io2comp = 1
          num_max_pend_req_opts_comp2io = 1
          num_max_pend_req_opts_io2comp = 1
        else
          PIO_TF_ERROR("Unexpected flow control option")
        end if
        do cur_enable_hs_c2i=1,num_enable_hs_opts_comp2io
          pio_rearr_opts%comm_fc_opts_comp2io%enable_hs = &
                enable_hs_opts(cur_enable_hs_c2i)

          do cur_enable_isend_c2i=1,num_enable_isend_opts_comp2io
            pio_rearr_opts%comm_fc_opts_comp2io%enable_isend = &
                  enable_isend_opts(cur_enable_isend_c2i)

            do cur_max_pend_req_c2i=1,num_max_pend_req_opts_comp2io
              pio_rearr_opts%comm_fc_opts_comp2io%max_pend_req = &
                  max_pend_req_opts(cur_max_pend_req_c2i)

              do cur_enable_hs_i2c=1,num_enable_hs_opts_io2comp
                pio_rearr_opts%comm_fc_opts_io2comp%enable_hs =&
                  enable_hs_opts(cur_enable_hs_i2c)
              
                do cur_enable_isend_i2c=1,num_enable_isend_opts_io2comp
                  pio_rearr_opts%comm_fc_opts_io2comp%enable_isend =&
                    enable_isend_opts(cur_enable_isend_i2c)

                  do cur_max_pend_req_i2c=1,num_max_pend_req_opts_io2comp
                    pio_rearr_opts%comm_fc_opts_io2comp%max_pend_req =&
                      max_pend_req_opts(cur_max_pend_req_i2c)

                    call print_rearr_opts(pio_rearr_opts, ret)
                    ! Ignoring return value - just printing for info

                    ! Set the rearranger options
                    ! rearr_opt_t descributes logicals as logical(kind=c_bool)
                    ! but pio_set_rearr_opts() expects regular logicals, hence
                    ! explicit type cast is reqd for logical params
                    ret = PIO_set_rearr_opts(pio_tf_iosystem_,&
                            pio_rearr_opts%comm_type,&
                            pio_rearr_opts%fcd,&
                            logical(pio_rearr_opts%comm_fc_opts_comp2io%enable_hs),&
                            logical(pio_rearr_opts%comm_fc_opts_comp2io%enable_isend),&
                            pio_rearr_opts%comm_fc_opts_comp2io%max_pend_req,&
                            logical(pio_rearr_opts%comm_fc_opts_io2comp%enable_hs),&
                            logical(pio_rearr_opts%comm_fc_opts_io2comp%enable_isend),&
                            pio_rearr_opts%comm_fc_opts_io2comp%max_pend_req)
                    PIO_TF_CHECK_ERR(ret, "Setting rearr opts failed fname="//trim(tgv_fname))

                    call create_decomp_and_init_buf(iodesc, wbuf, dims, ret)
                    PIO_TF_CHECK_ERR(ret, "Creating decomp failed")

                    allocate(rbuf(size(wbuf)))
                    rbuf = 0

                    call PIO_write_darray(pio_file, pio_var, iodesc, wbuf, ret)
                    PIO_TF_CHECK_ERR(ret, "Writing var failed fname="//trim(tgv_fname))

                    call PIO_syncfile(pio_file)

                    call PIO_read_darray(pio_file, pio_var, iodesc, rbuf, ret)
                    PIO_TF_CHECK_ERR(ret, "Reading var failed fname="//trim(tgv_fname))

                    PIO_TF_CHECK_VAL((rbuf, wbuf), "Got wrong val")

                    call PIO_freedecomp(pio_tf_iosystem_, iodesc)

                    deallocate(rbuf)
                    if(allocated(wbuf)) then
                      deallocate(wbuf)
                    end if

                  end do ! cur_max_pend_req_i2c
                end do ! cur_enable_isend_i2c
              end do ! cur_enable_hs_i2c
            end do ! cur_max_pend_req_c2i    
          end do ! cur_enable_isend_c2i
        end do ! cur_enable_hs_c2i
      end do ! cur_fcd_opt
    end do ! cur_comm_type_opt

    call PIO_closefile(pio_file)
    call PIO_deletefile(pio_tf_iosystem_, trim(tgv_fname))
  end do ! iotypes

  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

PIO_TF_AUTO_TEST_SUB_END set_rearr_opts_and_write
