#define __PIO_FILE__ "pionfget_mod.F90"
!>
!! @file
!! @brief Read Routines for non-decomposed NetCDF data.
!<
!>
!! @defgroup PIO_get_var Read Non-Decomposed Data
!! Reads non-decomposed data from a NetCDF file in Fortran.  The
!! get_var interface is provided as a simplified interface to read
!! variables from a NetCDF format file. The variable is read on the
!! root IO task and broadcast in its entirety to all tasks.
!<
module pionfget_mod
  use iso_c_binding
#ifdef TIMING
  use perf_mod, only : t_startf, t_stopf      ! _EXTERNAL
#endif
  use pio_kinds, only: i4,r4,r8
  use pio_types, only : file_desc_t, var_desc_t
  use pio_support, only : replace_c_null
  implicit none
  private
  public :: get_var
  interface get_var
     module procedure get_var_{DIMS}d_{TYPE}, get_var_vdesc_{DIMS}d_{TYPE}
     !  DIMS 1,2,3,4,5
     module procedure get_vara_{DIMS}d_{TYPE}, get_vara_vdesc_{DIMS}d_{TYPE}
     module procedure get_var1_{TYPE}, get_var1_vdesc_{TYPE}
  end interface

 character(len=*), parameter :: modName='pionfget_mod'

 interface
    integer(C_INT) function PIOc_get_var_text (ncid, varid, ival) &
         bind(C,name="PIOc_get_var_text")
      use iso_c_binding
      integer(C_INT), value :: ncid
      integer(C_INT), value :: varid
      character(C_CHAR) :: ival(*)
    end function PIOc_get_var_text
 end interface
 interface
    integer(C_INT) function PIOc_get_var_int (ncid, varid, ival) &
         bind(C,name="PIOc_get_var_int")
      use iso_c_binding
      integer(C_INT), value :: ncid
      integer(C_INT), value :: varid
      integer(C_INT) :: ival(*)
    end function PIOc_get_var_int
 end interface
 interface
    integer(C_INT) function PIOc_get_var_float (ncid, varid, ival) &
         bind(C,name="PIOc_get_var_float")
      use iso_c_binding
      integer(C_INT), value :: ncid
      integer(C_INT), value :: varid
      real(C_float) :: ival(*)
    end function PIOc_get_var_float
 end interface
 interface
    integer(C_INT) function PIOc_get_var_double (ncid, varid, ival) &
         bind(C,name="PIOc_get_var_double")
      use iso_c_binding
      integer(C_INT), value :: ncid
      integer(C_INT), value :: varid
      real(C_DOUBLE) :: ival(*)
    end function PIOc_get_var_double
 end interface

 interface
    integer(C_INT) function PIOc_get_vara_int (ncid, varid, start, count, ival) &
         bind(C,name="PIOc_get_vara_int")
      use iso_c_binding
      integer(C_INT), value :: ncid
      integer(C_INT), value :: varid
      integer(C_SIZE_T)  :: start(*)
      integer(C_SIZE_T)  :: count(*)
      integer(C_INT)  :: ival(*)
    end function PIOc_get_vara_int
 end interface
 interface
    integer(C_INT) function PIOc_get_vara_float (ncid, varid, start, count, ival) &
         bind(C,name="PIOc_get_vara_float")
      use iso_c_binding
      integer(C_INT), value :: ncid
      integer(C_INT), value :: varid
      integer(C_SIZE_T)  :: start(*)
      integer(C_SIZE_T)  :: count(*)
      real(C_FLOAT)  :: ival(*)
    end function PIOc_get_vara_float
 end interface
 interface
    integer(C_INT) function PIOc_get_vara_double (ncid, varid, start, count, ival) &
         bind(C,name="PIOc_get_vara_double")
      use iso_c_binding
      integer(C_INT), value :: ncid
      integer(C_INT), value :: varid
      integer(C_SIZE_T)  :: start(*)
      integer(C_SIZE_T)  :: count(*)
      real(C_DOUBLE)  :: ival(*)
    end function PIOc_get_vara_double
 end interface
 interface
    integer(C_INT) function PIOc_get_vara_text (ncid, varid, start, count, ival) &
         bind(C,name="PIOc_get_vara_text")
      use iso_c_binding
      integer(C_INT), value :: ncid
      integer(C_INT), value :: varid
      integer(C_SIZE_T)  :: start(*)
      integer(C_SIZE_T)  :: count(*)
      character(C_CHAR)  :: ival(*)
    end function PIOc_get_vara_text
 end interface
CONTAINS

!>
!! @public
!! @ingroup PIO_get_var
!! @brief Reads non-decomposed fields from a NetCDF file
!! @details
!! @param File @ref file_desc_t
!! @param varid : The netcdf variable identifier
!! @param index :  a multidimensional index that specifies which value to get
!! @param ival : The value for the netcdf metadata
!! @retval ierr @ref error_return
!<
  integer function get_var1_{TYPE} (File,varid, index, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid, index(:)
    {VTYPE}, intent(out) :: ival


    ierr = get_var1_id_{TYPE} (file%fh, varid, index, ival)

  end function get_var1_{TYPE}
! TYPE int,real,double
  integer function get_var1_id_{TYPE} (ncid,varid, index, ival) result(ierr)
    integer, intent(in) :: ncid
    integer, intent(in) :: varid, index(:)
    {VTYPE}, intent(out) :: ival
    integer(C_SIZE_T), allocatable :: cindex(:)
    integer :: i, clen
    interface
       integer(C_INT) function PIOc_get_var1_{NCTYPE} (ncid, varid, index, ival) &
            bind(C,name="PIOc_get_var1_{NCTYPE}")
         use iso_c_binding
         integer(C_INT), value :: ncid
         integer(C_INT), value :: varid
         integer(C_SIZE_T) :: index(*)
         {CTYPE} :: ival
       end function PIOc_get_var1_{NCTYPE}
    end interface

#ifdef TIMING
    call t_startf("PIO:get_var1_{TYPE}")
#endif
    clen = size(index)
    allocate(cindex(clen))
    do i=1,clen
       cindex(i)=index(clen-i+1)-1
    end do

    ierr = PIOc_get_var1_{NCTYPE} (ncid, varid-1, cindex, ival)
    deallocate(cindex)
#ifdef TIMING
    call t_stopf("PIO:get_var1_{TYPE}")
#endif
  end function get_var1_id_{TYPE}



  integer function get_var1_id_text_internal(ncid,varid, index, vlen, ival) result(ierr)
    integer, intent(in) :: ncid
    integer, intent(in) :: varid, index(:)
    integer,intent(in) :: vlen
    character, intent(out) :: ival(vlen)

    integer(C_SIZE_T), allocatable :: cindex(:)
    integer(C_SIZE_T), allocatable :: count(:)
    integer :: i, clen
!!$    interface
!!$       integer(C_INT) function PIOc_get_var1_text (ncid, varid, index, ival) &
!!$            bind(C,name="PIOc_get_var1_text")
!!$         use iso_c_binding
!!$         integer(C_INT), value :: ncid
!!$         integer(C_INT), value :: varid
!!$         integer(C_SIZE_T) :: index(*)
!!$         character :: ival(*)
!!$       end function PIOc_get_var1_text
!!$    end interface

#ifdef TIMING
    call t_startf("PIO:get_var1_text")
#endif
    clen = size(index)
    allocate(cindex(clen))
    do i=1,clen
       cindex(i)=index(clen-i+1)-1
    end do
    allocate(count(clen))
    count=1
    count(clen) = vlen
    ierr = PIOc_get_vara_text (ncid, varid-1, cindex, count, ival)
    deallocate(cindex)
    deallocate(count)
#ifdef TIMING
    call t_stopf("PIO:get_var1_text")
#endif
  end function get_var1_id_text_internal

  integer function get_var1_id_text (ncid,varid, index, ival) result(ierr)
    integer, intent(in) :: ncid
    integer, intent(in) :: varid, index(:)
    character(len=*), intent(out) :: ival
    character, allocatable :: cval(:)
    integer :: clen, i

    clen = len(ival)
    allocate(cval(clen))
    cval=C_NULL_CHAR
    ival=''
    ierr = get_var1_id_text_internal(ncid,varid,index,clen,cval)
    i=1
    do while(i<=clen )
       if(cval(i) == C_NULL_CHAR ) exit
       ival(i:i) = cval(i)
       i=i+1
    enddo
   deallocate(cval)
!   print *,__FILE__,__LINE__,trim(ival)


  end function get_var1_id_text



!>
!! @public
!! @ingroup PIO_get_var
!! @brief Writes an netcdf attribute to a file
!! @details
!! @param File @ref file_desc_t
!! @param vardesc @ref var_desc_t
!! @param index :  a multidimensional index that specifies which value to get
!! @param ival : The value for the netcdf metadata
!! @retval ierr @ref error_return
!<
  integer function get_var1_vdesc_{TYPE} (File,vardesc, index, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    type(var_desc_t), intent(in) :: vardesc
    integer, intent(in) :: index(:)
    {VTYPE}, intent(out) :: ival

    character(len=*), parameter :: subName=modName//'::get_var1_vdesc_{TYPE}'

    ierr = get_var1_{TYPE} (File, vardesc%varid, index, ival)

  end function get_var1_vdesc_{TYPE}


! TYPE int,real,double
! DIMS 1,2,3,4,5
!>
!! @public
!! @ingroup PIO_get_var
!! @brief Writes an netcdf attribute to a file
!! @details
!! @param File @ref file_desc_t
!! @param varid : The netcdf variable identifier
!! @param start : A vector of size_t integers specifying the index in
!!   the variable where the first of the data values will be read. The
!!   indices are relative to 0, so for example, the first data value of
!!   a variable would have index (0, 0, ... , 0). The length of start
!!   must be the same as the number of dimensions of the specified
!!   variable. The elements of start correspond, in order, to the
!!   variable's dimensions. Hence, if the variable is a record variable,
!!   the first index would correspond to the starting record number for
!!   reading the data values.
!! @param count : A vector of size_t integers specifying the edge
!!   lengths along each dimension of the block of data values to be
!!   read. To read a single value, for example, specify count as (1, 1,
!!   ... , 1). The length of count is the number of dimensions of the
!!   specified variable. The elements of count correspond, in order, to
!!   the variable's dimensions. Hence, if the variable is a record
!!   variable, the first element of count corresponds to a count of the
!!   number of records to read.
!! Note: setting any element of the count array to zero causes the function to exit without error, and without doing anything.
!! @param ival : The value for the netcdf metadata
!! @retval ierr @ref error_return
!<
  integer function get_vara_{DIMS}d_{TYPE} (File,varid, start, count, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid, start(:), count(:)
    {VTYPE}, intent(out) :: ival{DIMSTR}

    ierr = get_vara_{TYPE}_internal (File%fh, varid, start, count, ival)

  end function get_vara_{DIMS}d_{TYPE}

! DIMS 1,2,3,4,5
  integer function get_vara_{DIMS}d_text (File,varid, start, count, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid, start(:), count(:)
    character(len=*), intent(out) :: ival{DIMSTR}
    ival = ' '
    ierr = get_vara_text_internal (File%fh, varid, start, count, size(ival), ival)

  end function get_vara_{DIMS}d_text

! DIMS 1,2,3,4,5
!>
!! @public
!! @ingroup PIO_get_var
!! @brief Writes an netcdf attribute to a file
!! @details
!! @param File @ref file_desc_t
!! @param vardesc @ref var_desc_t
!! @param start : A vector of size_t integers specifying the index in
!!   the variable where the first of the data values will be read. The
!!   indices are relative to 0, so for example, the first data value of
!!   a variable would have index (0, 0, ... , 0). The length of start
!!   must be the same as the number of dimensions of the specified
!!   variable. The elements of start correspond, in order, to the
!!   variable's dimensions. Hence, if the variable is a record variable,
!!   the first index would correspond to the starting record number for
!!   reading the data values.
!! @param count : A vector of size_t integers specifying the edge
!!   lengths along each dimension of the block of data values to be
!!   read. To read a single value, for example, specify count as (1, 1,
!!   ... , 1). The length of count is the number of dimensions of the
!!   specified variable. The elements of count correspond, in order, to
!!   the variable's dimensions. Hence, if the variable is a record
!!   variable, the first element of count corresponds to a count of the
!!   number of records to read.
!! Note: setting any element of the count array to zero causes the function to exit without error, and without doing anything.
!! @param ival : The value for the netcdf metadata
!! @retval ierr @ref error_return
!<
  integer function get_vara_vdesc_{DIMS}d_{TYPE} (File,vardesc, start, count, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    type(var_desc_t), intent(in) :: vardesc
    integer, intent(in) :: start(:), count(:)
    {VTYPE}, intent(out) :: ival{DIMSTR}

    character(len=*), parameter :: subName=modName//'::get_vara_vdesc_{DIMS}d_{TYPE}'

    ierr = get_vara_{DIMS}d_{TYPE} (File, vardesc%varid, start, count, ival)

  end function get_vara_vdesc_{DIMS}d_{TYPE}

!>
!! @public
!! @ingroup PIO_get_var
!! @brief Writes an netcdf attribute to a file
!! @details
!! @param File @ref file_desc_t
!! @param varid : The netcdf variable identifier
!! @param ival : The value for the netcdf metadata
!! @retval ierr @ref error_return
!<
  integer function get_var_0d_text (File,varid, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid
    character(len=*), intent(out) :: ival


    ival =C_NULL_CHAR
    ierr = PIOc_get_var_text(File%fh, varid-1, ival)
    call replace_c_null(ival)
!    print *,__FILE__,__LINE__,trim(ival)
  end function Get_var_0d_text


! TYPE int,real,double
! DIMS 0
  integer function get_var_0d_{TYPE} (File,varid, ival) result(ierr)
    use iso_c_binding
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid
    {VTYPE}, intent(out) :: ival
    {VTYPE}  :: aival(1)


    ierr = PIOc_get_var_{NCTYPE} (File%fh, varid-1, aival)
    ival = aival(1)

  end function Get_var_0d_{TYPE}

! DIMS 1,2,3,4,5
  integer function get_var_{DIMS}d_text (File,varid, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid
    character(len=*), intent(out) :: ival{DIMSTR}
    ival = ' '
    ierr = get_var_text_internal(File%fh, varid, size(ival), ival)

  end function get_var_{DIMS}d_text

  integer function get_var_text_internal (ncid,varid, nstrs, ival) result(ierr)
    integer, intent(in) :: ncid
    integer, intent(in) :: varid
    integer, intent(in) :: nstrs
    character(len=*), intent(out) :: ival(*)
    integer :: j

    ierr = PIOc_get_var_text(ncid, varid-1, ival)
    do j=1,nstrs
       call replace_c_null(ival(j))
    end do

  end function get_var_text_internal

! TYPE int,real,double
  integer function get_var_{TYPE}_internal  (ncid,varid, ival) result(ierr)
    integer, intent(in) :: ncid
    integer, intent(in) :: varid
    {VTYPE}, intent(out), target :: ival(*)

    ierr = PIOc_get_var_{NCTYPE} (ncid, varid-1, ival)

  end function get_var_{TYPE}_internal

! TYPE int,real,double
  integer function get_vara_{TYPE}_internal  (ncid,varid, start, count, ival) result(ierr)
    use pio_nf, only : pio_inq_varndims
    integer, intent(in) :: ncid
    integer, intent(in) :: varid
    integer, intent(in) :: start(:)
    integer, intent(in) :: count(:)
    {VTYPE}, target, intent(out) :: ival(*)
    integer(C_SIZE_T), allocatable :: cstart(:), ccount(:)
    integer :: i, ndims

    ierr = pio_inq_varndims(ncid,varid, ndims)
    allocate(cstart(ndims),ccount(ndims))
    do i=1,ndims
       cstart(i) = start(ndims-i+1)-1
       ccount(i) = count(ndims-i+1)
    enddo

    ierr = PIOc_get_vara_{NCTYPE} (ncid, varid-1, cstart, ccount, ival)
    deallocate(cstart, ccount)

  end function get_vara_{TYPE}_internal

  integer function get_vara_text_internal  (ncid,varid, start, count, nstrs, ival) result(ierr)
    use pio_nf, only : pio_inq_varndims
    integer, intent(in) :: ncid
    integer, intent(in) :: varid
    integer, intent(in) :: start(:)
    integer, intent(in) :: count(:)
    integer, intent(in) :: nstrs
    character(len=*), intent(out) :: ival(*)
    integer :: j
    integer(C_SIZE_T), allocatable :: cstart(:), ccount(:)
    integer :: i, ndims

    ierr = pio_inq_varndims(ncid,varid, ndims)
    allocate(cstart(ndims),ccount(ndims))
    do i=1,ndims
       cstart(i) = start(ndims-i+1)-1
       ccount(i) = count(ndims-i+1)
    enddo

    ierr = PIOc_get_vara_text (ncid, varid-1, cstart, ccount, ival)
    do j=1,nstrs
       call replace_c_null(ival(j),ccount(ndims))
    end do
    deallocate(ccount, cstart)
  end function get_vara_text_internal

! TYPE int,real,double
! DIMS 1,2,3,4,5
  integer function get_var_{DIMS}d_{TYPE} (File,varid, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    integer, intent(in) :: varid
    {VTYPE}, intent(out) :: ival{DIMSTR}

    ierr = get_var_{TYPE}_internal(File%fh, varid, ival)

  end function get_var_{DIMS}d_{TYPE}


!>
!! @public
!! @ingroup PIO_get_var
!! @brief Writes an netcdf attribute to a file
!! @details
!! @param File @ref file_desc_t
!! @param vardesc @ref var_desc_t
!! @param ival : The value for the netcdf metadata
!! @retval ierr @ref error_return
!<
  integer function get_var_vdesc_{DIMS}d_{TYPE} (File,vardesc, ival) result(ierr)
    type (File_desc_t), intent(in) :: File
    type(var_desc_t), intent(in) :: vardesc
    {VTYPE}, intent(out) :: ival{DIMSTR}

    ierr = get_var_{DIMS}d_{TYPE} (File, vardesc%varid, ival)

  end function get_var_vdesc_{DIMS}d_{TYPE}
end module pionfget_mod
