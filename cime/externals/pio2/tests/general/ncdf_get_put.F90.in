PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN test_put_1dval
  Implicit none
  type(file_desc_t) :: pio_file
  character(len=PIO_TF_MAX_STR_LEN) :: filename
  type(var_desc_t)  :: pio_var, pio_cvar
  integer :: pio_dim
  integer, parameter :: DIM_LEN = 100
  PIO_TF_FC_DATA_TYPE, dimension(DIM_LEN) :: val
  CHARACTER(len=DIM_LEN) :: cval
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes
  integer :: i, ret
  
  val = pio_tf_world_sz_
  cval = "DUMMY_STRING"
  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  filename = "test_pio_ncdf_get_put.testfile"
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing type :", iotype_descs(i)
    ret = PIO_createfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_CLOBBER)
    PIO_TF_CHECK_ERR(ret, "Failed to open:" // trim(filename))

    ! Since file is just created no need to enter redef
    ret = PIO_def_dim(pio_file, 'dummy_dim_put_val', DIM_LEN, pio_dim)
    PIO_TF_CHECK_ERR(ret, "Failed to define dim:" // trim(filename))

    ret = PIO_def_var(pio_file, 'dummy_var_put_val', PIO_TF_DATA_TYPE, (/pio_dim/), pio_var)
    PIO_TF_CHECK_ERR(ret, "Failed to define var:" // trim(filename))

    ret = PIO_def_var(pio_file, 'dummy_var_put_cval', PIO_char, (/pio_dim/), pio_cvar)
    PIO_TF_CHECK_ERR(ret, "Failed to define char var:" // trim(filename))

    ret = PIO_put_att(pio_file, pio_var, 'dummy_att_put_val', val);
    PIO_TF_CHECK_ERR(ret, "Failed to put attribute:" // trim(filename))

    ret = PIO_put_att(pio_file, pio_cvar, 'dummy_att_put_cval', cval);
    PIO_TF_CHECK_ERR(ret, "Failed to put char attribute:" // trim(filename))

    ret = PIO_enddef(pio_file)
    PIO_TF_CHECK_ERR(ret, "Failed to enddef:" // trim(filename))

    call PIO_closefile(pio_file)
    call PIO_deletefile(pio_tf_iosystem_, filename);
  end do
  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

PIO_TF_AUTO_TEST_SUB_END test_put_1dval

PIO_TF_TEMPLATE<PIO_TF_PREDEF_TYPENAME PIO_TF_DATA_TYPE, PIO_TF_PREDEF_TYPENAME PIO_TF_FC_DATA_TYPE>
PIO_TF_AUTO_TEST_SUB_BEGIN test_put_get_1dval
  Implicit none
  type(file_desc_t) :: pio_file
  character(len=PIO_TF_MAX_STR_LEN) :: filename
  type(var_desc_t)  :: pio_var, pio_cvar
  integer :: pio_dim
  integer, parameter :: DIM_LEN = 100
  PIO_TF_FC_DATA_TYPE, dimension(DIM_LEN) :: pval, gval
  PIO_TF_FC_DATA_TYPE :: init_val
  CHARACTER(len=DIM_LEN) :: pcval, gcval
  integer, dimension(:), allocatable :: iotypes
  character(len=PIO_TF_MAX_STR_LEN), dimension(:), allocatable :: iotype_descs
  integer :: num_iotypes
  integer :: i, ret
  
  init_val = pio_tf_world_sz_

  pval = init_val
  pcval = "DUMMY_STRING"
  num_iotypes = 0
  call PIO_TF_Get_nc_iotypes(iotypes, iotype_descs, num_iotypes)
  filename = "test_pio_ncdf_get_put.testfile"
  do i=1,num_iotypes
    PIO_TF_LOG(0,*) "Testing type :", iotype_descs(i)
    ret = PIO_createfile(pio_tf_iosystem_, pio_file, iotypes(i), filename, PIO_CLOBBER)
    PIO_TF_CHECK_ERR(ret, "Failed to open:" // trim(filename))

    ! Since file is just created no need to enter redef
    ret = PIO_def_dim(pio_file, 'dummy_dim', DIM_LEN, pio_dim)
    PIO_TF_CHECK_ERR(ret, "Failed to define dim:" // trim(filename))

    ret = PIO_def_var(pio_file, 'dummy_val', PIO_TF_DATA_TYPE, (/pio_dim/), pio_var)
    PIO_TF_CHECK_ERR(ret, "Failed to define var:" // trim(filename))

    ret = PIO_def_var(pio_file, 'dummy_cval', PIO_char, (/pio_dim/), pio_cvar)
    PIO_TF_CHECK_ERR(ret, "Failed to define char var:" // trim(filename))

    ret = PIO_put_att(pio_file, pio_var, 'dummy_att_val', pval);
    PIO_TF_CHECK_ERR(ret, "Failed to put attribute:" // trim(filename))

    ret = PIO_put_att(pio_file, pio_cvar, 'dummy_att_cval', pcval);
    PIO_TF_CHECK_ERR(ret, "Failed to put char attribute:" // trim(filename))

    ret = PIO_enddef(pio_file)
    PIO_TF_CHECK_ERR(ret, "Failed to enddef:" // trim(filename))

    ret = PIO_get_att(pio_file, pio_var, 'dummy_att_val', gval);
    PIO_TF_CHECK_ERR(ret, "Failed to get attribute:" // trim(filename))

    PIO_TF_CHECK_VAL((gval, init_val), "Got wrong value")

    ! FIXME: Check the values are correct
    ret = PIO_get_att(pio_file, pio_cvar, 'dummy_att_cval', gcval);
    PIO_TF_CHECK_ERR(ret, "Failed to get attribute:" // trim(filename))

    call PIO_closefile(pio_file)
    call PIO_deletefile(pio_tf_iosystem_, filename);
  end do
  if(allocated(iotypes)) then
    deallocate(iotypes)
    deallocate(iotype_descs)
  end if

PIO_TF_AUTO_TEST_SUB_END test_put_get_1dval

