#### special ordered sets
#### Atm
#let ntasksrestrict := CPUS/2;
#let maxtasks := (Nlat/3)*Nlev;
#let ntasks := 0;
#let taskcounter := 0;
#repeat while ntasks<=maxtasks {
#  let ntasks := ntasks+1;
#  let nz := 0;
#  repeat while nz<=Nlev {
#     let nz := nz+1;
#     # test that $nz divides $ntasks
#     let remainder := ntasks mod nz; 
#     if remainder == 0.0 then {
#        let ny := ntasks/nz;
#        # test that y subdomains contain at least 3 latitudes
#        if (ny*3 <= Nlat) and (ntasks > ntasksrestrict) then {
#           let taskcounter := taskcounter + 1;
#           let AtmPart[taskcounter] := ntasks;
##           printf "%s %s\n", taskcounter, ntasks;
#           break;
#        };
#     };        
#  };
#};
#subject to SOS1_2:         1 = sum {i in AtmSet} z1_2[i];
#subject to DefNatm: n['atm'] = sum {i in AtmSet} z1_2[i]*AtmPart[i];
#
##---------- declare SPECIAL ORDERED SET TYPE 1 to solver minlp for better branching
#suffix sosno  IN, integer, >= 0, <= 9999;
#suffix ref IN, integer, >=0, <= 9999;
#let {i in AtmSet} z1_2[i].sosno := 1;           # ... identifier for SOS-set number 1
#let {i in AtmSet} z1_2[i].ref   := AtmPart[i];
#let {i in OcnSet} z2[i].sosno   := 2;           # ... identifier for SOS-set number 2
#let {i in OcnSet} z2[i].ref     := OcnPart[i];
##----------

problem fitData: L2Error, a, b, c, k;

for {i in M} {
  printf "Solving for component %s\n", i;
  for {j in DD} {
    let x[j] := rawx[i,j];
    let y[j] := rawy[i,j];
    printf "x = %d  y = %f\n", x[j], y[j];
  };
  let a := 1000;
  let b := 1;
  let c := .01;
  let k := 10;
  solve fitData; 
  let A[i] := a;
  let B[i] := b;
  let C[i] := c;
  let K[i] := k;
};

printf "%d\n", CPUS;
printf "##%4s  %12s  %12s  %12s  %12s\n", "Comp", "A[f]", "B[f]", "C[f]", "K[f]";
for {i in M} {
  printf "%s  %12.6f  %12.6f  %12.6f  %12.6f\n", i, A[i], B[i], C[i], K[i];
}

printf "\n Solving for core allocations for max(max(ice,lnd)+atm,ocn) model:\n";
option solver minlp;
#problem ice_lnd_ocn: MaxTime, DefEta_m1, DefEtaT_m1, DefEta1_m1, DefEtaTi1_m1, DefEtaTi2_m1, TotalNumber_m1, n, eta_m1, etaT, etaTi_m1, z2, SOS2, DefNocn, IceLndNumber_m1, EqualT1_m1, EqualT2_m1, z1_2, SOS1_2, DefNatm;
problem ice_lnd_ocn: MaxTime, DefEta_m1, DefEtaT_m1, DefEta1_m1, DefEtaTi1_m1, DefEtaTi2_m1, TotalNumber_m1, n, eta_m1, etaT, etaTi_m1, IceLndNumber_m1, EqualT1_m1, EqualT2_m1;
solve ice_lnd_ocn;
display etaT, etaTi_m1, eta_m1;

printf "##%4s  %8s %10s\n", "Comp", "NTASKS", "seconds/model-day";
for {i in M} {
  printf "%s  %8.0f %10.3f\n", i, n[i], (A[i]/n[i] + B[i]*(n[i]^C[i]) + K[i]); 
}
printf "Total esimated total time:  %10.3f\n", etaT;

