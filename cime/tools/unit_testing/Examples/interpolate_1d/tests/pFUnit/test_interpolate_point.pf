module test_interpolate_point

use pfunit_mod

use interpolate_1d

implicit none

! Tolerance for rounding error.
real(r8), parameter :: tol = 1.e-15_r8

real(r8), parameter :: test_xs(3) = [0._r8, 1._r8, 2._r8]
real(r8), parameter :: test_ys(3) = [0._r8, 1._r8, 4._r8]

contains

@Test
subroutine interpolate_point_normal()
  real(r8) :: y

  y = interpolate_point(test_xs, test_ys, 0.5_r8)
  @assertEqual(y, 0.5_r8, tolerance=tol)

  y = interpolate_point(test_xs, test_ys, 1.5_r8)
  @assertEqual(y, 2.5_r8, tolerance=tol)

end subroutine interpolate_point_normal

@Test
subroutine interpolate_point_lower_bound()
  real(r8) :: y

  y = interpolate_point(test_xs, test_ys, -1._r8)
  @assertEqual(y, 0._r8, tolerance=tol)

end subroutine interpolate_point_lower_bound

@Test
subroutine interpolate_point_upper_bound()
  real(r8) :: y

  y = interpolate_point(test_xs, test_ys, 3._r8)
  @assertEqual(y, 4._r8, tolerance=tol)

end subroutine interpolate_point_upper_bound

end module test_interpolate_point
