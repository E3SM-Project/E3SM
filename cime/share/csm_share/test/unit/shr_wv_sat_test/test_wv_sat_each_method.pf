! This module has a parameterized test list for application to each of the
! individual methods provided by shr_wv_sat_mod.
module test_wv_sat_each_method

use pfunit_mod

use shr_kind_mod, only: r8 => shr_kind_r8
use shr_const_mod, only: &
     tmelt => shr_const_tkfrz, &
     h2otrip => shr_const_tktrip, &
     mwwv => shr_const_mwwv, &
     mwdair => shr_const_mwdair
use shr_wv_sat_mod

implicit none
public

real(r8), parameter :: t_transition = 20._r8

@TestParameter
type, extends(AbstractTestParameter) :: WVSchemeParameters
   character(len=32) :: scheme_name
   real(r8) :: relative_tol
   logical :: make_table
   logical :: use_vector
 contains
   procedure :: toString
end type WVSchemeParameters

@TestCase(testParameters={getParameters()}, constructor=new_WVSchemeCase)
type, extends(ParameterizedTestCase) :: WVSchemeCase
   character(len=32) :: scheme_name
   real(r8) :: relative_tol
   logical :: make_table
   logical :: use_vector
 contains
   procedure :: setUp
   procedure :: tearDown
end type WVSchemeCase

contains

! Simple routines to convert parameters to a test case or a string,
! respectively.

function new_WVSchemeCase(params) result(test)
  type(WVSchemeParameters), intent(in) :: params
  type(WVSchemeCase) :: test

  test%scheme_name = params%scheme_name
  test%relative_tol = params%relative_tol
  test%make_table = params%make_table
  test%use_vector = params%use_vector

end function new_WVSchemeCase

function toString(this) result(string)
  class(WVSchemeParameters), intent(in) :: this
  character(:), allocatable :: string

  character(len=80) :: buffer

  write(buffer,*) "(scheme=",this%scheme_name,",table=",this%make_table, &
       ",vec=",this%use_vector,")"

  string = trim(buffer)

end function toString

! setUp/tearDown to init the module and to actually set the current scheme.
subroutine setUp(this)

  class(WVSchemeCase), intent(inout) :: this

  real(r8), parameter :: epsilo = mwwv/mwdair

  character(len=128) :: errstring

  type(ShrWVSatTableSpec) :: liquid_table_spec, ice_table_spec, mixed_table_spec

  call shr_wv_sat_init(tmelt, h2otrip, t_transition, epsilo, errstring)

  if (errstring /= "") then
     call throw("Error from shr_wv_sat_init: "//trim(errstring))
  end if

  @assertTrue(shr_wv_sat_set_default(this%scheme_name))

  if (this%make_table) then
     liquid_table_spec = ShrWVSatTableSpec(151, tmelt-50._r8, 1._r8)
     ice_table_spec = ShrWVSatTableSpec(106, tmelt-100._r8, 1._r8)
     mixed_table_spec = ShrWVSatTableSpec(201, tmelt-100._r8, 1._r8)
     call shr_wv_sat_make_tables(&
          liquid_spec_in=liquid_table_spec, &
          ice_spec_in=ice_table_spec, &
          mixed_spec_in=mixed_table_spec)
  end if

end subroutine setUp

subroutine tearDown(this)

  class(WVSchemeCase), intent(inout) :: this

  call shr_wv_sat_final()

end subroutine tearDown

! List of testable schemes.

function getParameters() result(params)
  type(WVSchemeParameters), allocatable :: params(:)

  params = [ &
       WVSchemeParameters("GoffGratch", 0.002_r8, .false., .false.), &
       WVSchemeParameters("MurphyKoop", 0.001_r8, .false., .false.), &
       WVSchemeParameters("Flatau", 0.003_r8, .false., .false.), &
       WVSchemeParameters("Bolton", 0.001_r8, .false., .false.), &
       WVSchemeParameters("GoffGratch", 0.002_r8, .true., .false.), &
       WVSchemeParameters("GoffGratch", 0.002_r8, .false., .true.), &
       WVSchemeParameters("GoffGratch", 0.002_r8, .true., .true.) ]

end function getParameters

! Tests for water and ice functions for each scheme.

@Test
subroutine scheme_has_correct_ice_trip_point(this)
  class(WVSchemeCase), intent(inout) :: this

  if (this%use_vector) then
     call assertRelativelyEqual([611.7_r8], shr_wv_sat_svp_ice(1, [h2otrip]), &
          tolerance=this%relative_tol)
  else
     call assertRelativelyEqual(611.7_r8, shr_wv_sat_svp_ice(h2otrip), &
          tolerance=this%relative_tol)
  end if

end subroutine scheme_has_correct_ice_trip_point

@Test
subroutine scheme_has_correct_liquid_trip_point(this)
  class(WVSchemeCase), intent(inout) :: this

  if (this%use_vector) then
     call assertRelativelyEqual([611.7_r8], shr_wv_sat_svp_liquid(1, [h2otrip]), &
          tolerance=this%relative_tol)
  else
     call assertRelativelyEqual(611.7_r8, shr_wv_sat_svp_liquid(h2otrip), &
          tolerance=this%relative_tol)
  end if

end subroutine scheme_has_correct_liquid_trip_point

@Test
subroutine scheme_has_correct_liquid_value(this)
  class(WVSchemeCase), intent(inout) :: this

  ! Check a warm value (25 deg C).
  if (this%use_vector) then
     call assertRelativelyEqual([3169._r8], shr_wv_sat_svp_liquid(1, [tmelt+25._r8]), &
          tolerance=this%relative_tol)
  else
     call assertRelativelyEqual(3169._r8, shr_wv_sat_svp_liquid(tmelt+25._r8), &
          tolerance=this%relative_tol)
  end if

end subroutine scheme_has_correct_liquid_value

@Test
subroutine scheme_has_correct_ice_value(this)
  class(WVSchemeCase), intent(inout) :: this

  ! Check a cold value (-50 deg C).
  if (this%use_vector) then
     call assertRelativelyEqual([3.935], shr_wv_sat_svp_ice(1, [tmelt-50._r8]), &
          tolerance=this%relative_tol)
  else
     call assertRelativelyEqual(3.935, shr_wv_sat_svp_ice(tmelt-50._r8), &
          tolerance=this%relative_tol)
  end if

end subroutine scheme_has_correct_ice_value

! Tests for the combined water-ice function with transition range.
! Technically, these don't have to be done for each scheme, but it doesn't hurt
! to run them many times, since the tests are very quick.

@Test
subroutine scheme_has_correct_mixed_trip_point(this)
  class(WVSchemeCase), intent(inout) :: this

  if (this%use_vector) then
     call assertRelativelyEqual([611.7_r8], shr_wv_sat_svp_mixed(1, [h2otrip]), &
          tolerance=this%relative_tol)
  else
     call assertRelativelyEqual(611.7_r8, shr_wv_sat_svp_mixed(h2otrip), &
          tolerance=this%relative_tol)
  end if

end subroutine scheme_has_correct_mixed_trip_point

@Test
subroutine scheme_has_correct_mixed_as_ice(this)
  class(WVSchemeCase), intent(inout) :: this

  real(r8) :: t_all_ice = tmelt - t_transition - 1._r8

  real(r8) :: ice_svp

  ice_svp = shr_wv_sat_svp_ice(t_all_ice)

  ! Below the transition range, trans and ice should be equal.
  if (this%use_vector) then
     call assertRelativelyEqual([ice_svp], shr_wv_sat_svp_mixed(1, [t_all_ice]), &
          tolerance=this%relative_tol)
  else
     call assertRelativelyEqual(ice_svp, shr_wv_sat_svp_mixed(t_all_ice), &
          tolerance=this%relative_tol)
  end if

end subroutine scheme_has_correct_mixed_as_ice

@Test
subroutine scheme_has_correct_mixed_as_liquid(this)
  class(WVSchemeCase), intent(inout) :: this

  real(r8) :: t_all_liquid = tmelt + 1._r8

  real(r8) :: liquid_svp

  liquid_svp = shr_wv_sat_svp_liquid(t_all_liquid)

  ! Above the transition range, trans and water should be equal.
  if (this%use_vector) then
     call assertRelativelyEqual([liquid_svp], shr_wv_sat_svp_mixed(1, [t_all_liquid]), &
          tolerance=this%relative_tol)
  else
     call assertRelativelyEqual(liquid_svp, shr_wv_sat_svp_mixed(t_all_liquid), &
          tolerance=this%relative_tol)
  end if

end subroutine scheme_has_correct_mixed_as_liquid

@Test
subroutine scheme_has_correct_mixed_in_range(this)
  class(WVSchemeCase), intent(inout) :: this

  ! Temperature at which we are halfway through the transition range.
  real(r8), parameter :: t_half = tmelt - 0.5*t_transition

  real(r8) :: ice_svp, liquid_svp

  ice_svp = shr_wv_sat_svp_ice(t_half)
  liquid_svp = shr_wv_sat_svp_liquid(t_half)

  ! Check that transition SVP is the average of the ice and water SVPs.
  if (this%use_vector) then
     call assertRelativelyEqual([0.5_r8 * (ice_svp+liquid_svp)], &
          shr_wv_sat_svp_mixed(1, [t_half]), &
          tolerance=this%relative_tol)
  else
     call assertRelativelyEqual(0.5_r8 * (ice_svp+liquid_svp), &
          shr_wv_sat_svp_mixed(t_half), &
          tolerance=this%relative_tol)
  end if

end subroutine scheme_has_correct_mixed_in_range

end module test_wv_sat_each_method
