module test_wv_sat

use pfunit_mod

use shr_kind_mod, only: r8 => shr_kind_r8
use shr_const_mod, only: &
     tmelt => shr_const_tkfrz, &
     h2otrip => shr_const_tktrip, &
     mwwv => shr_const_mwwv, &
     mwdair => shr_const_mwdair
use shr_wv_sat_mod

implicit none
public

real(r8), parameter :: t_transition = 20._r8
real(r8), parameter :: epsilo = mwwv/mwdair

contains

@Before
subroutine setUp()

  character(len=128) :: errstring

  call shr_wv_sat_init(tmelt, h2otrip, t_transition, epsilo, errstring)

  if (errstring /= "") then
     call throw("Error from shr_wv_sat_init: "//trim(errstring))
  end if

end subroutine setUp

@After
subroutine tearDown()
  call shr_wv_sat_final()
end subroutine tearDown

@Test
subroutine invalid_name_produces_invalid_index()

  integer :: idx

  idx = shr_wv_sat_get_scheme_idx("NotARealSaturationSchemeName")
  @assertTrue(.not. shr_wv_sat_valid_idx(idx))

end subroutine invalid_name_produces_invalid_index

@Test
subroutine reject_out_of_bounds_transition

  character(len=128) :: errstring

  ! Negative transition ranges are meaningless.
  call shr_wv_sat_init(tmelt, h2otrip, -1._r8, epsilo, errstring)
  @assertTrue(errstring /= "")

  ! A transition range of 0 is OK.
  call shr_wv_sat_init(tmelt, h2otrip, 0._r8, epsilo, errstring)
  @assertTrue(errstring == "")

end subroutine reject_out_of_bounds_transition

@Test
subroutine qsat_not_greater_than_one()

  ! Even if the SVP is greater the current pressure, the saturation specific
  ! humidity returned should be capped at 1.
  @assertEqual(1.0_r8, shr_wv_sat_svp_to_qsat(1.0_r8, 0.5_r8))
  @assertEqual(1.0_r8, shr_wv_sat_svp_to_qsat(2, [1.0_r8, 2.0_r8], [0.5_r8, 0.5_r8]))

end subroutine qsat_not_greater_than_one

@Test
subroutine qmmr_not_greater_than_epsilon()

  integer, parameter :: n = 3
  real(r8), parameter :: es(n) = [0.51_r8, 1.0_r8, 1.5_r8]
  real(r8), parameter :: p(n) = [1.0_r8, 1.0_r8, 1.0_r8]

  integer :: i

  ! As SVP becomes close to the actual pressure, the mass mixing ratio goes to
  ! infinity, so check that we actually cap it at epsilon once the SVP is more
  ! than half the total pressure.
  do i = 1, 3
     @assertEqual(epsilo, shr_wv_sat_svp_to_qmmr(es(i), p(i)))
  end do
  @assertEqual(epsilo, shr_wv_sat_svp_to_qmmr(n, es, p))

end subroutine qmmr_not_greater_than_epsilon

@Test
subroutine esat_not_greater_than_p()

  real(r8) :: es, qs
  real(r8) :: es_vec(1), qs_vec(1)

  ! For the combined routine, we don't allow the SVP to exceed the current
  ! pressure. Tested here by simply providing an extremely low pressure.

  ! This is a guard against schemes that "blindly" attempt to reach saturation
  ! by evaporating cloud water, no matter what the conditions. At very low
  ! pressures this is impossible, so we return a limited value to prevent
  ! numerical issues.

  call shr_wv_sat_qsat_liquid(280._r8, 1.e-30_r8, es, qs)
  @assertEqual(1.e-30_r8, es)

  call shr_wv_sat_qsat_liquid(1, [280._r8], [1.e-30_r8], es_vec, qs_vec)
  @assertEqual([1.e-30_r8], es_vec)

  call shr_wv_sat_qsat_ice(260._r8, 1.e-30_r8, es, qs)
  @assertEqual(1.e-30_r8, es)

  call shr_wv_sat_qsat_ice(1, [260._r8], [1.e-30_r8], es_vec, qs_vec)
  @assertEqual([1.e-30_r8], es_vec)

  call shr_wv_sat_qsat_mixed(270._r8, 1.e-30_r8, es, qs)
  @assertEqual(1.e-30_r8, es)

  call shr_wv_sat_qsat_mixed(1, [270._r8], [1.e-30_r8], es_vec, qs_vec)
  @assertEqual([1.e-30_r8], es_vec)

end subroutine esat_not_greater_than_p

@Test
subroutine liquid_vapor_table_is_used()
  type(ShrWVSatTableSpec) :: liquid_table_spec

  real(r8) :: non_table_value
  real(r8) :: table_value

  non_table_value = shr_wv_sat_svp_liquid(tmelt+7.5_r8)

  liquid_table_spec = ShrWVSatTableSpec(151, tmelt-50._r8, 1._r8)
  call shr_wv_sat_make_tables(liquid_spec_in=liquid_table_spec)

  table_value = shr_wv_sat_svp_liquid(tmelt+7.5_r8)

  ! We can't really see directly whether the table is used, but we can pick a
  ! value that requires interpolation and look for the difference.
  @assertFalse(non_table_value == table_value)

end subroutine liquid_vapor_table_is_used

@Test
subroutine liquid_vapor_table_not_extrapolated()
  type(ShrWVSatTableSpec) :: liquid_table_spec

  real(r8) :: non_table_low_value, non_table_high_value
  real(r8) :: table_low_value, table_high_value

  non_table_low_value = shr_wv_sat_svp_liquid(tmelt-50.5_r8)
  non_table_high_value = shr_wv_sat_svp_liquid(tmelt+150.5_r8)

  liquid_table_spec = ShrWVSatTableSpec(151, tmelt-50._r8, 1._r8)
  call shr_wv_sat_make_tables(liquid_spec_in=liquid_table_spec)

  table_low_value = shr_wv_sat_svp_liquid(tmelt-50.5_r8)
  table_high_value = shr_wv_sat_svp_liquid(tmelt+150.5_r8)

  ! Beyond the table boundaries, the lookup table should not be used, and so we
  ! should get the same answer as before specifying any tables.
  @assertEqual(non_table_low_value, table_low_value)
  @assertEqual(non_table_high_value, table_high_value)

end subroutine liquid_vapor_table_not_extrapolated

@Test
subroutine ice_vapor_table_is_used()
  type(ShrWVSatTableSpec) :: ice_table_spec

  real(r8) :: non_table_value
  real(r8) :: table_value

  non_table_value = shr_wv_sat_svp_ice(tmelt-7.5_r8)

  ice_table_spec = ShrWVSatTableSpec(106, tmelt-100._r8, 1._r8)
  call shr_wv_sat_make_tables(ice_spec_in=ice_table_spec)

  table_value = shr_wv_sat_svp_ice(tmelt-7.5_r8)

  ! We can't really see directly whether the table is used, but we can pick a
  ! value that requires interpolation and look for the difference.
  @assertFalse(non_table_value == table_value)

end subroutine ice_vapor_table_is_used

@Test
subroutine ice_vapor_table_not_extrapolated()
  type(ShrWVSatTableSpec) :: ice_table_spec

  real(r8) :: non_table_low_value, non_table_high_value
  real(r8) :: table_low_value, table_high_value

  non_table_low_value = shr_wv_sat_svp_ice(tmelt-100.5_r8)
  non_table_high_value = shr_wv_sat_svp_ice(tmelt+5.5_r8)

  ice_table_spec = ShrWVSatTableSpec(106, tmelt-100._r8, 1._r8)
  call shr_wv_sat_make_tables(ice_spec_in=ice_table_spec)

  table_low_value = shr_wv_sat_svp_ice(tmelt-100.5_r8)
  table_high_value = shr_wv_sat_svp_ice(tmelt+5.5_r8)

  ! Beyond the table boundaries, the lookup table should not be used, and so we
  ! should get the same answer as before specifying any tables.
  @assertEqual(non_table_low_value, table_low_value)
  @assertEqual(non_table_high_value, table_high_value)

end subroutine ice_vapor_table_not_extrapolated

@Test
subroutine mixed_vapor_table_is_used()
  type(ShrWVSatTableSpec) :: mixed_table_spec

  real(r8) :: non_table_value
  real(r8) :: table_value

  non_table_value = shr_wv_sat_svp_mixed(tmelt-7.5_r8)

  mixed_table_spec = ShrWVSatTableSpec(201, tmelt-100._r8, 1._r8)
  call shr_wv_sat_make_tables(mixed_spec_in=mixed_table_spec)

  table_value = shr_wv_sat_svp_mixed(tmelt-7.5_r8)

  ! We can't really see directly whether the table is used, but we can pick a
  ! value that requires interpolation and look for the difference.
  @assertFalse(non_table_value == table_value)

end subroutine mixed_vapor_table_is_used

@Test
subroutine mixed_vapor_table_not_extrapolated()
  type(ShrWVSatTableSpec) :: mixed_table_spec

  real(r8) :: non_table_low_value, non_table_high_value
  real(r8) :: table_low_value, table_high_value

  non_table_low_value = shr_wv_sat_svp_mixed(tmelt-100.5_r8)
  non_table_high_value = shr_wv_sat_svp_mixed(tmelt+100.5_r8)

  mixed_table_spec = ShrWVSatTableSpec(201, tmelt-100._r8, 1._r8)
  call shr_wv_sat_make_tables(mixed_spec_in=mixed_table_spec)

  table_low_value = shr_wv_sat_svp_mixed(tmelt-100.5_r8)
  table_high_value = shr_wv_sat_svp_mixed(tmelt+100.5_r8)

  ! Beyond the table boundaries, the lookup table should not be used, and so we
  ! should get the same answer as before specifying any tables.
  @assertEqual(non_table_low_value, table_low_value)
  @assertEqual(non_table_high_value, table_high_value)

end subroutine mixed_vapor_table_not_extrapolated

end module test_wv_sat
