module test_shr_string
  
  ! Tests of shr_string_mod
  
  use pfunit_mod
  use shr_string_mod
  
  implicit none

  integer, parameter :: list_len = 256
  
contains
  
  ! ------------------------------------------------------------------------
  ! Tests of shr_string_listDiff
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_listDiff_default()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'fourth:second', &
         listout = actual)
    @assertEqual('first:third', actual)
  end subroutine test_shr_string_listDiff_default

  @Test
  subroutine test_shr_string_listDiff_emptyList2()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = ' ', &
         listout = actual)
    @assertEqual('first:second:third:fourth', actual)
  end subroutine test_shr_string_listDiff_emptyList2
  
  @Test
  subroutine test_shr_string_listDiff_List2equalsList1()
    character(len=list_len) :: actual

    call shr_string_listDiff( &
         list1 = 'first:second:third:fourth', &
         list2 = 'fourth:second:first:third', &  ! same as list1, but different order
         listout = actual)
    @assertEqual(' ', actual)
  end subroutine test_shr_string_listDiff_List2equalsList1

  ! ------------------------------------------------------------------------
  ! Tests of shr_string_listAddSuffix
  ! ------------------------------------------------------------------------

  @Test
  subroutine test_shr_string_listAddSuffix_with_empty_list()
    character(len=list_len) :: actual

    call shr_string_listAddSuffix(list=' ', suffix='00', new_list=actual)
    @assertEqual(' ', actual)
  end subroutine test_shr_string_listAddSuffix_with_empty_list
    
  @Test
  subroutine test_shr_string_listAddSuffix_with_one_element()
    character(len=list_len) :: actual

    call shr_string_listAddSuffix(list='first', suffix='00', new_list=actual)
    @assertEqual('first00', actual)
  end subroutine test_shr_string_listAddSuffix_with_one_element
  
  @Test
  subroutine test_shr_string_listAddSuffix_with_multiple_elements()
    character(len=list_len) :: actual, expected

    call shr_string_listAddSuffix(list='first:second:third', suffix='00', new_list=actual)
    expected = 'first00:second00:third00'
    @assertEqual(expected, actual)
  end subroutine test_shr_string_listAddSuffix_with_multiple_elements
  
  @Test
  subroutine test_shr_string_listAddSuffix_with_empty_suffix()
    character(len=list_len) :: actual, expected

    call shr_string_listAddSuffix(list='first:second:third', suffix=' ', new_list=actual)
    expected = 'first:second:third'
    @assertEqual(expected, actual)
  end subroutine test_shr_string_listAddSuffix_with_empty_suffix
  
end module test_shr_string
