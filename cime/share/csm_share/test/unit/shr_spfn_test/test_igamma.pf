module test_igamma

use pfunit_mod

use shr_kind_mod, only: &
     r8 => shr_kind_r8

use shr_const_mod, only: &
     pi => shr_const_pi

use shr_spfn_mod, only: &
     igamma => shr_spfn_igamma, &
     erfc => shr_spfn_erfc

implicit none
save

real(r8), parameter :: relative_error_tolerance = 1.e-12_r8

contains

! igamma(1,x) = exp(-x)
! => igamma(1,1) = exp(-1)
@Test
subroutine igamma_matches_exp_1()
  real(r8) :: tol
  tol = relative_error_tolerance*exp(-1._r8)
  @assertEqual(exp(-1._r8), igamma(1._r8, 1._r8), tolerance=tol)
end subroutine igamma_matches_exp_1

! igamma(1/2,x) = sqrt(pi)*erfc(sqrt(x))
! => igamma(0.5,1) = sqrt(pi)*erfc(1)
@Test
subroutine igamma_matches_erfc_1()
  real(r8) :: expected
  real(r8) :: tol
  expected = sqrt(pi)*erfc(1._r8)
  tol = relative_error_tolerance*expected
  @assertEqual(expected, igamma(0.5_r8, 1._r8), tolerance=tol)
end subroutine igamma_matches_erfc_1

end module test_igamma
