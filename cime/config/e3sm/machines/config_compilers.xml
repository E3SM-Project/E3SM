<?xml version="1.0" encoding="UTF-8"?>
<config_compilers version="2.0">
<!--
===========================
This file defines compiler flags for building CIME.  General flags are listed first
followed by flags specific to particular operating systems, followed by particular machines.

More general flags are replaced by more specific flags.
Flags of the sort <append> indicate that the field should be appended to an already existing FLAG definition.

Attributes indicate that an if clause should be added to the Macros so that these flags are added
only under the conditions described by the attribute(s).

The env_mach_specific file may set environment variables or load modules which set environment variables
which are then  used in the Makefile.   For example the NETCDF_PATH on many machines is set by a module.

========================================================================
 Serial/MPI compiler specification
========================================================================

SCC   and  SFC specifies the serial compiler
MPICC and  MPICC specifies the mpi compiler

if $MPILIB is set to mpi-serial then
   CC = $SCC
   FC = $SFC
   MPICC = $SCC
   MPIFC = $SFC
   INC_MPI = $(CIMEROOT)/src/externals/mct/mpi-serial

========================================================================
 Options for including C++ code in the build
========================================================================

SUPPORTS_CXX (TRUE/FALSE): Whether we have defined all the necessary
settings for including C++ code in the build for this compiler (or
this compiler/machine combination). See below for a description of the
necessary settings.

The following are required for a compiler to support the inclusion of
C++ code:

SCXX: serial C++ compiler

MPICXX: mpi C++ compiler

CXX_LINKER (CXX/FORTRAN): When C++ code is included in the build, do
we use a C++ or Fortran linker?

In addition, some compilers require additional libraries or link-time
flags, specified via CXX_LIBS or CXX_LDFLAGS, as in the following
examples:

<CXX_LIBS> -L/path/to/directory -lfoo </CXX_LIBS>

or

<CXX_LDFLAGS> -cxxlib </CXX_LDFLAGS>

Note that these libraries or LDFLAGS will be added on the link line,
regardless of whether we are using a C++ or Fortran linker. For
example, if CXX_LINKER=CXX, then the above CXX_LIBS line should
specify extra libraries needed when linking C++ and fortran code using
a C++ linker. If CXX_LINKER=FORTRAN, then the above CXX_LDFLAGS line
should specify extra LDFLAGS needed when linking C++ and fortran code
using a fortran linker.

These should NOT be specified via <SLIBS> <append USE_CXX="true"> or
<LDFLAGS> <append USE_CXX="true">, because those mess up the configure step
for mct, etc.

========================================================================
 MPAS
========================================================================

MPAS has a semi-autonomous build from core E3SM. Component-specific (mali, mpassi)
flags should be captured within MPAS CMake files.

===========================
-->
<!-- Define default values that can be overridden by specific
     compilers -->
<compiler>
  <SUPPORTS_CXX>FALSE</SUPPORTS_CXX>
</compiler>

<compiler COMPILER="cray">
  <CFLAGS>
    <append compile_threaded="FALSE"> -h noomp </append>
  </CFLAGS>
  <CPPDEFS>
    <!--http://docs.cray.com/cgi-bin/craydoc.cgi?mode=View;id=S-3901-83;idx=books_search;this_sort=;q=;type=books;title=Cray%20Fortran%20Reference%20Manual -->
    <append> -DFORTRANUNDERSCORE -DNO_R16 -DCPRCRAY</append>
    <append COMP_NAME="moby"> -DDIR=NOOP </append>
  </CPPDEFS>
  <FC_AUTO_R8>
    <base> -s real64 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base> -O2  -f free -N 255  -h byteswapio -em </base>
    <append compile_threaded="FALSE"> -h noomp </append>
    <append DEBUG="TRUE"> -g -trapuv  -Wuninitialized </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <HAS_F2008_CONTIGUOUS>TRUE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <base> -Wl,--allow-multiple-definition -h byteswapio </base>
    <append compile_threaded="FALSE"> -h noomp </append>
  </LDFLAGS>
</compiler>

<compiler COMPILER="gnu">
  <CFLAGS>
    <base> -mcmodel=medium </base>
    <append compile_threaded="TRUE"> -fopenmp </append>
    <append DEBUG="TRUE"> -g -Wall -Og -fbacktrace -fcheck=bounds -ffpe-trap=invalid,zero,overflow</append>
    <append DEBUG="FALSE"> -O </append>
    <append COMP_NAME="csm_share"> -std=c99 </append>
  </CFLAGS>
  <CMAKE_OPTS>
    <append COMP_NAME="cism"> -D CISM_GNU=ON </append>
  </CMAKE_OPTS>
  <CPPDEFS>
    <!-- http://gcc.gnu.org/onlinedocs/gfortran/ -->
    <append> -DFORTRANUNDERSCORE -DNO_R16 -DCPRGNU</append>
  </CPPDEFS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -fdefault-real-8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <!-- -ffree-line-length-none and -ffixed-line-length-none need to be in FFLAGS rather than in FIXEDFLAGS/FREEFLAGS
       so that these are passed to cmake builds (cmake builds don't use FIXEDFLAGS and FREEFLAGS). -->
    <base> -mcmodel=medium -fconvert=big-endian -ffree-line-length-none -ffixed-line-length-none </base>
    <append compile_threaded="TRUE"> -fopenmp </append>
    <!-- Ideally, we would also have 'invalid' in the ffpe-trap list. But at
         least with some versions of gfortran (confirmed with 5.4.0, 6.3.0 and
         7.1.0, 8.2.0, 8.3.0), gfortran's isnan (which is called in cime via the
         CPRGNU-specific shr_infnan_isnan) causes a floating point exception
         when called on a signaling NaN. -->
    <append DEBUG="TRUE"> -g -Wall -Og -fbacktrace -fcheck=bounds -ffpe-trap=zero,overflow</append>
    <append DEBUG="FALSE"> -O </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base>  -ffixed-form </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -ffree-form </base>
  </FREEFLAGS>
  <HAS_F2008_CONTIGUOUS>FALSE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -fopenmp </append>
  </LDFLAGS>
  <MPICC> mpicc  </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <SCC> gcc </SCC>
  <SCXX> g++ </SCXX>
  <SFC> gfortran </SFC>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler COMPILER="gnu7">
  <CFLAGS>
    <base> -mcmodel=medium </base>
    <append compile_threaded="TRUE"> -fopenmp </append>
    <append DEBUG="TRUE"> -g -Wall -Og -fbacktrace -fcheck=bounds -ffpe-trap=invalid,zero,overflow</append>
    <append DEBUG="FALSE"> -O </append>
  </CFLAGS>
  <CMAKE_OPTS>
    <append COMP_NAME="cism"> -D CISM_GNU=ON </append>
  </CMAKE_OPTS>
  <CPPDEFS>
    <!-- http://gcc.gnu.org/onlinedocs/gfortran/ -->
    <append> -DFORTRANUNDERSCORE -DNO_R16 -DCPRGNU</append>
  </CPPDEFS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -fdefault-real-8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <!-- -ffree-line-length-none and -ffixed-line-length-none need to be in FFLAGS rather than in FIXEDFLAGS/FREEFLAGS
       so that these are passed to cmake builds (cmake builds don't use FIXEDFLAGS and FREEFLAGS). -->
    <base> -mcmodel=medium -fconvert=big-endian -ffree-line-length-none -ffixed-line-length-none </base>
    <append compile_threaded="TRUE"> -fopenmp </append>
    <append DEBUG="TRUE"> -g -Wall -Og -fbacktrace -fcheck=bounds -ffpe-trap=invalid,zero,overflow</append>
    <append DEBUG="FALSE"> -O </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base>  -ffixed-form </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -ffree-form </base>
  </FREEFLAGS>
  <HAS_F2008_CONTIGUOUS>FALSE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -fopenmp </append>
  </LDFLAGS>
  <MPICC> mpicc  </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <SCC> gcc </SCC>
  <SCXX> g++ </SCXX>
  <SFC> gfortran </SFC>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler COMPILER="ibm">
  <CFLAGS>
    <base> -g -qfullpath -qmaxmem=-1 -qphsinfo </base>
    <append DEBUG="FALSE"> -O3  </append>
    <append DEBUG="FALSE" compile_threaded="TRUE"> -qsmp=omp </append>
    <append DEBUG="TRUE" compile_threaded="TRUE"> -qsmp=omp:noopt </append>
  </CFLAGS>
  <CPPDEFS>
    <!-- http://publib.boulder.ibm.com/infocenter/comphelp/v7v91/index.jsp
 Notes:  (see xlf user's guide for the details)
  -lmass          => IBM-tuned intrinsic lib
  -qsmp=noauto    => enable SMP directives, but don't add any
  -qsmp=omp       => enable SMP directives, strict omp
  -qstrict        => don't turn divides into multiplies, etc
  -qhot           => higher-order-transformations (eg. loop padding)
  -qalias=noaryovrlp => assume no array overlap wrt equivalance, etc
  -qmaxmem=-1     => memory available to compiler during optimization
  -qipa=level=2   => InterProcedure Analysis (eg. inlining) => slow compiles
  -p -pg          => enable profiling (use in both FFLAGS and LDFLAGS)
  -qreport        => for smp/omp only
  -g              => always leave it on because overhead is minimal
  -qflttrap=...   => enable default sigtrap (core dump)
  -C              => runtime array bounds checking (runs slow)
  -qinitauto=...  => initializes automatic variables
  -->
    <append> -DFORTRAN_SAME -DCPRIBM</append>
  </CPPDEFS>
  <CPRE>-WF,-D</CPRE>
  <FC_AUTO_R8>
    <base> -qrealsize=8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base> -g -qfullpath -qmaxmem=-1 -qphsinfo </base>
    <append DEBUG="FALSE"> -O2 -qstrict -Q </append>
    <append DEBUG="FALSE" compile_threaded="TRUE"> -qsmp=omp </append>
    <append DEBUG="TRUE" compile_threaded="TRUE"> -qsmp=omp:noopt </append>
    <append DEBUG="TRUE"> -qinitauto=7FF7FFFF -qflttrap=ov:zero:inv:en </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base>  -qsuffix=f=f -qfixed=132 </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -qsuffix=f=f90:cpp=F90  </base>
  </FREEFLAGS>
  <HAS_F2008_CONTIGUOUS>TRUE</HAS_F2008_CONTIGUOUS>
</compiler>

<compiler COMPILER="intel">
  <CFLAGS>
    <base> -O2 -fp-model precise -std=gnu99 </base>
    <append compile_threaded="TRUE"> -qopenmp </append>
    <append DEBUG="FALSE"> -O2 -debug minimal </append>
    <append DEBUG="TRUE"> -O0 -g </append>
  </CFLAGS>
  <CXXFLAGS>
    <base> -std=c++11 -fp-model source </base>
    <append compile_threaded="TRUE"> -qopenmp </append>
    <append DEBUG="TRUE"> -O0 -g </append>
    <append DEBUG="FALSE"> -O2 </append>
  </CXXFLAGS>
  <CPPDEFS>
    <!-- http://software.intel.com/en-us/articles/intel-composer-xe/ -->
    <append> -DFORTRANUNDERSCORE -DNO_R16 -DCPRINTEL</append>
  </CPPDEFS>
  <CXX_LDFLAGS>
    <base> -cxxlib </base>
  </CXX_LDFLAGS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base>  -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model source </base>
    <append compile_threaded="TRUE"> -qopenmp </append>
    <append DEBUG="TRUE"> -O0 -g -check uninit -check bounds -check pointers -fpe0 -check noarg_temp_created </append>
    <append DEBUG="FALSE"> -O2 -debug minimal </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base> -fixed -132 </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <HAS_F2008_CONTIGUOUS>TRUE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -qopenmp </append>
  </LDFLAGS>
  <MPICC> mpicc  </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler COMPILER="nag">
  <CFLAGS>
    <append DEBUG="TRUE"> -g </append>
    <append> -std=c99 </append>
  </CFLAGS>
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_CRAY_POINTERS -DNO_SHR_VMATH -DCPRNAG</append>
  </CPPDEFS>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <!-- Yes, you really do need this huge -wmismatch flag for NAG to work.    -->
    <!-- More specifically, it exempts MPI functions without explicit          -->
    <!-- interfaces from certain argument checks. Should not be necessary in   -->
    <!-- libraries that only use the F90 module interface. mpibcast and        -->
    <!-- mpiscatterv are actually CAM wrappers for MPI.                        -->
    <base> -wmismatch=mpi_send,mpi_recv,mpi_bcast,mpi_allreduce,mpi_reduce,mpi_isend,mpi_irecv,mpi_irsend,mpi_rsend,mpi_gatherv,mpi_gather,mpi_scatterv,mpi_allgather,mpi_alltoallv,mpi_file_read_all,mpi_file_write_all,mpibcast,mpiscatterv,mpi_alltoallw,nfmpi_get_vara_all,NFMPI_IPUT_VARA,NFMPI_GET_VAR_ALL,NFMPI_PUT_VARA,NFMPI_PUT_ATT_REAL,NFMPI_PUT_ATT_DOUBLE,NFMPI_PUT_ATT_INT,NFMPI_GET_ATT_REAL,NFMPI_GET_ATT_INT,NFMPI_GET_ATT_DOUBLE,NFMPI_PUT_VARA_DOUBLE_ALL,NFMPI_PUT_VARA_REAL_ALL,NFMPI_PUT_VARA_INT_ALL    -convert=BIG_ENDIAN </base>
    <!-- DEBUG vs. non-DEBUG runs.                                             -->
    <append DEBUG="FALSE"> -ieee=full -O2 </append>
    <append DEBUG="TRUE"> -g -time -f2003 -ieee=stop </append>
    <!-- The "-gline" option is nice, but it doesn't work with OpenMP.         -->
    <!-- Runtime checks with OpenMP (in fact, all OpenMP cases) are WIP.       -->
    <append DEBUG="TRUE"> -C=all -g -time -f2003 -ieee=stop </append>
    <append DEBUG="TRUE" compile_threaded="FALSE"> -gline </append>
    <append compile_threaded="TRUE"> -openmp </append>
  </FFLAGS>
  <FIXEDFLAGS>
    <base> -fixed </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <HAS_F2008_CONTIGUOUS>FALSE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -openmp </append>
  </LDFLAGS>
  <MPICC> mpicc </MPICC>
  <MPIFC> mpif90 </MPIFC>
  <SCC> gcc </SCC>
  <SFC> nagfor </SFC>
</compiler>

<compiler COMPILER="pathscale">
  <CFLAGS>
    <append compile_threaded="TRUE"> -mp </append>
  </CFLAGS>
  <CPPDEFS>
    <!-- http://www.pathscale.com/node/70 -->
    <append> -DFORTRANUNDERSCORE -DNO_R16 -DCPRPATHSCALE </append>
  </CPPDEFS>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base> -O -extend_source -ftpp -fno-second-underscore -funderscoring -byteswapio  </base>
    <append compile_threaded="TRUE"> -mp </append>
    <append DEBUG="TRUE"> -g -trapuv -Wuninitialized </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <HAS_F2008_CONTIGUOUS>FALSE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -mp </append>
  </LDFLAGS>
  <MPICC> mpicc  </MPICC>
  <MPIFC> mpif90 </MPIFC>
</compiler>

<compiler COMPILER="pgi">
  <CFLAGS>
    <base> -time </base>
    <append compile_threaded="TRUE"> -mp </append>
  </CFLAGS>
  <CPPDEFS>
    <!-- http://www.pgroup.com/resources/docs.htm                                              -->
    <!-- Notes:  (see pgi man page & user's guide for the details) -->
    <!--  -Mextend        => Allow 132-column source lines -->
    <!--  -Mfixed         => Assume fixed-format source -->
    <!--  -Mfree          => Assume free-format source -->
    <!--  -byteswapio     => Swap byte-order for unformatted i/o (big/little-endian) -->
    <!--  -target=linux   => Specifies the target architecture to Compute Node Linux (CNL only) -->
    <!--  -fast           => Chooses generally optimal flags for the target platform -->
    <!--  -Mnovect        => Disables automatic vector pipelining -->
    <!--  -Mvect=nosse    => Don't generate SSE, SSE2, 3Dnow, and prefetch instructions in loops    -->
    <!--  -Mflushz        => Set SSE to flush-to-zero mode (underflow) loops where possible  -->
    <!--  -Kieee          => Perform fp ops in strict conformance with the IEEE 754 standard.  -->
    <!--                     Some optimizations disabled, slightly slower, more accurate math.  -->
    <!--  -mp=nonuma      => Don't use thread/processors affinity (for NUMA architectures)  -->
    <!-- -->
    <!--  -g              => Generate symbolic debug information. Turns off optimization.   -->
    <!--  -Mbounds        => Add array bounds checking  -->
    <!--  -Ktrap=fp       => Determine IEEE Trap conditions fp => inv,divz,ovf   -->
    <!--                     * inv: invalid operands         -->
    <!--                     * divz divide by zero           -->
    <!--                     * ovf: floating point overflow   -->
    <!--  -F              => leaves file.f for each preprocessed file.F file  -->
    <!--  -time           => Print execution time for each compiler step  -->
    <append> -DFORTRANUNDERSCORE -DNO_SHR_VMATH -DNO_R16 -DCPRPGI </append>
  </CPPDEFS>
  <CXX_LINKER>CXX</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base>  -i4 -time -Mstack_arrays  -Mextend -byteswapio -Mflushz -Kieee -Mallocatable=03 </base>
    <append compile_threaded="TRUE"> -mp </append>
    <append DEBUG="TRUE"> -O0 -g -Ktrap=fp -Mbounds -Kieee </append>
    <append COMP_NAME="datm"> -Mnovect </append>
    <append COMP_NAME="dlnd"> -Mnovect </append>
    <append COMP_NAME="drof"> -Mnovect </append>
    <append COMP_NAME="dwav"> -Mnovect </append>
    <append COMP_NAME="dice"> -Mnovect </append>
    <append COMP_NAME="docn"> -Mnovect </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base> -Mfixed </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -Mfree </base>
  </FREEFLAGS>
  <!-- Note that SUPPORTS_CXX is false for pgi in general, because we
       need some machine-specific libraries -->
  <!-- Technically, PGI does recognize this keyword during parsing,
       but support is either buggy or incomplete, notably in that
       the "contiguous" attribute is incompatible with "intent".-->
  <HAS_F2008_CONTIGUOUS>FALSE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <base> -time -Wl,--allow-multiple-definition </base>
    <append compile_threaded="TRUE"> -mp </append>
  </LDFLAGS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <SCC> pgcc </SCC>
  <SCXX> pgc++ </SCXX>
  <SFC> pgf95 </SFC>
</compiler>

<compiler COMPILER="pgiacc">
  <CFLAGS>
    <base> -time </base>
    <append compile_threaded="TRUE"> -mp </append>
  </CFLAGS>
  <CPPDEFS>
    <!-- http://www.pgroup.com/resources/docs.htm                                              -->
    <!-- Notes:  (see pgi man page & user's guide for the details) -->
    <!--  -Mextend        => Allow 132-column source lines -->
    <!--  -Mfixed         => Assume fixed-format source -->
    <!--  -Mfree          => Assume free-format source -->
    <!--  -byteswapio     => Swap byte-order for unformatted i/o (big/little-endian) -->
    <!--  -target=linux   => Specifies the target architecture to Compute Node Linux (CNL only) -->
    <!--  -fast           => Chooses generally optimal flags for the target platform -->
    <!--  -Mnovect        => Disables automatic vector pipelining -->
    <!--  -Mvect=nosse    => Don't generate SSE, SSE2, 3Dnow, and prefetch instructions in loops    -->
    <!--  -Mflushz        => Set SSE to flush-to-zero mode (underflow) loops where possible  -->
    <!--  -Kieee          => Perform fp ops in strict conformance with the IEEE 754 standard.  -->
    <!--                     Some optimizations disabled, slightly slower, more accurate math.  -->
    <!--  -mp=nonuma      => Don't use thread/processors affinity (for NUMA architectures)  -->
    <!-- -->
    <!--  -g              => Generate symbolic debug information. Turns off optimization.   -->
    <!--  -Mbounds        => Add array bounds checking  -->
    <!--  -Ktrap=fp       => Determine IEEE Trap conditions fp => inv,divz,ovf   -->
    <!--                     * inv: invalid operands         -->
    <!--                     * divz divide by zero           -->
    <!--                     * ovf: floating point overflow   -->
    <!--  -F              => leaves file.f for each preprocessed file.F file  -->
    <!--  -time           => Print execution time for each compiler step  -->
    <append> -DFORTRANUNDERSCORE -DNO_SHR_VMATH -DNO_R16 -DUSE_CUDA_FORTRAN -DCPRPGI </append>
  </CPPDEFS>
  <CXX_LINKER>CXX</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base>  -i4 -time -Mstack_arrays -Mextend -byteswapio -Mflushz -Kieee  </base>
    <append compile_threaded="TRUE"> -mp </append>
    <append COMP_NAME="cam"> </append>
    <append DEBUG="TRUE"> -O0 -g -Ktrap=fp -Mbounds -Kieee </append>
    <append COMP_NAME="datm"> -Mnovect </append>
    <append COMP_NAME="dlnd"> -Mnovect </append>
    <append COMP_NAME="drof"> -Mnovect </append>
    <append COMP_NAME="dwav"> -Mnovect </append>
    <append COMP_NAME="dice"> -Mnovect </append>
    <append COMP_NAME="docn"> -Mnovect </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base> -Mfixed </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -Mfree </base>
  </FREEFLAGS>
  <!-- Note that SUPPORTS_CXX is false for pgi in general, because we
       need some machine-specific libraries -->
  <!-- Technically, PGI does recognize this keyword during parsing,
       but support is either buggy or incomplete, notably in that
       the "contiguous" attribute is incompatible with "intent".-->
  <HAS_F2008_CONTIGUOUS>FALSE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <base> -time -Wl,--allow-multiple-definition -acc</base>
    <append compile_threaded="TRUE"> -mp </append>
  </LDFLAGS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <SCC> pgcc </SCC>
  <SCXX> pgc++ </SCXX>
  <SFC> pgf95 </SFC>
</compiler>

<compiler OS="AIX" COMPILER="ibm">
  <CFLAGS>
    <append> -qarch=auto -qtune=auto -qcache=auto </append>
  </CFLAGS>
  <CONFIG_SHELL> /usr/bin/bash </CONFIG_SHELL>
  <FFLAGS>
    <append> -qarch=auto -qtune=auto -qcache=auto -qsclk=micro </append>
    <append COMP_NAME="cam"> -qspill=6000 </append>
  </FFLAGS>
  <LDFLAGS>
    <append DEBUG="TRUE"> -qsigtrap=xl__trcedump </append>
    <append> -bdatapsize:64K -bstackpsize:64K -btextpsize:32K </append>
  </LDFLAGS>
  <MPICC> mpcc_r </MPICC>
  <MPIFC> mpxlf2003_r </MPIFC>
  <SCC> cc_r </SCC>
  <SFC> xlf2003_r </SFC>
  <SLIBS>
    <append> -lmassv -lessl </append>
    <append DEBUG="FALSE"> -lmass </append>
  </SLIBS>
</compiler>

<compiler OS="BGL" COMPILER="ibm">
  <CFLAGS>
    <base> -O3 -qstrict </base>
    <append> -qtune=440 -qarch=440d </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --build=powerpc-bgp-linux --host=powerpc64-suse-linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX -DnoI8 </append>
  </CPPDEFS>
  <FFLAGS>
    <append> -qtune=440 -qarch=440d </append>
    <append DEBUG="FALSE"> -O3 -qstrict -Q </append>
    <append DEBUG="TRUE"> -qinitauto=FF911299 -qflttrap=ov:zero:inv:en </append>
    <append> -qextname=flush </append>
  </FFLAGS>
  <LDFLAGS>
    <base>  -Wl,--relax -Wl,--allow-multiple-definition </base>
  </LDFLAGS>
  <MLIBS>
    <base> -L/bgl/BlueLight/ppcfloor/bglsys/lib -lmpich.rts -lmsglayer.rts -lrts.rts -ldevices.rts </base>
  </MLIBS>
  <MPICC> blrts_xlc </MPICC>
  <MPIFC> blrts_xlf2003 </MPIFC>
  <MPI_LIB_NAME> mpich.rts </MPI_LIB_NAME>
  <MPI_PATH> /bgl/BlueLight/ppcfloor/bglsys</MPI_PATH>
  <SCC> blrts_xlc </SCC>
  <SFC> blrts_xlf2003 </SFC>
</compiler>

<compiler OS="BGP" COMPILER="ibm">
  <CFLAGS>
    <append> -qtune=450 -qarch=450 -I/bgsys/drivers/ppcfloor/arch/include/</append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --build=powerpc-bgp-linux --host=powerpc64-suse-linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX -DnoI8 </append>
  </CPPDEFS>
  <FFLAGS>
    <append>-qspillsize=2500 -qtune=450 -qarch=450 </append>
    <append> -qextname=flush </append>
  </FFLAGS>
  <LDFLAGS>
    <base>  -Wl,--relax -Wl,--allow-multiple-definition </base>
  </LDFLAGS>
</compiler>

<compiler OS="BGQ" COMPILER="ibm">
  <CFLAGS>
    <append DEBUG="FALSE" compile_threaded="TRUE"> -qsmp=omp:nested_par -qsuppress=1520-045 </append>
    <append DEBUG="TRUE" compile_threaded="TRUE"> -qsmp=omp:nested_par:noopt -qsuppress=1520-045 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --build=powerpc-bgp-linux --host=powerpc64-suse-linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX  </append>
  </CPPDEFS>
  <FFLAGS>
    <base> -g -qfullpath -qmaxmem=-1 -qspillsize=2500 -qextname=flush -qphsinfo </base>
    <append DEBUG="FALSE"> -O3 -qstrict -Q </append>
    <append DEBUG="FALSE" compile_threaded="TRUE"> -qsmp=omp:nested_par -qsuppress=1520-045 </append>
    <append DEBUG="TRUE" compile_threaded="TRUE"> -qsmp=omp:nested_par:noopt -qsuppress=1520-045 </append>
  </FFLAGS>
  <LDFLAGS>
    <base>  -Wl,--relax -Wl,--allow-multiple-definition </base>
  </LDFLAGS>
</compiler>

<compiler OS="CNL">
  <CMAKE_OPTS>
    <base> -DCMAKE_SYSTEM_NAME=Catamount</base>
  </CMAKE_OPTS>
  <CPPDEFS>
    <append> -DLINUX </append>
    <append COMP_NAME="gptl"> -DHAVE_NANOTIME -DBIT64 -DHAVE_VPRINTF -DHAVE_BACKTRACE -DHAVE_SLASHPROC -DHAVE_COMM_F2C -DHAVE_TIMES -DHAVE_GETTIMEOFDAY  </append>
  </CPPDEFS>
  <MPICC> cc </MPICC>
  <MPICXX> CC </MPICXX>
  <MPIFC> ftn </MPIFC>
  <MPI_LIB_NAME> mpich </MPI_LIB_NAME>
  <MPI_PATH> $ENV{MPICH_DIR}</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDF_DIR}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PARALLEL_NETCDF_DIR}</PNETCDF_PATH>
  <SCC> cc </SCC>
  <SCXX> CC </SCXX>
  <SFC> ftn </SFC>
</compiler>

<compiler OS="Darwin">
  <CPPDEFS>
    <append> -DSYSDARWIN </append>
  </CPPDEFS>
  <LDFLAGS>
    <append COMP_CLASS="cpl"> -all_load </append>
  </LDFLAGS>
</compiler>

<compiler OS="Darwin" COMPILER="intel">
  <FFLAGS>
    <append compile_threaded="FALSE"> -heap-arrays </append>
  </FFLAGS>
  <SLIBS>
    <append MPILIB="mpich"> -mkl=cluster </append>
    <append MPILIB="mpich2"> -mkl=cluster </append>
    <append MPILIB="mpt"> -mkl=cluster </append>
    <append MPILIB="openmpi"> -mkl=cluster </append>
    <append MPILIB="mvapich"> -mkl=cluster </append>
    <append MPILIB="impi"> -mkl=cluster </append>
    <append MPILIB="mpi-serial"> -mkl </append>
  </SLIBS>
</compiler>

<compiler OS="Linux" COMPILER="intel">
  <FFLAGS>
    <append> -mcmodel medium -shared-intel </append>
  </FFLAGS>
</compiler>

<compiler MACH="anlworkstation" COMPILER="gnu">
  <ALBANY_PATH>/projects/install/rhel6-x86_64/ACME/AlbanyTrilinos/Albany/build/install</ALBANY_PATH>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CXX_LIBS>
    <base>-lstdc++ -lmpi_cxx</base>
  </CXX_LIBS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </FFLAGS>
  <SLIBS>
    <append>$SHELL{$ENV{NETCDF_PATH}/bin/nf-config --flibs} -lblas -llapack</append>
  </SLIBS>
  <NETCDF_PATH>$ENV{NETCDF_PATH}</NETCDF_PATH>
  <PNETCDF_PATH>$ENV{PNETCDF_PATH}</PNETCDF_PATH>
</compiler>

<compiler MACH="anvil" COMPILER="gnu">
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_NANOTIME -DBIT64 -DHAVE_SLASHPROC -DHAVE_GETTIMEOFDAY  </append>
  </CPPDEFS>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <SLIBS>
    <append>$SHELL{$ENV{NETCDF_FORTRAN_PATH}/bin/nf-config --flibs}  -L$ENV{MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lm -ldl </append>
    <append> $SHELL{$ENV{NETCDF_C_PATH}/bin/nc-config --libs} </append>
  </SLIBS>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <PNETCDF_PATH>$ENV{PNETCDF_PATH}</PNETCDF_PATH>
</compiler>

<compiler MACH="anvil" COMPILER="intel">
  <CFLAGS>
    <append compile_threaded="TRUE"> -static-intel</append>
    <append compile_threaded="TRUE" DEBUG="TRUE">-heap-arrays</append>
  </CFLAGS>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align</append>
    <append> $SHELL{$ENV{NETCDF_FORTRAN_PATH}/bin/nf-config --fflags} </append>
    <append compile_threaded="TRUE"> -static-intel</append>
    <append compile_threaded="TRUE" DEBUG="TRUE">-heap-arrays</append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <append compile_threaded="TRUE"> -static-intel</append>
  </FFLAGS_NOOPT>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -static-intel</append>
  </LDFLAGS>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <SLIBS>
    <append> $SHELL{$ENV{NETCDF_FORTRAN_PATH}/bin/nf-config --flibs} </append>
    <append> $SHELL{$ENV{NETCDF_C_PATH}/bin/nc-config --libs} </append>
    <append>-Wl,--start-group $ENV{MKLROOT}/lib/intel64/libmkl_intel_lp64.a $ENV{MKLROOT}/lib/intel64/libmkl_sequential.a $ENV{MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl</append>
  </SLIBS>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <PNETCDF_PATH>$ENV{PNETCDF_PATH}</PNETCDF_PATH>
</compiler>

<compiler MACH="anvil" COMPILER="intel18">
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <SLIBS>
    <append> $SHELL{$ENV{NETCDF_FORTRAN_PATH}/bin/nf-config --flibs} </append>
    <append> $SHELL{$ENV{NETCDF_C_PATH}/bin/nc-config --libs} </append>
    <append>-Wl,--start-group $ENV{MKLROOT}/lib/intel64/libmkl_intel_lp64.a $ENV{MKLROOT}/lib/intel64/libmkl_sequential.a $ENV{MKLROOT}/lib/intel64/libmkl_core.a -Wl,--end-group -lpthread -lm -ldl</append>
  </SLIBS>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <PNETCDF_PATH>$ENV{PNETCDF_PATH}</PNETCDF_PATH>
  <CFLAGS>
    <base> -O2 -fp-model precise -std=gnu99 </base>
    <append compile_threaded="TRUE"> -qopenmp -static-intel</append>
    <append compile_threaded="TRUE" DEBUG="TRUE">-heap-arrays</append>
    <append DEBUG="FALSE"> -O2 -debug minimal </append>
    <append DEBUG="TRUE"> -O0 -g </append>
  </CFLAGS>
  <CXXFLAGS>
    <base> -std=c++11 -fp-model source </base>
    <append compile_threaded="TRUE"> -qopenmp -static-intel</append>
    <append DEBUG="TRUE"> -O0 -g </append>
    <append DEBUG="FALSE"> -O2 </append>
  </CXXFLAGS>
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16 -DCPRINTEL</append>
  </CPPDEFS>
  <CXX_LDFLAGS>
    <base> -cxxlib </base>
  </CXX_LDFLAGS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base> -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model source </base>
    <append compile_threaded="TRUE"> -qopenmp -static-intel</append>
    <append compile_threaded="TRUE" DEBUG="TRUE">-heap-arrays</append>
    <append DEBUG="TRUE"> -O0 -g -check uninit -check bounds -check pointers -fpe0 -check noarg_temp_created </append>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align </append>
    <append> $SHELL{$ENV{NETCDF_FORTRAN_PATH}/bin/nf-config --fflags} </append>
  </FFLAGS>
  <FFLAGS_NOOPT>
    <base> -O0 </base>
  </FFLAGS_NOOPT>
  <FIXEDFLAGS>
    <base> -fixed -132 </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <HAS_F2008_CONTIGUOUS>TRUE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -qopenmp -static-intel</append>
  </LDFLAGS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="bebop" COMPILER="intel">
  <ALBANY_PATH>/soft/climate/AlbanyTrilinos_06262017/Albany/buildintel/install</ALBANY_PATH>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align</append>
  </FFLAGS>
  <MPICC  MPILIB="impi"> mpiicc  </MPICC>
  <MPICXX MPILIB="impi"> mpiicpc </MPICXX>
  <MPIFC  MPILIB="impi"> mpiifort </MPIFC>
  <SLIBS>
    <append>$SHELL{nf-config --flibs} -mkl</append>
  </SLIBS>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <PNETCDF_PATH>$ENV{PNETCDF_PATH}</PNETCDF_PATH>
</compiler>

<compiler MACH="bebop" COMPILER="gnu">
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <SLIBS>
    <append>$SHELL{$ENV{NETCDF_FORTRAN_PATH}/bin/nf-config --flibs} $SHELL{$ENV{NETCDF_C_PATH}/bin/nc-config --libs}</append> 
    <append>-L$ENV{MKLROOT}/lib/intel64 -Wl,--no-as-needed -lmkl_gf_lp64 -lmkl_sequential -lmkl_core -lpthread -lm -ldl</append>
  </SLIBS>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <PNETCDF_PATH>$ENV{PNETCDF_PATH}</PNETCDF_PATH>
</compiler>

<compiler MACH="blues" COMPILER="gnu">
  <ALBANY_PATH>/soft/climate/AlbanyTrilinos_06262017/Albany/build/install</ALBANY_PATH>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_NANOTIME -DBIT64 -DHAVE_SLASHPROC -DHAVE_GETTIMEOFDAY</append>
  </CPPDEFS>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <MPI_LIB_NAME MPILIB="mvapich">mpi</MPI_LIB_NAME>
  <MPI_PATH MPILIB="mvapich">/blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-5.3.0/mvapich2-2.2b-sdh7nhddicl4sh5mgxjyzxtxox3ajqey</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -llapack -lblas</append>
  </SLIBS>
</compiler>

<compiler MACH="blues" COMPILER="intel">
  <MPI_LIB_NAME MPILIB="mvapich">mpi</MPI_LIB_NAME>
  <MPI_PATH MPILIB="mvapich">/soft/mvapich2/2.2b_psm/intel-15.0</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -llapack -lblas </append>
    <append> -Wl,-rpath -Wl,$ENV{NETCDFROOT}/lib </append>
    <append MPILIB="mpich"> -mkl=cluster </append>
    <append MPILIB="mpich2"> -mkl=cluster </append>
    <append MPILIB="mpt"> -mkl=cluster </append>
    <append MPILIB="openmpi"> -mkl=cluster </append>
    <append MPILIB="mvapich"> -mkl=cluster </append>
    <append MPILIB="impi"> -mkl=cluster </append>
    <append MPILIB="mpi-serial"> -mkl </append>
  </SLIBS>
</compiler>

<compiler MACH="blues" COMPILER="intel13">
  <MPI_LIB_NAME MPILIB="openmpi"> mpi</MPI_LIB_NAME>
  <MPI_LIB_NAME MPILIB="mpich">mpich</MPI_LIB_NAME>
  <MPI_PATH MPILIB="openmpi">/soft/openmpi/1.8.2/intel-13.1</MPI_PATH>
  <MPI_PATH MPILIB="mpich">/soft/mpich2/1.4.1-intel-13.1</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -llapack -lblas</append>
    <append MPILIB="mpich"> -mkl=cluster </append>
    <append MPILIB="mpich2"> -mkl=cluster </append>
    <append MPILIB="mpt"> -mkl=cluster </append>
    <append MPILIB="openmpi"> -mkl=cluster </append>
    <append MPILIB="mvapich"> -mkl=cluster </append>
    <append MPILIB="impi"> -mkl=cluster </append>
    <append MPILIB="mpi-serial"> -mkl </append>
  </SLIBS>
</compiler>

<compiler MACH="blues" COMPILER="nag">
  <MPI_LIB_NAME MPILIB="mpich"> mpi </MPI_LIB_NAME>
  <MPI_PATH MPILIB="mpich">/home/robl/soft/mpich-3.1.4-nag-6.0</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$(shell $NETCDF_PATH/bin/nf-config --flibs) $SHELL{$NETCDF_PATH/bin/nc-config --libs} -llapack -lblas</append>
  </SLIBS>
</compiler>

<compiler MACH="blues" COMPILER="pgi">
  <MPI_LIB_NAME MPILIB="mvapich"> mpi</MPI_LIB_NAME>
  <MPI_LIB_NAME MPILIB="openmpi"> mpi</MPI_LIB_NAME>
  <MPI_LIB_NAME MPILIB="mpich">mpich</MPI_LIB_NAME>
  <MPI_PATH MPILIB="openmpi">/soft/openmpi/1.8.2/pgi-13.9</MPI_PATH>
  <MPI_PATH MPILIB="mpich">/soft/mpich2/1.4.1-pgi-13.9/</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -llapack -lblas</append>
    <append> -rpath $ENV{NETCDFROOT}/lib </append>
  </SLIBS>
</compiler>

<compiler MACH="cades" COMPILER="gnu">
  <CFLAGS>
    <append compile_threaded="TRUE"> -fopenmp </append>
  </CFLAGS>
  <CMAKE_OPTS>
    <append COMP_NAME="cism"> -D CISM_GNU=ON </append>
  </CMAKE_OPTS>
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16</append>
    <!-- <append COMP_NAME="clm"> -DCLM_PFLOTRAN </append>
         <append COMP_NAME="clm"> -DCOLUMN_MODE </append> -->
  </CPPDEFS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -fdefault-real-8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <!-- -ffree-line-length-none and -ffixed-line-length-none need to be in FFLAGS rather than in FIXEDFLAGS/FREEFLAGS
                                 so that these are passed to cmake builds (cmake builds don't use FIXEDFLAGS and FREEFLAGS). -->
    <base> -O -fconvert=big-endian -ffree-line-length-none -ffixed-line-length-none -fno-range-check</base>
    <append compile_threaded="TRUE"> -fopenmp </append>
    <append DEBUG="TRUE"> -g -Wall </append>
    <!-- <append COMP_NAME="clm"> -I/lustre/or-hydra/cades-ccsi/$USER/models/pflotran-interface/src/clm-pflotran</append> -->
  </FFLAGS>
  <FIXEDFLAGS>
    <base>  -ffixed-form </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -ffree-form </base>
  </FREEFLAGS>
  <HDF5_PATH>/software/dev_tools/swtree/cs400_centos7.2_pe2016-08/hdf5-parallel/1.8.17/centos7.2_gnu5.3.0</HDF5_PATH>
  <NETCDF_PATH>/software/dev_tools/swtree/cs400_centos7.2_pe2016-08/netcdf-hdf5parallel/4.3.3.1/centos7.2_gnu5.3.0</NETCDF_PATH>
  <PNETCDF_PATH>/software/dev_tools/swtree/cs400_centos7.2_pe2016-08/pnetcdf/1.9.0/centos7.2_gnu5.3.0</PNETCDF_PATH>
  <LAPACK_LIBDIR>/software/tools/compilers/intel_2017/mkl/lib/intel64</LAPACK_LIBDIR>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -fopenmp </append>
    <!-- <append COMP_CLASS="cpl"> -L$ENV{CLM_PFLOTRAN_SOURCE_DIR} -lpflotran $ENV{PETSC_LIB} </append> -->
  </LDFLAGS>
  <SLIBS>
    <append> -L$NETCDF_PATH/lib -Wl,-rpath=$NETCDF_PATH/lib -lnetcdff -lnetcdf </append>
  </SLIBS>
  <MPICC>mpicc</MPICC>
  <MPICXX>mpic++</MPICXX>
  <MPIFC>mpif90</MPIFC>
  <SCC>gcc</SCC>
  <SCXX>gcpp</SCXX>
  <SFC>gfortran</SFC>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="cascade" COMPILER="intel">
  <CONFIG_ARGS>
    <base> --host=Linux --enable-filesystem-hints=lustre</base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="TRUE"> -g -traceback  -O0 -fpe0 -check  all -check noarg_temp_created -ftrapuv </append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_HOME}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -L$ENV{MKL_PATH}/lib/intel64 -lmkl_rt </base>
    <append MPILIB="mpich2"> -mkl=cluster </append>
    <append MPILIB="mpi-serial"> -mkl </append>
  </SLIBS>
</compiler>

<compiler MACH="cascade" COMPILER="nag">
  <CPPDEFS>
    <append> -DnoI8 </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="TRUE">  -C=all  -g  -O0 -v  </append>
    <append DEBUG="TRUE" COMP_NAME="cam">  -C=all  -g  -nan -O0 -v  </append>
  </FFLAGS>
  <MPI_PATH MPILIB="mvapich2"> $ENV{MPI_LIB}</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDF_ROOT}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append> -L$ENV{NETCDF_ROOT}/lib -lnetcdf -lnetcdff -L$ENV{MKL_PATH} -lmkl_rt</append>
  </SLIBS>
</compiler>

<compiler MACH="cetus" COMPILER="ibm">
  <ALBANY_PATH>/projects/ccsm/libs/AlbanyTrilinos/Albany/build/install</ALBANY_PATH>
  <CPPDEFS>
    <append> -DMPASLI_EXTERNAL_INTERFACE_DISABLE_MANGLING </append>
  </CPPDEFS>
  <CXX_LIBS>
    <base> -llapack -lblas -L$ENV{IBM_MAIN_DIR}/xlf/bg/14.1/bglib64 -lxlfmath -lxlf90_r -lxlopt -lxl -L$ENV{IBM_MAIN_DIR}/xlsmp/bg/3.1/bglib64 -lxlsmp </base>
  </CXX_LIBS>
  <CXX_LINKER>CXX</CXX_LINKER>
  <HDF5_PATH>/soft/libraries/hdf5/1.8.14/cnk-xl/current/</HDF5_PATH>
  <LD> mpixlf77_r </LD>
  <MPICC> mpixlc_r </MPICC>
  <MPICXX> /soft/compilers/bgclang/mpi/bgclang/bin/mpic++11 </MPICXX>
  <MPIFC> mpixlf2003_r </MPIFC>
  <NETCDF_PATH>/soft/libraries/netcdf/4.3.3-f4.4.1/cnk-xl/current/</NETCDF_PATH>
  <PETSC_PATH>/soft/libraries/petsc/3.5.3.1</PETSC_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>/soft/libraries/pnetcdf/1.6.0/cnk-xl/current/</PNETCDF_PATH>
  <SCC> mpixlc_r </SCC>
  <SFC> mpixlf2003_r </SFC>
  <SLIBS>
    <append>-L$NETCDF_PATH/lib -lnetcdff -lnetcdf -L$HDF5_PATH/lib -lhdf5_hl -lhdf5 -L/soft/libraries/alcf/current/xl/ZLIB/lib -lz -L/soft/libraries/alcf/current/xl/LAPACK/lib -llapack -L/soft/libraries/alcf/current/xl/BLAS/lib -lblas -L/bgsys/drivers/ppcfloor/comm/sys/lib </append>
    <append compile_threaded="TRUE"> -L$ENV{IBM_MAIN_DIR}/xlf/bg/14.1/bglib64 -lxlfmath -lxlf90_r -lxlopt -lxl -L$ENV{IBM_MAIN_DIR}/xlsmp/bg/3.1/bglib64 -lxlsmp </append>
  </SLIBS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="constance" COMPILER="intel">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append DEBUG="TRUE"> -g -traceback  -O0 -fpe0 -check  all -check noarg_temp_created -ftrapuv </append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_HOME}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -lpmi -L$ENV{MKL_PATH} -lmkl_rt</base>
  </SLIBS>
</compiler>

<compiler MACH="constance" COMPILER="nag">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 -kind=byte </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -kind=byte </append>
    <append DEBUG="TRUE"> -C=all  -g  -O0 -v </append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_HOME}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -lpmi -L$ENV{MKL_PATH} -lmkl_rt</base>
  </SLIBS>
</compiler>

<compiler MACH="constance" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append DEBUG="TRUE"> -g -traceback  -O0 -fpe0 -check  all -check noarg_temp_created -ftrapuv </append>
    <append DEBUG="TRUE">-C -Mbounds -traceback -Mchkfpstk -Mchkstk -Mdalign  -Mdepchk  -Mextend -Miomutex -Mrecursive  -Ktrap=fp -O0 -g -byteswapio -Meh_frame</append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_HOME}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -lpmi -L$ENV{MPI_LIB} -lmpich</base>
  </SLIBS>
</compiler>

<compiler MACH="compy" COMPILER="intel">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append DEBUG="TRUE"> -g -traceback  -O0 -fpe0 -check  all -check noarg_temp_created -ftrapuv -init=snan</append>
  </FFLAGS>
  <NETCDF_PATH>$ENV{NETCDF_HOME}</NETCDF_PATH>
  <PNETCDF_PATH>$ENV{PNETCDF_HOME}</PNETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SLIBS>
    <base> -lpmi -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -L$ENV{MKL_PATH}/lib/intel64/ -lmkl_rt $ENV{PNETCDF_LIBRARIES}</base>
  </SLIBS>
  <MPICC  MPILIB="impi">mpiicc</MPICC>
  <MPICXX MPILIB="impi">mpiicpc</MPICXX>
  <MPIFC  MPILIB="impi">mpiifort</MPIFC>
</compiler>

<compiler MACH="compy" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CFLAGS>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append DEBUG="TRUE">-C -Mbounds -traceback -Mchkfpstk -Mchkstk -Mdalign  -Mdepchk  -Mextend -Miomutex -Mrecursive  -Ktrap=fp -O0 -g -byteswapio -Meh_frame</append>
    <append COMP_NAME="cam">-Mnovect</append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_HOME}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDF_HOME}</PNETCDF_PATH>
  <SLIBS>
    <append> -lpmi -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -L$ENV{MKL_PATH}/lib/intel64/ -lmkl_rt $ENV{PNETCDF_LIBRARIES} </append>
  </SLIBS>
  <MPICC  MPILIB="impi">mpipgcc</MPICC>
  <MPICXX MPILIB="impi">mpipgcxx</MPICXX>
  <MPIFC  MPILIB="impi">mpipgf90</MPIFC>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="cori-haswell" COMPILER="intel">
  <ALBANY_PATH>/global/cfs/cdirs/acme/software/AlbanyTrilinos20190823/albany-build/install</ALBANY_PATH>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <base> -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model consistent -fimf-use-svml </base>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align </append>
  </FFLAGS>
  <PETSC_PATH>$ENV{PETSC_DIR}</PETSC_PATH>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <SLIBS>
    <append> -L$ENV{NETCDF_DIR} -lnetcdff -Wl,--as-needed,-L$ENV{NETCDF_DIR}/lib -lnetcdff -lnetcdf </append>
    <append> -mkl -lpthread </append>
  </SLIBS>
</compiler>

<compiler MACH="cori-knl" COMPILER="intel">
  <ALBANY_PATH>/global/cfs/cdirs/acme/software/AlbanyTrilinos20190823/albany-build/install</ALBANY_PATH>
  <CFLAGS>
    <append MPILIB="impi"> -axMIC-AVX512 -xCORE-AVX2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DARCH_MIC_KNL </append>
  </CPPDEFS>
  <FFLAGS>
    <base> -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model consistent -fimf-use-svml </base>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align</append>
    <append MPILIB="impi"> -xMIC-AVX512 </append>
    <append> -DHAVE_ERF_INTRINSICS </append>
  </FFLAGS>
  <MPICC MPILIB="impi"> mpiicc </MPICC>
  <MPICXX MPILIB="impi"> mpiicpc </MPICXX>
  <MPIFC MPILIB="impi"> mpiifort </MPIFC>
  <!-- When using Intel MPI, can't use the Cray compiler wrappers. Must also set environment variables in config_machines.xml -->
  <MPI_LIB_NAME MPILIB="impi">impi</MPI_LIB_NAME>
  <PETSC_PATH>$ENV{PETSC_DIR}</PETSC_PATH>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <SLIBS>
    <append> -L$ENV{NETCDF_DIR} -lnetcdff -Wl,--as-needed,-L$ENV{NETCDF_DIR}/lib -lnetcdff -lnetcdf </append>
    <append> -mkl -lpthread </append>
  </SLIBS>
</compiler>

<compiler MACH="cori-knl" COMPILER="intel19">
  <CFLAGS>
    <base> -O2 -fp-model precise -std=gnu99 </base>
    <append compile_threaded="TRUE"> -qopenmp </append>
    <append DEBUG="FALSE"> -O2 -debug minimal </append>
    <append DEBUG="TRUE"> -O0 -g </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16 -DCPRINTEL</append>
  </CPPDEFS>
  <CXX_LDFLAGS>
    <base> -cxxlib </base>
  </CXX_LDFLAGS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base> -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model consistent -fimf-use-svml </base>
    <append compile_threaded="TRUE"> -qopenmp </append>
    <append DEBUG="TRUE"> -O0 -g -check uninit -check bounds -check pointers -fpe0 -check noarg_temp_created </append>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align </append>
    <append MPILIB="impi"> -xMIC-AVX512 </append>
  </FFLAGS>
  <FIXEDFLAGS>
    <base> -fixed -132 </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <HAS_F2008_CONTIGUOUS>TRUE</HAS_F2008_CONTIGUOUS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -qopenmp </append>
  </LDFLAGS>
  <PETSC_PATH>$ENV{PETSC_DIR}</PETSC_PATH>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <MPICC MPILIB="impi"> mpiicc </MPICC>
  <MPICXX MPILIB="impi"> mpiicpc </MPICXX>
  <MPIFC MPILIB="impi"> mpiifort </MPIFC>
  <!-- When using Intel MPI, can't use the Cray compiler wrappers. Must also set environment variables in config_machines.xml -->
  <MPI_LIB_NAME MPILIB="impi">impi</MPI_LIB_NAME>
  <SLIBS>
    <append> -L$ENV{NETCDF_DIR} -lnetcdff -Wl,--as-needed,-L$ENV{NETCDF_DIR}/lib -lnetcdff -lnetcdf </append>
    <append> -mkl -lpthread </append>
  </SLIBS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="eastwind" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_HOME}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -lpmi </base>
  </SLIBS>
</compiler>

<compiler MACH="eddi" COMPILER="gnu">
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_VPRINTF -DHAVE_GETTIMEOFDAY -DHAVE_BACKTRACE </append>
  </CPPDEFS>
  <NETCDF_PATH>$ENV{NETCDF_HOME}</NETCDF_PATH>
  <SLIBS>
    <append> -L$ENV{NETCDF_HOME}/lib/ -lnetcdff -lnetcdf -lcurl -llapack -lblas </append>
  </SLIBS>
</compiler>

<compiler MACH="eos" COMPILER="intel">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_PAPI </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
    <append DEBUG="TRUE"> -g -traceback  -O0 -fpe0 -check  all -check noarg_temp_created -ftrapuv </append>
  </FFLAGS>
  <MPICC> cc </MPICC>
  <MPICXX> CC </MPICXX>
  <MPIFC> ftn </MPIFC>
  <SLIBS>
    <append> -L$ENV{NETCDF_DIR} -lnetcdff -Wl,--as-needed,-L$ENV{NETCDF_DIR}/lib -lnetcdff -lnetcdf </append>
    <append> $ENV{MKLROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group $ENV{MKLROOT}/lib/intel64/libmkl_intel_lp64.a $ENV{MKLROOT}/lib/intel64/libmkl_core.a $ENV{MKLROOT}/lib/intel64/libmkl_sequential.a -Wl,--end-group $ENV{MKLROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -lpthread -lm </append>
  </SLIBS>
</compiler>

<compiler MACH="ghost" COMPILER="intel">
  <ALBANY_PATH>/projects/ccsm/AlbanyTrilinos_20190904/albany-build/install</ALBANY_PATH>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <ESMF_LIBDIR>/projects/ccsm/esmf-6.3.0rp1/lib/libO/Linux.intel.64.openmpi.default</ESMF_LIBDIR>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </FFLAGS>
  <MPI_PATH MPILIB="openmpi">/opt/openmpi-1.8-intel</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PFUNIT_PATH MPILIB="mpi-serial" compile_threaded="FALSE">/projects/ccsm/pfunit/3.2.9/mpi-serial</PFUNIT_PATH>
  <PIO_FILESYSTEM_HINTS>lustre </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -L/projects/ccsm/BLAS-intel -lblas_LINUX</append>
    <append MPILIB="openmpi"> -mkl=cluster </append>
    <append MPILIB="mpi-serial"> -mkl </append>
  </SLIBS>
</compiler>

<compiler MACH="itasca" COMPILER="intel">
  <CFLAGS>
    <base> -O2 -fp-model precise -I/soft/intel/x86_64/2013/composer_xe_2013/composer_xe_2013_sp1.3.174/mkl/include </base>
    <append compile_threaded="TRUE"> -openmp </append>
  </CFLAGS>
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16</append>
    <append> -DCPRINTEL </append>
  </CPPDEFS>
  <CXX_LDFLAGS>
    <base> -cxxlib </base>
  </CXX_LDFLAGS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base> -fp-model source -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -I/soft/intel/x86_64/2013/composer_xe_2013/composer_xe_2013_sp1.3.174/mkl/include </base>
    <append compile_threaded="TRUE"> -openmp </append>
    <append DEBUG="TRUE"> -O0 -g -check uninit -check bounds -check pointers -fpe0 </append>
    <append DEBUG="FALSE"> -O2 </append>
  </FFLAGS>
  <FIXEDFLAGS>
    <base> -fixed -132 </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -openmp </append>
  </LDFLAGS>
  <MPICC> mpiicc  </MPICC>
  <MPICXX> mpiicpc </MPICXX>
  <MPIFC> mpiifort </MPIFC>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <SLIBS>
    <append>-L/soft/netcdf/fortran-4.4-intel-sp1-update3-parallel/lib -lnetcdff -L/soft/hdf5/hdf5-1.8.13-intel-2013-sp1-update3-impi-5.0.0.028/lib -openmp -fPIC -lnetcdf -lnetcdf -L/soft/intel/x86_64/2013/composer_xe_2013/composer_xe_2013_sp1.3.174/mkl/lib/intel64 -lmkl_intel_lp64 -lmkl_core -lmkl_intel_thread -lpthread -lm </append>
  </SLIBS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="lawrencium-lr2" COMPILER="intel">
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_VPRINTF -DHAVE_GETTIMEOFDAY </append>
  </CPPDEFS>
  <LAPACK_LIBDIR>/global/software/sl-6.x86_64/modules/intel/2016.1.150/lapack/3.6.0-intel/lib</LAPACK_LIBDIR>
  <NETCDF_PATH>$ENV{NETCDF_DIR}</NETCDF_PATH>
  <SLIBS>
    <append> -lnetcdff -lnetcdf -mkl</append>
  </SLIBS>
</compiler>

<compiler MACH="lawrencium-lr3" COMPILER="intel">
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_VPRINTF -DHAVE_GETTIMEOFDAY </append>
  </CPPDEFS>
  <LAPACK_LIBDIR>/global/software/sl-6.x86_64/modules/intel/2016.1.150/lapack/3.6.0-intel/lib</LAPACK_LIBDIR>
  <NETCDF_PATH>$ENV{NETCDF_DIR}</NETCDF_PATH>
  <SLIBS>
    <append> -lnetcdff -lnetcdf -mkl</append>
  </SLIBS>
</compiler>

<compiler MACH="lawrencium-lr6" COMPILER="intel">
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_VPRINTF -DHAVE_GETTIMEOFDAY </append>
  </CPPDEFS>
  <LAPACK_LIBDIR>/global/software/sl-6.x86_64/modules/intel/2016.1.150/lapack/3.6.0-intel/lib</LAPACK_LIBDIR>
  <NETCDF_PATH>$ENV{NETCDF_DIR}</NETCDF_PATH>
  <SLIBS>
    <append> -lnetcdff -lnetcdf -mkl</append>
  </SLIBS>
</compiler>

<compiler MACH="lawrencium-lr6" COMPILER="gnu">
  <LAPACK_LIBDIR>$ENV{LAPACK_DIR}/lib</LAPACK_LIBDIR>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CXX_LIBS>
    <base>-lstdc++ -lmpi_cxx</base>
  </CXX_LIBS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
    <append > -I$ENV{NETCDF_DIR}/include  </append>
  </FFLAGS>
  <NETCDF_PATH>$ENV{NETCDF_DIR}</NETCDF_PATH>
  <PNETCDF_PATH>$ENV{PNETCDF_DIR}</PNETCDF_PATH>
  <SLIBS>
    <append> -L/global/software/sl-7.x86_64/modules/gcc/6.3.0/netcdf/4.4.1.1-gcc-p/lib -lnetcdff -lnetcdf -lnetcdf -lblas -llapack </append>
  </SLIBS>
</compiler>

<compiler MACH="linux-generic" COMPILER="gnu">
  <NETCDF_C_PATH> $ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH> $ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <PNETCDF_PATH> $ENV{PNETCDF_PATH}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_FORTRAN_PATH/bin/nf-config --flibs} </append>
  </SLIBS>
</compiler>

<compiler MACH="mac" COMPILER="gnu">
  <LDFLAGS>
    <append>-framework Accelerate</append>
  </LDFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_PATH}</NETCDF_PATH>
  <SLIBS>
    <append>-L$NETCDF_PATH/lib -lnetcdff -lnetcdf</append>
  </SLIBS>
</compiler>

<compiler MACH="melvin" COMPILER="gnu">
  <ALBANY_PATH>/projects/install/rhel6-x86_64/ACME/AlbanyTrilinos/Albany/build/install</ALBANY_PATH>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
    <append > -I$ENV{NETCDFROOT}/include  </append>
  </FFLAGS>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PFUNIT_PATH MPILIB="mpi-serial" compile_threaded="FALSE">$ENV{SEMS_PFUNIT_ROOT}</PFUNIT_PATH>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -lblas -llapack</append>
  </SLIBS>
</compiler>

<compiler MACH="melvin" COMPILER="intel">
  <ALBANY_PATH>/projects/install/rhel6-x86_64/ACME/AlbanyTrilinos/Albany/build/install</ALBANY_PATH>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CXX_LIBS>
    <base>-lstdc++ -lmpi_cxx</base>
  </CXX_LIBS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </FFLAGS>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -lblas -llapack</append>
  </SLIBS>
</compiler>

<compiler COMPILER="gnu" MACH="snl-white">
  <SCXX>$ENV{E3SM_SRCROOT}/externals/kokkos/bin/nvcc_wrapper</SCXX>
  <MPICXX>$ENV{E3SM_SRCROOT}/externals/kokkos/bin/nvcc_wrapper</MPICXX>
  <KOKKOS_OPTIONS> --arch=Pascal60 --with-cuda=$ENV{CUDA_ROOT} --with-cuda-options=enable_lambda </KOKKOS_OPTIONS>
  <CXXFLAGS>
    <append>-expt-extended-lambda -DCUDA_BUILD</append>
  </CXXFLAGS>
  <NETCDF_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -lblas -llapack -lcudart -lstdc++</append>
  </SLIBS>
</compiler>

<compiler COMPILER="intel18" MACH="snl-blake">
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16 -DCPRINTEL </append>
  </CPPDEFS>
  <CFLAGS>
    <base> -xCORE_AVX512 -mkl -std=gnu99 </base>
    <append DEBUG="FALSE"> -O3 -g -debug minimal </append>
    <append DEBUG="TRUE"> -O0 -g </append>
  </CFLAGS>
  <CXXFLAGS>
    <base> -xCORE_AVX512 -mkl -std=c++11 </base>
    <append DEBUG="FALSE"> -O3 -g -debug minimal </append>
    <append DEBUG="TRUE"> -O0 -g </append>
    <append compile_threaded="TRUE"> -qopenmp </append>
  </CXXFLAGS>
  <FFLAGS>
    <base> -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -xCORE_AVX512 -mkl </base>
    <append compile_threaded="TRUE"> -qopenmp </append>
    <append DEBUG="FALSE"> -O3 -g -debug minimal </append>
    <append DEBUG="TRUE"> -O0 -g -check uninit -check bounds -check pointers -fpe0 -check noarg_temp_created </append>
  </FFLAGS>
  <LDFLAGS>
    <base> -mkl -lstdc++ </base>
    <append compile_threaded="TRUE"> -qopenmp </append>
    <append>-L$(NETCDF_FORTRAN_PATH)/lib64</append>
  </LDFLAGS>
  <FIXEDFLAGS>
    <base> -fixed -132 </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <HAS_F2008_CONTIGUOUS>TRUE</HAS_F2008_CONTIGUOUS>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <SFC> ifort </SFC>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <CXX_LDFLAGS>
    <base> -cxxlib </base>
  </CXX_LDFLAGS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="mesabi" COMPILER="intel">
  <CFLAGS>
    <base> -O2 -fp-model precise -I/soft/intel/x86_64/2013/composer_xe_2013/composer_xe_2013_sp1.3.174/mkl/inc
lude </base>
    <append compile_threaded="TRUE"> -openmp </append>
  </CFLAGS>
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE -DNO_R16</append>
    <append> -DCPRINTEL </append>
  </CPPDEFS>
  <CXX_LDFLAGS>
    <base> -cxxlib </base>
  </CXX_LDFLAGS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <FC_AUTO_R8>
    <base> -r8 </base>
  </FC_AUTO_R8>
  <FFLAGS>
    <base> -fp-model source -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -I/soft/i
ntel/x86_64/2013/composer_xe_2013/composer_xe_2013_sp1.3.174/mkl/include </base>
    <append compile_threaded="TRUE"> -openmp </append>
    <append DEBUG="TRUE"> -O0 -g -check uninit -check bounds -check pointers -fpe0 </append>
    <append DEBUG="FALSE"> -O2 </append>
  </FFLAGS>
  <FIXEDFLAGS>
    <base> -fixed -132 </base>
  </FIXEDFLAGS>
  <FREEFLAGS>
    <base> -free </base>
  </FREEFLAGS>
  <LDFLAGS>
    <append compile_threaded="TRUE"> -openmp </append>
    <append> -lnetcdff </append>
  </LDFLAGS>
  <MPICC> mpiicc  </MPICC>
  <MPICXX> mpiicpc </MPICXX>
  <MPIFC> mpiifort </MPIFC>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <SLIBS>
    <append>-L/soft/netcdf/fortran-4.4-intel-sp1-update3-parallel/lib -lnetcdff -L/soft/hdf5/hdf5-1.8.13-intel-2013-sp1-update3-impi-5.0.0.028/lib -openmp -fPIC -lnetcdf -lnetcdf -L/soft/intel/x86_64/2013/composer_xe_2013/composer_xe_2013_sp1.3.174/mkl/lib/intel64 -lmkl_intel_lp64 -lmkl_core -lmkl_intel_thread -lpthread -lm </append>
  </SLIBS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="mira" COMPILER="ibm">
  <ALBANY_PATH>/projects/ccsm/libs/AlbanyTrilinos/Albany/build/install</ALBANY_PATH>
  <CPPDEFS>
    <append> -DMPASLI_EXTERNAL_INTERFACE_DISABLE_MANGLING </append>
  </CPPDEFS>
  <CXX_LIBS>
    <base> -llapack -lblas -L$ENV{IBM_MAIN_DIR}/xlf/bg/14.1/bglib64 -lxlfmath -lxlf90_r -lxlopt -lxl -L$ENV{IBM_MAIN_DIR}/xlsmp/bg/3.1/bglib64 -lxlsmp </base>
  </CXX_LIBS>
  <CXX_LINKER>CXX</CXX_LINKER>
  <HDF5_PATH>/soft/libraries/hdf5/1.8.14/cnk-xl/current/</HDF5_PATH>
  <!-- This LD is a workaround for darshan initialization on mira (Darshan does -->
  <!-- not run if f90 or higher is used for linking -->
  <LD> mpixlf77_r </LD>
  <MPICC> mpixlc_r </MPICC>
  <MPICXX> /soft/compilers/bgclang/mpi/bgclang/bin/mpic++11 </MPICXX>
  <MPIFC> mpixlf2003_r </MPIFC>
  <NETCDF_PATH>/soft/libraries/netcdf/4.3.3-f4.4.1/cnk-xl/current/</NETCDF_PATH>
  <PETSC_PATH>/soft/libraries/petsc/3.5.3.1</PETSC_PATH>
  <PIO_FILESYSTEM_HINTS>gpfs </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>/soft/libraries/pnetcdf/1.6.0/cnk-xl/current/</PNETCDF_PATH>
  <SCC> mpixlc_r </SCC>
  <SFC> mpixlf2003_r </SFC>
  <SLIBS>
    <append>-L$NETCDF_PATH/lib -lnetcdff -lnetcdf -L$HDF5_PATH/lib -lhdf5_hl -lhdf5 -L/soft/libraries/alcf/current/xl/ZLIB/lib -lz -L/soft/libraries/alcf/current/xl/LAPACK/lib -llapack -L/soft/libraries/alcf/current/xl/BLAS/lib -lblas -L/bgsys/drivers/ppcfloor/comm/sys/lib </append>
    <append compile_threaded="TRUE"> -L$ENV{IBM_MAIN_DIR}/xlf/bg/14.1/bglib64 -lxlfmath -lxlf90_r -lxlopt -lxl -L$ENV{IBM_MAIN_DIR}/xlsmp/bg/3.1/bglib64 -lxlsmp </append>
  </SLIBS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="oic5" COMPILER="gnu">
  <MPICC>/projects/cesm/devtools/mpich-3.0.4-gcc4.8.1/bin/mpicc</MPICC>
  <MPIFC>/projects/cesm/devtools/mpich-3.0.4-gcc4.8.1/bin/mpif90</MPIFC>
  <NETCDF_PATH>/projects/cesm/devtools/netcdf-4.1.3-gcc4.8.1-mpich3.0.4/</NETCDF_PATH>
  <SCC>/projects/cesm/devtools/gcc-4.8.1/bin/gcc</SCC>
  <SCXX>/projects/cesm/devtools/gcc-4.8.1/bin/g++</SCXX>
  <SFC>/projects/cesm/devtools/gcc-4.8.1/bin/gfortran</SFC>
  <SLIBS>
    <append>-L/user/lib64 -llapack -lblas -lnetcdff </append>
  </SLIBS>
</compiler>

<compiler MACH="oic5" COMPILER="pgi">
  <NETCDF_PATH>/home/zdr/opt/netcdf-4.1.3_pgf95</NETCDF_PATH>
</compiler>

<compiler MACH="olympus" COMPILER="intel">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_LIB}/..</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -lpmi </base>
  </SLIBS>
</compiler>

<compiler MACH="olympus" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_LIB}/..</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -lpmi </base>
  </SLIBS>
</compiler>

<compiler MACH="sandiatoss3" COMPILER="intel">
  <ALBANY_PATH>/projects/ccsm/AlbanyTrilinos_20190904/albany-build/install</ALBANY_PATH>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <ESMF_LIBDIR>/projects/ccsm/esmf-6.3.0rp1/lib/libO/Linux.intel.64.openmpi.default</ESMF_LIBDIR>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </FFLAGS>
  <MPI_PATH MPILIB="openmpi">$ENV{MPIHOME}</MPI_PATH>
  <NETCDF_PATH>$ENV{NETCDFROOT}</NETCDF_PATH>
  <PFUNIT_PATH MPILIB="mpi-serial" compile_threaded="FALSE">/projects/ccsm/pfunit/3.2.9/mpi-serial</PFUNIT_PATH>
  <PIO_FILESYSTEM_HINTS>lustre </PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <append>$SHELL{$NETCDF_PATH/bin/nf-config --flibs} -L/projects/ccsm/BLAS-intel -lblas_LINUX -L$ENV{MKL_LIBS} -lmkl_rt</append>
    <append MPILIB="openmpi"> -mkl=cluster </append>
    <append MPILIB="mpi-serial"> -mkl </append>
  </SLIBS>
</compiler>

<compiler MACH="sooty" COMPILER="intel">
  <CFLAGS>
    <append> -std=c99 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX -DCPRINTEL </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -debug minimal </append>
    <append DEBUG="TRUE"> -g -traceback  -O0 -fpe0 -check  all -check noarg_temp_created -ftrapuv </append>
  </FFLAGS>
  <NETCDF_PATH>$ENV{NETCDF_PATH}</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <PNETCDF_PATH>$ENV{PNETCDFROOT}</PNETCDF_PATH>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -lpmi -L$ENV{MKLROOT} -lmkl_rt</base>
  </SLIBS>
</compiler>

<compiler MACH="sooty" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </FFLAGS>
  <NETCDF_PATH> $ENV{NETCDF_LIB}/..</NETCDF_PATH>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SLIBS>
    <base> -L$NETCDF_PATH/lib -lnetcdf -lnetcdff -lpmi </base>
  </SLIBS>
</compiler>

<compiler MACH="stampede2" COMPILER="intel">
  <CFLAGS>
    <append> -xCORE-AVX2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX </append>
    <append COMP_NAME="gptl"> -DHAVE_NANOTIME -DBIT64 -DHAVE_VPRINTF -DHAVE_BACKTRACE -DHAVE_SLASHPROC -DHAVE_COMM_F2C -DHAVE_TIMES -DHAVE_GETTIMEOFDAY </append>
    <append> -DARCH_MIC_KNL </append>
  </CPPDEFS>
  <FFLAGS>
    <base> -convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model consistent -fimf-use-svml </base>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align</append>
    <append> -xCORE-AVX2 </append>
  </FFLAGS>
  <HDF5_PATH>$ENV{TACC_HDF5_DIR}</HDF5_PATH>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpicxx </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <MPI_LIB_NAME>impi</MPI_LIB_NAME>
  <NETCDF_PATH MPILIB="impi">$ENV{TACC_NETCDF_DIR}</NETCDF_PATH>
  <NETCDF_PATH MPILIB="mpi-serial">$ENV{TACC_NETCDF_DIR}</NETCDF_PATH>
  <PETSC_PATH>$ENV{PETSC_DIR}</PETSC_PATH>
  <PNETCDF_PATH MPILIB="impi">$ENV{TACC_PNETCDF_DIR}</PNETCDF_PATH>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <SLIBS>
    <append MPILIB="impi"> -L$NETCDF_PATH -lnetcdff -Wl,--as-needed,-L$NETCDF_PATH/lib -lnetcdff -lnetcdf </append>
    <append MPILIB="mpi-serial"> -L$NETCDF_PATH -lnetcdff -Wl,--as-needed,-L$NETCDF_PATH/lib -lnetcdff -lnetcdf </append>
    <append> -mkl -lpthread </append>
  </SLIBS>
</compiler>

<compiler MACH="summit" COMPILER="gnu">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </FFLAGS>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <SLIBS>
    <append MPILIB="mpi-serial">-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
    <append MPILIB="!mpi-serial"> -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
  </SLIBS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <SCC> gcc </SCC>
  <SCXX> g++ </SCXX>
  <SFC> gfortran </SFC>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="summit-cpu" COMPILER="gnu">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </FFLAGS>
  <LDFLAGS>
    <append>  -Wl,--relax -Wl,--allow-multiple-definition </append>
  </LDFLAGS>
  <SLIBS>
    <append>-lxlopt -lxl -lxlsmp -L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
    <append MPILIB="!mpi-serial"> -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 </append>
  </SLIBS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <SCC> gcc </SCC>
  <SCXX> g++ </SCXX>
  <SFC> gfortran </SFC>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="summit" COMPILER="ibm">
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DLINUX  </append>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <FFLAGS>
    <append> -qzerosize -qfree=f90 -qxlf2003=polymorphic</append>
    <append> -qspillsize=2500 -qextname=flush </append>
    <append COMP_NAME="cice" compile_threaded="TRUE"> -qsmp=omp:noopt </append>
  </FFLAGS>
  <LDFLAGS>
    <append>  -Wl,--relax -Wl,--allow-multiple-definition </append>
  </LDFLAGS>
  <SLIBS>
    <append MPILIB="mpi-serial">-lxlopt -lxl -lxlsmp -L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
    <append MPILIB="!mpi-serial"> -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -lxlopt -lxl -lxlsmp -L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack </append>
  </SLIBS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <SCC> xlc_r </SCC>
  <SFC> xlf90_r </SFC>
  <SCXX> xlc++_r </SCXX>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="summit-cpu" COMPILER="ibm">
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append> -qzerosize -qfree=f90 -qxlf2003=polymorphic</append>
  </FFLAGS>
  <SLIBS>
    <append>-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib64 -llapack</append>
    <append MPILIB="!mpi-serial"> -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 </append>
  </SLIBS>
  <MPICC> mpixlc </MPICC>
  <MPICXX> mpixlC </MPICXX>
  <MPIFC> mpixlf </MPIFC>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <SCC> xlc_r </SCC>
  <SFC> xlf_r </SFC>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
</compiler>

<compiler MACH="summit" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -DSUMMITDEV_PGI </append>
  </FFLAGS>
  <CPPDEFS>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <SLIBS>
    <append MPILIB="mpi-serial">-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
    <append MPILIB="!mpi-serial"> -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
  </SLIBS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <!--
  Summit (backup in case defaults are not picking up):
  <CXX_LIBS>
    <base>/sw/summit/gcc/6.4.0/lib/gcc/powerpc64le-none-linux-gnu/6.4.0/crtbegin.o -L/sw/summit/gcc/6.4.0/lib64 -lstdc++ -latomic</base>
  </CXX_LIBS>
  -->
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <SCC> pgcc </SCC>
  <SCXX> pgc++ </SCXX>
  <SFC> pgfortran </SFC>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="summit-cpu" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 -Mvect=nosimd </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -Mvect=nosimd -DSUMMITDEV_PGI </append>
  </FFLAGS>
  <FFLAGS>
    <append DEBUG="TRUE"> -DSUMMITDEV_PGI </append>
  </FFLAGS>
  <CPPDEFS>
    <append> -DGPU </append>
  </CPPDEFS>
  <KOKKOS_OPTIONS> --arch=Power9,Volta70 --with-cuda=$ENV{CUDA_DIR} --with-cuda-options=enable_lambda</KOKKOS_OPTIONS>
  <LDFLAGS>
    <append>-ta=tesla:cc70,pinned</append>
  </LDFLAGS>
  <SLIBS>
    <append>-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
    <append MPILIB="!mpi-serial"> -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 </append>
  </SLIBS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <SCC> pgcc </SCC>
  <SFC> pgfortran </SFC>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
</compiler>

<compiler MACH="summit" COMPILER="pgigpu">
  <CPPDEFS>
    <append> -DFORTRANUNDERSCORE </append>
  </CPPDEFS>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 -Mvect=nosimd </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -Mvect=nosimd -DSUMMITDEV_PGI -DHAVE_IEEE_ARITHMETIC -DNO_R16 </append>
  </FFLAGS>
  <FFLAGS>
    <append DEBUG="TRUE"> -DSUMMITDEV_PGI -DHAVE_IEEE_ARITHMETIC -DNO_R16 </append>
  </FFLAGS>
  <SLIBS>
    <append>-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
  </SLIBS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <SCC> pgcc </SCC>
  <SFC> pgfortran </SFC>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
</compiler>

<compiler MACH="summit" COMPILER="pgiacc">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -DSUMMITDEV_PGI </append>
  </FFLAGS>
  <CPPDEFS>
    <append> -DGPU </append>
    <append COMP_NAME="gptl"> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <KOKKOS_OPTIONS> --arch=Power9,Volta70 --with-cuda=$ENV{CUDA_DIR} --with-cuda-options=enable_lambda</KOKKOS_OPTIONS>
  <LDFLAGS>
    <append>-ta=tesla:cc70,pinned</append>
  </LDFLAGS>
  <SLIBS>
    <append MPILIB="mpi-serial">-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
    <append MPILIB="!mpi-serial"> -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
  </SLIBS>
  <CXX_LINKER>FORTRAN</CXX_LINKER>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <PIO_FILESYSTEM_HINTS>gpfs</PIO_FILESYSTEM_HINTS>
  <SCC> pgcc </SCC>
  <SFC> pgfortran </SFC>
  <NETCDF_C_PATH>$ENV{NETCDF_C_PATH}</NETCDF_C_PATH>
  <NETCDF_FORTRAN_PATH>$ENV{NETCDF_FORTRAN_PATH}</NETCDF_FORTRAN_PATH>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="summitdev" COMPILER="ibm">
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append> -qzerosize -qfree=f90 -qxlf2003=polymorphic</append>
  </FFLAGS>
  <SLIBS>
    <append>-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib64 -llapack</append>
  </SLIBS>
  <MPICC> mpixlc </MPICC>
  <MPICXX> mpixlC </MPICXX>
  <MPIFC> mpixlf </MPIFC>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SCC> xlc_r </SCC>
  <SFC> xlf_r </SFC>
</compiler>

<compiler MACH="summitdev" COMPILER="pgi">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -DSUMMITDEV_PGI </append>
  </FFLAGS>
  <SLIBS>
    <append>-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
  </SLIBS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SCC> pgcc </SCC>
  <SFC> pgfortran </SFC>
</compiler>

<compiler MACH="summitdev" COMPILER="pgiacc">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 -DSUMMITDEV_PGI </append>
  </FFLAGS>
  <LDFLAGS>
    <!-- Specifying cc60 implies cuda8.0, just making sure -->
    <append>-ta=tesla:cc60,cuda8.0,pinned</append>
  </LDFLAGS>
  <SLIBS>
    <append>-L$ENV{NETCDF_C_PATH}/lib -lnetcdf -L$ENV{NETCDF_FORTRAN_PATH}/lib -lnetcdff -L$ENV{PNETCDF_PATH}/lib -lpnetcdf -L$ENV{HDF5_PATH}/lib -lhdf5_hl -lhdf5 -L$ENV{ESSL_PATH}/lib64 -lessl -L$ENV{NETLIB_LAPACK_PATH}/lib -llapack</append>
  </SLIBS>
  <MPICC> mpicc </MPICC>
  <MPICXX> mpiCC </MPICXX>
  <MPIFC> mpif90 </MPIFC>
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <SCC> pgcc </SCC>
  <SFC> pgfortran </SFC>
</compiler>

<compiler MACH="syrah" COMPILER="intel">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DNO_SHR_VMATH -DCNL </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append DEBUG="TRUE"> -g -traceback  -O0 -fpe0 -check  all -check noarg_temp_created -ftrapuv </append>
  </FFLAGS>
  <SLIBS>
    <append> -llapack -lblas</append>
  </SLIBS>
  <MPI_LIB_NAME> mpich</MPI_LIB_NAME>
  <MPI_PATH>/usr/tce/packages/mvapich2/mvapich2-2.2-intel-18.0.1/</MPI_PATH>
  <NETCDF_PATH>/usr/tce/packages/netcdf-fortran/netcdf-fortran-4.4.4-intel-18.0.1/</NETCDF_PATH>
  <SLIBS>
    <append>$SHELL{/usr/tce/packages/netcdf-fortran/netcdf-fortran-4.4.4-intel-18.0.1/bin/nf-config --flibs}</append>
  </SLIBS>
</compiler>

<compiler MACH="quartz" COMPILER="intel">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DNO_SHR_VMATH -DCNL </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append DEBUG="TRUE"> -g -traceback  -O0 -fpe0 -check  all -check noarg_temp_created -ftrapuv </append>
  </FFLAGS>
  <SLIBS>
    <append> -llapack -lblas</append>
  </SLIBS>
  <MPI_LIB_NAME> mpich</MPI_LIB_NAME>
  <MPI_PATH>/usr/tce/packages/mvapich2/mvapich2-2.2-intel-18.0.1/</MPI_PATH>
  <NETCDF_PATH>/usr/tce/packages/netcdf-fortran/netcdf-fortran-4.4.4-intel-18.0.1/</NETCDF_PATH>
  <SLIBS>
    <append>$SHELL{/usr/tce/packages/netcdf-fortran/netcdf-fortran-4.4.4-intel-18.0.1/bin/nf-config --flibs}</append>
  </SLIBS>
</compiler>

<compiler MACH="theta" COMPILER="gnu">
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
    <append DEBUG="TRUE"> -O0 </append>
  </CFLAGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
    <append DEBUG="TRUE"> -O0 </append>
  </FFLAGS>
  <SLIBS>
    <append>$SHELL{nf-config --flibs}</append>
  </SLIBS>
  <CXX_LIBS>
    <base>-lstdc++</base>
  </CXX_LIBS>
</compiler>

<compiler MACH="theta" COMPILER="intel">
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DARCH_MIC_KNL </append>
  </CPPDEFS>
  <FFLAGS>
    <base>-convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model consistent</base>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align -fp-speculation=off</append>
    <append> -DHAVE_ERF_INTRINSICS </append>
  </FFLAGS>
  <SCC> icc </SCC>
  <SCXX> icpc </SCXX>
  <SFC> ifort </SFC>
  <SLIBS>
    <append> -L$ENV{NETCDF_DIR}/lib -lnetcdff -L$ENV{NETCDF_DIR}/lib -lnetcdf -Wl,-rpath -Wl,$ENV{NETCDF_DIR}/lib </append>
    <append> -mkl -lpthread </append>
  </SLIBS>
</compiler>

<compiler MACH="jlse" COMPILER="intel">
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append> -DHAVE_SLASHPROC </append>
  </CPPDEFS>
  <FFLAGS>
    <base>-convert big_endian -assume byterecl -ftz -traceback -assume realloc_lhs -fp-model consistent</base>
    <append DEBUG="FALSE"> -O2 -debug minimal -qno-opt-dynamic-align -fp-speculation=off</append>
  </FFLAGS>
  <MPIFC>mpiifort</MPIFC>
  <MPICC>mpiicc</MPICC>
  <MPICXX>mpiicpc</MPICXX>
  <SCC>icc</SCC>
  <SCXX>icpc</SCXX>
  <SFC>ifort</SFC>
  <SLIBS>
    <append>$SHELL{$(NETCDF_PATH)/bin/nf-config --flibs} -Wl,-rpath -Wl,$ENV{NETCDF_PATH}/lib -mkl</append>
  </SLIBS>
</compiler>

<compiler MACH="jlse" COMPILER="gnu">
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </CFLAGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2  </append>
  </FFLAGS>
  <SLIBS>
    <append>$SHELL{$(NETCDF_PATH)/bin/nf-config --flibs} -Wl,-rpath -Wl,$(NETCDF_PATH)/lib -L/home/azamat/soft/libs -llapack -lblas</append>
  </SLIBS>
</compiler>

<compiler MACH="titan" COMPILER="intel">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </FFLAGS>
  <SLIBS>
    <append MPILIB="mpich">$SHELL{nf-config --flibs} -mkl=cluster </append>
    <append MPILIB="mpich2">$SHELL{nf-config --flibs}  -mkl=cluster </append>
    <append MPILIB="mpt">$SHELL{nf-config --flibs} -mkl=cluster </append>
    <append MPILIB="openmpi">$SHELL{nf-config --flibs} -mkl=cluster </append>
    <append MPILIB="mvapich">$SHELL{nf-config --flibs} -mkl=cluster </append>
    <append MPILIB="impi">$SHELL{nf-config --flibs} -mkl=cluster </append>
    <!-- mx: the cray-netcdf has wrong configuration on titan, so have to specify the lib path explicitly  -->
    <append MPILIB="mpi-serial"> -L/opt/cray/netcdf/4.4.1.1.3/INTEL/16.0/lib -lnetcdff -L/opt/cray/hdf5/1.10.0.3/GNU/4.9/lib -lnetcdf -mkl </append>
  </SLIBS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="titan" COMPILER="pgi">
  <ALBANY_PATH>/ccs/proj/cli106/AlbanyTrilinos/Albany/build/install</ALBANY_PATH>
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CXX_LIBS>
    <base> -lfmpich -lmpichf90_pgi $ENV{PGI_PATH}/linux86-64/$ENV{PGI_VERSION}/lib/f90main.o /opt/gcc/default/snos/lib64/libstdc++.a  </base>
  </CXX_LIBS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
    <append COMP_NAME="glc"> -target-cpu=istanbul </append>
  </FFLAGS>
  <SLIBS>
    <append MPILIB="mpich">$SHELL{nf-config --flibs} </append>
    <append MPILIB="mpich2">$SHELL{nf-config --flibs} </append>
    <append MPILIB="mpt">$SHELL{nf-config --flibs} </append>
    <append MPILIB="openmpi">$SHELL{nf-config --flibs} </append>
    <append MPILIB="mvapich">$SHELL{nf-config --flibs} </append>
    <append MPILIB="impi">$SHELL{nf-config --flibs} </append>
    <!-- mx: the cray-netcdf has wrong configuration on titan, so have to specify the lib path explicitly  -->
    <append MPILIB="mpi-serial"> -L/opt/cray/netcdf/4.4.1.1.3/PGI/15.3/lib -lnetcdff -L/opt/cray/hdf5/1.10.0.3/GNU/4.9/lib -lnetcdf </append>
  </SLIBS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="titan" COMPILER="pgiacc">
  <CFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </CFLAGS>
  <CONFIG_ARGS>
    <base> --host=Linux </base>
  </CONFIG_ARGS>
  <CXX_LIBS>
    <base> -lfmpich -lmpichf90_pgi $ENV{PGI_PATH}/linux86-64/$ENV{PGI_VERSION}/lib/f90main.o </base>
  </CXX_LIBS>
  <FFLAGS>
    <append DEBUG="FALSE"> -O2 </append>
  </FFLAGS>
  <LDFLAGS>
    <append>-ta=nvidia,cc35,cuda7.5</append>
  </LDFLAGS>
  <SLIBS>
    <append>$SHELL{$ENV{NETCDF_PATH}/bin/nf-config --flibs} </append>
  </SLIBS>
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
</compiler>

<compiler MACH="grizzly" COMPILER="gnu">
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <MPICC>mpicc</MPICC>
  <MPIFC>mpif90</MPIFC>
  <MPICXX>mpic++</MPICXX>
  <SFC>gfortran</SFC>
  <SCC>gcc</SCC>
  <SCXX>g++</SCXX>
  <SLIBS>
    <append>$SHELL{$ENV{NETCDF_PATH}/bin/nf-config --flibs} -llapack -lblas</append>
    <append>$ENV{MKLROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group $ENV{MKLROOT}/lib/intel64/libmkl_intel_lp64.a $ENV{MKLROOT}/lib/intel64/libmkl_core.a $ENV{MKLROOT}/lib/intel64/libmkl_sequential.a -Wl,--end-group $ENV{MKLROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -lpthread -lm -z muldefs</append>
  </SLIBS>
  <CXX_LIBS>
    <base>-lstdc++ -lmpi_cxx</base>
  </CXX_LIBS>
</compiler>

<compiler MACH="grizzly" COMPILER="intel">
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <MPICC>mpicc</MPICC>
  <MPIFC>mpif90</MPIFC>
  <MPICXX>mpic++</MPICXX>
  <SFC>ifort</SFC>
  <SCC>icc</SCC>
  <SCXX>icpc</SCXX>
  <SLIBS>
    <append>$SHELL{$ENV{NETCDF_PATH}/bin/nf-config --flibs} -llapack -lblas</append>
    <append>-mkl -lpthread</append>
  </SLIBS>
  <CXX_LIBS>
    <base>-lstdc++ -lmpi_cxx</base>
  </CXX_LIBS>
</compiler>

<compiler MACH="badger" COMPILER="gnu">
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <MPICC>mpicc</MPICC>
  <MPIFC>mpif90</MPIFC>
  <MPICXX>mpic++</MPICXX>
  <SFC>gfortran</SFC>
  <SCC>gcc</SCC>
  <SCXX>g++</SCXX>
  <SLIBS>
    <append>$SHELL{$ENV{NETCDF_PATH}/bin/nf-config --flibs} -llapack -lblas</append>
    <append>$ENV{MKLROOT}/lib/intel64/libmkl_scalapack_lp64.a -Wl,--start-group $ENV{MKLROOT}/lib/intel64/libmkl_intel_lp64.a $ENV{MKLROOT}/lib/intel64/libmkl_core.a $ENV{MKLROOT}/lib/intel64/libmkl_sequential.a -Wl,--end-group $ENV{MKLROOT}/lib/intel64/libmkl_blacs_intelmpi_lp64.a -lpthread -lm -z muldefs</append>
  </SLIBS>
  <CXX_LIBS>
    <base>-lstdc++ -lmpi_cxx</base>
  </CXX_LIBS>
</compiler>

<compiler MACH="badger" COMPILER="intel">
  <PIO_FILESYSTEM_HINTS>lustre</PIO_FILESYSTEM_HINTS>
  <MPICC>mpicc</MPICC>
  <MPIFC>mpif90</MPIFC>
  <MPICXX>mpic++</MPICXX>
  <SFC>ifort</SFC>
  <SCC>icc</SCC>
  <SCXX>icpc</SCXX>
  <SLIBS>
    <append>$SHELL{$ENV{NETCDF_PATH}/bin/nf-config --flibs} -llapack -lblas</append>
    <append>-mkl -lpthread</append>
  </SLIBS>
  <CXX_LIBS>
    <base>-lstdc++ -lmpi_cxx</base>
  </CXX_LIBS>
  <CFLAGS>
    <base>compile_threaded="TRUE"> -qopenmp</base>
  </CFLAGS>
  <FFLAGS>
    <base>compile_threaded="TRUE"> -qopenmp</base>
  </FFLAGS>
  <LDFLAGS>
    <base>compile_threaded="TRUE"> -qopenmp</base>
  </LDFLAGS>
</compiler>

<compiler COMPILER="gnu" MACH="modex">
  <SUPPORTS_CXX>TRUE</SUPPORTS_CXX>
  <CPPDEFS>
     <append MODEL="gptl"> -DHAVE_VPRINTF -DHAVE_GETTIMEOFDAY -DHAVE_BACKTRACE </append>
  </CPPDEFS>
  <FFLAGS>
    <append DEBUG="FALSE">-fno-unsafe-math-optimizations</append>
    <append DEBUG="TRUE"> -g -fbacktrace -fbounds-check -ffpe-trap=invalid,zero,overflow</append>
  </FFLAGS>
  <SLIBS>
    <append> -L$ENV{HDF5_HOME}/lib -lhdf5_fortran -lhdf5 -lhdf5_hl -lhdf5hl_fortran </append>
    <append> -L$ENV{NETCDF_PATH}/lib/ -lnetcdff -lnetcdf -lcurl -lblas -llapack</append>
  </SLIBS>
  <HDF5_PATH>$ENV{HDF5_HOME}</HDF5_PATH>
  <NETCDF_PATH>$ENV{NETCDF_PATH}</NETCDF_PATH>
  <!--<SCC MPILIB="mpi-serial">gcc</SCC>
  <SFC MPILIB="mpi-serial">gfortran</SFC>-->
</compiler>

<compiler MACH="userdefined">
  <CONFIG_ARGS>
    <base/>
  </CONFIG_ARGS>
  <CPPDEFS>
    <append/>
  </CPPDEFS>
  <ESMF_LIBDIR/>
  <MPI_LIB_NAME/>
  <MPI_PATH/>
  <NETCDF_PATH> USERDEFINED_MUST_EDIT_THIS</NETCDF_PATH>
  <PNETCDF_PATH/>
  <SLIBS>
    <append># USERDEFINED $SHELL{$NETCDF_PATH/bin/nf-config --flibs}</append>
  </SLIBS>
</compiler>

</config_compilers>
