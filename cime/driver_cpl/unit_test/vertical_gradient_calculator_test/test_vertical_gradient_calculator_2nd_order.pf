module test_vertical_gradient_calculator_2nd_order

  ! Tests of vertical_gradient_calculator_2nd_order

  use pfunit_mod
  use vertical_gradient_calculator_base
  use vertical_gradient_calculator_2nd_order
  use shr_kind_mod, only : r8 => shr_kind_r8
  implicit none

  real(r8), parameter :: tol = 1.e-13_r8

  @TestCase
  type, extends(TestCase) :: TestVertGradCalc2ndOrder
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: create_calculator
     procedure :: calculateAndVerifyGradient_1point_ECmid
  end type TestVertGradCalc2ndOrder

contains

  subroutine setUp(this)
    class(TestVertGradCalc2ndOrder), intent(inout) :: this

  end subroutine setUp

  subroutine tearDown(this)
    class(TestVertGradCalc2ndOrder), intent(inout) :: this

  end subroutine tearDown

  function create_calculator(this, topo, data, elevclass_bounds) &
       result(calculator)
    type(vertical_gradient_calculator_2nd_order_type) :: calculator
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), intent(in) :: topo(:,:)  ! topo(i,j) is point i, elevation class j
    real(r8), intent(in) :: data(:,:)  ! data(i,j) is point i, elevation class j

    ! bounds of each elevation class; this array should have one more element than the
    ! number of elevation classes, since it contains lower and upper bounds for each
    ! elevation class
    real(r8), intent(in) :: elevclass_bounds(:)

    integer :: n_elev_classes

    n_elev_classes = size(data,2)
    @assertEqual(size(data), size(topo))
    @assertEqual(n_elev_classes + 1, size(elevclass_bounds))

    calculator = vertical_gradient_calculator_2nd_order_type( &
         field = data, &
         topo = topo, &
         elevclass_bounds = elevclass_bounds)
    call calculator%calc_gradients()

  end function create_calculator

  subroutine calculateAndVerifyGradient_1point_ECmid(this, &
       elevclass_bounds, topo, data, expected_vertical_gradient, &
       msg)
    ! Parameterized test: Setup a vertical gradient calculator for a single point with 3
    ! ECs, calculate the vertical gradient for the middle EC, and verify that the
    ! vertical gradient matches the expected vertical gradient
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), intent(in) :: elevclass_bounds(:)  ! elevation class bounds (should be size 4)
    real(r8), intent(in) :: topo(:)  ! topographic height for each EC (should be size 3)
    real(r8), intent(in) :: data(:)  ! data for each EC (should be size 3)
    real(r8), intent(in) :: expected_vertical_gradient
    character(len=*), intent(in) :: msg  ! message to print if test fails

    type(vertical_gradient_calculator_2nd_order_type) :: calculator
    real(r8) :: vertical_gradient(1)

    ! Check arguments
    @assertEqual(4, size(elevclass_bounds))
    @assertEqual(3, size(topo))
    @assertEqual(3, size(data))

    ! Setup
    calculator = this%create_calculator( &
         topo = reshape(topo, [1, 3]), &
         data = reshape(data, [1, 3]), &
         elevclass_bounds = elevclass_bounds)

    ! Exercise
    call calculator%get_gradients_one_class(2, vertical_gradient)

    ! Verify
    @assertEqual(expected_vertical_gradient, vertical_gradient(1), tolerance=tol, message = msg)
  end subroutine calculateAndVerifyGradient_1point_ECmid

  @Test
  subroutine ECmid(this)
    ! Test with an elevation class in the middle of the range (standard case, not an edge
    ! case). This uses a single grid cell.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [11._r8, 12._r8,  13._r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = (data(3) - data(1)) / (topo(3) - topo(1))
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid')
  end subroutine ECmid

  @Test
  subroutine ECmid_almostLimitedPositiveLB(this)
    ! Make sure that a positive gradient that should *almost* (but not quite) be limited
    ! by the limiter (due to the lower bound) isn't limited.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [11._r8, 12._r8,  19.9999_r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = (data(3) - data(1)) / (topo(3) - topo(1))
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_almostLimitedPositiveLB')
  end subroutine ECmid_almostLimitedPositiveLB

  @Test
  subroutine ECmid_almostLimitedPositiveUB(this)
    ! Make sure that a positive gradient that should *almost* (but not quite) be limited
    ! by the limiter (due to the upper bound) isn't limited.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [10.0001_r8, 12._r8,  13._r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = (data(3) - data(1)) / (topo(3) - topo(1))
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_almostLimitedPositiveUB')
  end subroutine ECmid_almostLimitedPositiveUB

  @Test
  subroutine ECmid_almostLimitedNegativeLB(this)
    ! Make sure that a negative gradient that should *almost* (but not quite) be limited
    ! by the limiter (due to the lower bound) isn't limited.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [13._r8, 12._r8,  4.0001_r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = (data(3) - data(1)) / (topo(3) - topo(1))
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_almostLimitedNegativeLB')
  end subroutine ECmid_almostLimitedNegativeLB

  @Test
  subroutine ECmid_almostLimitedNegativeUB(this)
    ! Make sure that a negative gradient that should *almost* (but not quite) be limited
    ! by the limiter (due to the upper bound) isn't limited.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [13.9999_r8, 12._r8,  11._r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = (data(3) - data(1)) / (topo(3) - topo(1))
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_almostLimitedNegativeUB')
  end subroutine ECmid_almostLimitedNegativeUB

  @Test
  subroutine ECbottom(this)
    ! Test with an elevation class at the bottom edge. This uses a single grid cell.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    type(vertical_gradient_calculator_2nd_order_type) :: calculator
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(1,3) = reshape([40._r8, 125._r8, 275._r8], [1,3])
    real(r8), parameter :: data(1,3) = reshape([11._r8, 12._r8,  13._r8], [1,3])
    real(r8) :: vertical_gradient(1)
    real(r8) :: expected_vertical_gradient(1)

    calculator = this%create_calculator(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    call calculator%get_gradients_one_class(1, vertical_gradient)

    expected_vertical_gradient(1) = (data(1,2) - data(1,1)) / (topo(1,2) - topo(1,1))
    @assertEqual(expected_vertical_gradient, vertical_gradient, tolerance=tol)
    
  end subroutine ECbottom
  
  @Test
  subroutine ECtop(this)
    ! Test with an elevation class at the top edge. This uses a single grid cell.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    type(vertical_gradient_calculator_2nd_order_type) :: calculator
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(1,3) = reshape([50._r8, 125._r8, 275._r8], [1,3])
    real(r8), parameter :: data(1,3) = reshape([11._r8, 12._r8,  13._r8], [1,3])
    real(r8) :: vertical_gradient(1)
    real(r8) :: expected_vertical_gradient(1)

    calculator = this%create_calculator(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)
    
    call calculator%get_gradients_one_class(3, vertical_gradient)

    expected_vertical_gradient(1) = (data(1,3) - data(1,2)) / (topo(1,3) - topo(1,2))
    @assertEqual(expected_vertical_gradient, vertical_gradient, tolerance=tol)
    
  end subroutine ECtop

  @Test
  subroutine OneEC(this)
    ! Test with a single elevation class. This uses a single grid cell.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    type(vertical_gradient_calculator_2nd_order_type) :: calculator
    real(r8), parameter :: elevclass_bounds(2) = [0._r8, 100._r8]
    real(r8), parameter :: topo(1,1) = reshape([50._r8], [1,1])
    real(r8), parameter :: data(1,1) = reshape([11._r8], [1,1])
    real(r8) :: vertical_gradient(1)
    real(r8) :: expected_vertical_gradient(1)

    calculator = this%create_calculator(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)
    
    call calculator%get_gradients_one_class(1, vertical_gradient)

    expected_vertical_gradient(1) = 0._r8
    @assertEqual(expected_vertical_gradient, vertical_gradient, tolerance=tol)

  end subroutine OneEC
    
  @Test
  subroutine toposEqual(this)
    ! Test with topo values equal - make sure this edge case is handled correctly.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    type(vertical_gradient_calculator_2nd_order_type) :: calculator
    real(r8), parameter :: elevclass_bounds(3) = [0._r8, 100._r8, 200._r8]
    real(r8), parameter :: topo(1,2) = reshape([100._r8, 100._r8], [1,2])
    real(r8), parameter :: data(1,2) = reshape([11._r8, 12._r8], [1,2])
    real(r8) :: vertical_gradient(1)
    real(r8) :: expected_vertical_gradient(1)

    calculator = this%create_calculator(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)
    
    call calculator%get_gradients_one_class(2, vertical_gradient)

    expected_vertical_gradient(1) = 0._r8
    @assertEqual(expected_vertical_gradient, vertical_gradient, tolerance=tol)
    
  end subroutine toposEqual

  ! ------------------------------------------------------------------------
  ! Tests that trigger the limiter
  ! ------------------------------------------------------------------------

  @Test
  subroutine ECmid_limitedLocalMaximum(this)
    ! If values go low, high, low, then gradient should be 0
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [11._r8, 12._r8,  10._r8]
    real(r8), parameter :: expected_vertical_gradient = 0._r8

    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_limitedLocalMaximum')
  end subroutine ECmid_limitedLocalMaximum

  @Test
  subroutine ECmid_limitedLocalMinimum(this)
    ! If values go high, low, high, then gradient should be 0
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [13._r8, 12._r8,  14._r8]
    real(r8), parameter :: expected_vertical_gradient = 0._r8

    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_limitedLocalMinimum')
  end subroutine ECmid_limitedLocalMinimum

  @Test
  subroutine ECmid_limitedPositiveLB(this)
    ! Make sure that a positive gradient that should be limited by the limiter (due to the
    ! lower bound) is in fact limited.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [11._r8, 12._r8,  21._r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = 1._r8/25._r8
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_limitedPositiveLB')
  end subroutine ECmid_limitedPositiveLB

  @Test
  subroutine ECmid_limitedPositiveUB(this)
    ! Make sure that a positive gradient that should be limited by the limiter (due to the
    ! upper bound) is in fact limited.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [9._r8, 12._r8,  13._r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = 1._r8/75._r8
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_limitedPositiveUB')
  end subroutine ECmid_limitedPositiveUB

  @Test
  subroutine ECmid_limitedNegativeLB(this)
    ! Make sure that a negative gradient that should be limited by the limiter (due to the
    ! lower bound) is in fact limited.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [13._r8, 12._r8,  3._r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = -1._r8/25._r8
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_limitedNegativeLB')
  end subroutine ECmid_limitedNegativeLB

  @Test
  subroutine ECmid_limitedNegativeUB(this)
    ! Make sure that a negative gradient that should be limited by the limiter (due to the
    ! upper bound) is in fact limited.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    real(r8), parameter :: topo(3) = [50._r8, 125._r8, 275._r8]
    real(r8), parameter :: data(3) = [15._r8, 12._r8,  11._r8]
    real(r8) :: expected_vertical_gradient

    expected_vertical_gradient = -1._r8/75._r8
    call this%calculateAndVerifyGradient_1point_ECmid( &
         elevclass_bounds = elevclass_bounds, &
         topo = topo, &
         data = data, &
         expected_vertical_gradient = expected_vertical_gradient, &
         msg = 'ECmid_limitedNegativeUB')
  end subroutine ECmid_limitedNegativeUB

  ! ------------------------------------------------------------------------
  ! Test that demonstrates that we can still have non-monotonic behavior
  !
  ! Unlike most tests, this test isn't necessarily something we want - it is just a
  ! demonstration of current behavior. So this test can be removed if this behavior
  ! changes.
  ! ------------------------------------------------------------------------

  @Test
  subroutine evenWithLimiter_canStillBeNonMonotonic(this)
    ! This test demonstrates that, even though the incoming values are monotonic, the
    ! interpolated values are not.
    !
    ! Unlike most tests, this test isn't necessarily something we want - it is just a
    ! demonstration of current behavior. So this test can be removed if this behavior
    ! changes.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    type(vertical_gradient_calculator_2nd_order_type) :: calculator
    real(r8), parameter :: elevclass_bounds(5) = [0._r8, 100._r8, 200._r8, 300._r8, 400._r8]
    real(r8), parameter :: topo(1,4) = reshape([50._r8, 125._r8, 275._r8, 350._r8], [1,4])
    real(r8), parameter :: data(1,4) = reshape([9._r8,  12._r8,  13._r8 , 14._r8], [1,4])
    real(r8) :: vertical_gradient_ec2(1)
    real(r8) :: vertical_gradient_ec3(1)
    real(r8) :: value_200m_ec2
    real(r8) :: value_200m_ec3
    real(r8) :: value_199m
    real(r8) :: value_201m

    calculator = this%create_calculator(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    call calculator%get_gradients_one_class(2, vertical_gradient_ec2)
    call calculator%get_gradients_one_class(3, vertical_gradient_ec3)

    ! Show non-monotonicity in two ways:

    ! (1) value at 200m in EC2 > value at 200m in EC3
    value_200m_ec2 = data(1,2) + vertical_gradient_ec2(1) * (200._r8 - topo(1,2))
    value_200m_ec3 = data(1,3) + vertical_gradient_ec3(1) * (200._r8 - topo(1,3))
    @assertEqual(13._r8, value_200m_ec2, tolerance=tol)
    ! In the following, use 12.9 rather than 13 to show that value_200m_ec3 is even less
    ! than 12.9 (i.e., it's not just a roundoff problem)
    @assertGreaterThan(12.9_r8, value_200m_ec3)

    ! (2) value at 199m (in EC2) > value at 201m (in EC3)
    value_199m = data(1,2) + vertical_gradient_ec2(1) * (199._r8 - topo(1,2))
    value_201m = data(1,3) + vertical_gradient_ec3(1) * (201._r8 - topo(1,3))
    @assertGreaterThan(value_199m, value_201m)

  end subroutine evenWithLimiter_canStillBeNonMonotonic

  ! ------------------------------------------------------------------------
  ! Tests with multiple points
  ! ------------------------------------------------------------------------

  @Test
  subroutine multiplePoints(this)
    ! Test with multiple grid cells. One has topo values equal, two are normal cases.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    type(vertical_gradient_calculator_2nd_order_type) :: calculator

    integer, parameter :: npts = 3
    integer, parameter :: nelev = 2
    real(r8), parameter :: elevclass_bounds(3) = [0._r8, 100._r8, 200._r8]
    ! In the following, each line is one elevation class (with all points for that
    ! elevation class)
    real(r8), parameter :: topo(npts,nelev) = reshape( &
         [50._r8, 100._r8, 99._r8, &
         125._r8, 100._r8, 101._r8], &
         [npts,nelev])
    real(r8), parameter :: data(npts,nelev) = reshape( &
         [11._r8, 100._r8, 1000._r8, &
          12._r8, 200._r8, 2000._r8], &
          [npts,nelev])

    real(r8) :: vertical_gradient(npts)
    real(r8) :: expected_vertical_gradient(npts)

    calculator = this%create_calculator(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)
    
    call calculator%get_gradients_one_class(2, vertical_gradient)

    expected_vertical_gradient(1) = (data(1,2) - data(1,1)) / (topo(1,2) - topo(1,1))
    expected_vertical_gradient(2) = 0._r8
    expected_vertical_gradient(3) = (data(3,2) - data(3,1)) / (topo(3,2) - topo(3,1))
    @assertEqual(expected_vertical_gradient, vertical_gradient, tolerance=tol)
    
  end subroutine multiplePoints

  @Test
  subroutine multiplePoints_someLimited(this)
    ! Test with multiple grid cells, some (but not all) of which trigger the limiter.
    class(TestVertGradCalc2ndOrder), intent(inout) :: this
    type(vertical_gradient_calculator_2nd_order_type) :: calculator

    integer, parameter :: npts = 3
    integer, parameter :: nelev = 3
    real(r8), parameter :: elevclass_bounds(4) = [0._r8, 100._r8, 200._r8, 300._r8]
    ! In the following, each line is one elevation class (with all points for that
    ! elevation class)
    real(r8), parameter :: topo(npts,nelev) = reshape( &
         [50._r8, 50._r8, 50._r8, &
         125._r8, 125._r8, 125._r8, &
         275._r8, 275._r8, 275._r8], &
         [npts,nelev])
    ! points are: limited by lower bound, non-limited, limited by upper bound
    real(r8), parameter :: data(npts,nelev) = reshape( &
         [11._r8, 11._r8, 9._r8, &
         12._r8, 12._r8, 12._r8, &
         21._r8, 13._r8, 13._r8], &
         [npts,nelev])

    real(r8) :: vertical_gradient(npts)
    real(r8) :: expected_vertical_gradient(npts)

    calculator = this%create_calculator(topo=topo, data=data, &
         elevclass_bounds=elevclass_bounds)

    call calculator%get_gradients_one_class(2, vertical_gradient)

    expected_vertical_gradient(1) = 1._r8/25._r8
    expected_vertical_gradient(2) = 2._r8/225._r8
    expected_vertical_gradient(3) = 1._r8/75._r8
    @assertEqual(expected_vertical_gradient, vertical_gradient, tolerance=tol)
  end subroutine multiplePoints_someLimited
  
end module test_vertical_gradient_calculator_2nd_order
