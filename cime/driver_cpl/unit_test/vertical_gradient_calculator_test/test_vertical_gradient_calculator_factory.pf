module test_vertical_gradient_calculator_factory

  ! Tests of vertical_gradient_calculator_factory

  use pfunit_mod
  use vertical_gradient_calculator_factory
  use shr_kind_mod , only : r8 => shr_kind_r8
  use mct_mod, only : mct_aVect, mct_aVect_clean
  use mct_wrapper_mod, only : mct_init, mct_clean
  use avect_wrapper_mod

  implicit none

  @TestCase
  type, extends(TestCase) :: TestVertGradCalcFactory
     type(mct_aVect) :: av
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestVertGradCalcFactory

  real(r8), parameter :: tol = 1.e-13_r8

contains

  subroutine setUp(this)
    class(TestVertGradCalcFactory), intent(inout) :: this

    call mct_init()
  end subroutine setUp

  subroutine tearDown(this)
    class(TestVertGradCalcFactory), intent(inout) :: this

    call mct_aVect_clean(this%av)
    call mct_clean()
  end subroutine tearDown

  function two_digit_string(val)
    ! Converts val to a two-digit string
    character(len=2) :: two_digit_string
    integer, intent(in) :: val

    write(two_digit_string, '(i2.2)') val
  end function two_digit_string

  function elevclass_names(n_elev_classes)
    ! Returns array of elevation class names
    integer, intent(in) :: n_elev_classes
    character(len=16) :: elevclass_names(n_elev_classes)

    integer :: i

    do i = 1, n_elev_classes
       elevclass_names(i) = two_digit_string(i)
    end do
  end function elevclass_names

  subroutine create_av(topo, data, toponame, dataname, av)
    ! Creates the attribute vector 'av'
    real(r8), intent(in) :: topo(:,:)  ! topo(i,j) is point i, elevation class j
    real(r8), intent(in) :: data(:,:)  ! data(i,j) is point i, elevation class j
    character(len=*), intent(in) :: toponame
    character(len=*), intent(in) :: dataname
    type(mct_aVect), intent(out) :: av

    integer :: npts
    integer :: n_elev_classes
    integer :: elevclass
    character(len=64), allocatable :: attr_tags(:)

    npts = size(topo, 1)
    n_elev_classes = size(topo, 2)

    @assertEqual(ubound(data), [npts, n_elev_classes])

    allocate(attr_tags(2*n_elev_classes))
    do elevclass = 1, n_elev_classes
       attr_tags(elevclass) = dataname // two_digit_string(elevclass)
    end do
    do elevclass = 1, n_elev_classes
       attr_tags(n_elev_classes + elevclass) = toponame // two_digit_string(elevclass)
    end do
       
    call create_aVect_with_data_rows_are_points(av, &
         attr_tags = attr_tags, &
         data = reshape([data, topo], [npts, n_elev_classes * 2]))

  end subroutine create_av

  @Test
  subroutine test_create_av(this)
    ! Tests the create_av helper routine
    class(TestVertGradCalcFactory), intent(inout) :: this
    ! 3 points, 2 elevation classes
    real(r8), parameter :: topo(3,2) = reshape( &
         [1._r8, 2._r8, 3._r8, &
         4._r8, 5._r8, 6._r8], &
         [3, 2])
    real(r8), parameter :: data(3,2) = reshape( &
         [11._r8, 12._r8, 13._r8, &
         14._r8, 15._r8, 16._r8], &
         [3, 2])

    call create_av(topo, data, 'topo', 'data', this%av)

    @assertEqual([4._r8, 5._r8, 6._r8], aVect_exportRattr(this%av, 'topo' // two_digit_string(2)))

    @assertEqual([14._r8, 15._r8, 16._r8], aVect_exportRattr(this%av, 'data' // two_digit_string(2)))

  end subroutine test_create_av
    
  @Test
  subroutine test_extract_data(this)
    class(TestVertGradCalcFactory), intent(inout) :: this
    integer, parameter :: npts = 2
    integer, parameter :: nelev = 3
    real(r8), parameter :: topo(npts,nelev) = &
         reshape([1._r8, 2._r8, 3._r8, 4._r8, 5._r8, 6._r8], [npts, nelev])
    real(r8), parameter :: data(npts,nelev) = &
         reshape([11._r8, 12._r8, 13._r8, 14._r8, 15._r8, 16._r8], [npts, nelev])
    real(r8), allocatable :: topo_extracted(:,:)
    real(r8), allocatable :: data_extracted(:,:)

    call create_av(topo, data, 'topo', 'data', this%av)

    call extract_data_from_attr_vect(this%av, 'data', 'topo', elevclass_names(nelev), &
         data_extracted, topo_extracted)

    @assertEqual(data, data_extracted)
    @assertEqual(topo, topo_extracted)
  end subroutine test_extract_data

end module test_vertical_gradient_calculator_factory

