module test_map_lnd2rof_irrig

  ! Tests of map_lnd2rof_irrig_mod

#include "shr_assert.h"
  use pfunit_mod
  use map_lnd2rof_irrig_mod
  use shr_kind_mod , only : r8 => shr_kind_r8
  use shr_log_mod, only : errMsg => shr_log_errMsg
  use mct_mod, only : mct_aVect, mct_aVect_clean, mct_aVect_lsize
  use seq_map_type_mod, only : seq_map
  use mct_wrapper_mod, only : mct_init, mct_clean
  use avect_wrapper_mod
  use simple_map_mod
  use create_mapper_mod

  implicit none

  @TestCase
  type, extends(TestCase) :: TestMapL2RIrrig
     type(mct_aVect) :: l2r_l ! data on the lnd (source) grid
     type(mct_aVect) :: l2r_r ! data on the rof (destination) grid
     type(mct_aVect) :: r2x_r ! auxiliary data on the rof grid
     type(seq_map) :: mapper_Fl2r
     type(seq_map) :: mapper_Fr2l
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: setup_inputs
     procedure :: run_map_lnd2rof_irrig  ! wrapper to the SUT
  end type TestMapL2RIrrig

  real(r8), parameter :: tol = 1.e-13_r8

  character(len=*), parameter :: irrig_flux_field = 'irrig'

  character(len=*), parameter, private :: sourcefile = &
       __FILE__
contains

  ! ========================================================================
  ! Utility routines
  ! ========================================================================

  subroutine setUp(this)
    class(TestMapL2RIrrig), intent(inout) :: this

    call mct_init()
  end subroutine setUp

  subroutine tearDown(this)
    class(TestMapL2RIrrig), intent(inout) :: this

    call clean_mapper(this%mapper_Fl2r)
    call clean_mapper(this%mapper_Fr2l)
    call mct_aVect_clean(this%l2r_l)
    call mct_aVect_clean(this%l2r_r)
    call mct_aVect_clean(this%r2x_r)
    call mct_clean()
  end subroutine tearDown

  subroutine setup_inputs(this, irrig_l, volr_r, map_l2r, map_r2l)
    ! This utility function sets up inputs that are needed for the map_lnd2rof_irrig call
    class(TestMapL2RIrrig), intent(inout) :: this
    real(r8), intent(in) :: irrig_l(:)  ! irrigation on the land grid
    real(r8), intent(in) :: volr_r(:)   ! river volume on the rof grid
    type(simple_map_type), intent(in) :: map_l2r
    type(simple_map_type), intent(in) :: map_r2l

    integer :: nlnd
    integer :: nrof
    character(len=*), parameter :: volr_field = 'Flrr_volrmch'

    nlnd = map_l2r%get_n_source_points()
    nrof = map_l2r%get_n_dest_points()
    call shr_assert(map_r2l%get_n_dest_points() == nlnd, errMsg(sourcefile, __LINE__))
    call shr_assert(map_r2l%get_n_source_points() == nrof, errMsg(sourcefile, __LINE__))
    call shr_assert(size(irrig_l) == nlnd, errMsg(sourcefile, __LINE__))
    call shr_assert(size(volr_r) == nrof, errMsg(sourcefile, __LINE__))

    call create_aVect_with_data_rows_are_points(this%l2r_l, &
         attr_tags = [irrig_flux_field], &
         data = reshape(irrig_l, [nlnd, 1]))

    call create_aVect_without_data(this%l2r_r, attr_tags = [irrig_flux_field], lsize = nrof)

    call create_aVect_with_data_rows_are_points(this%r2x_r, &
         attr_tags = [volr_field], &
         data = reshape(volr_r, [nrof, 1]))

    call create_mapper(this%mapper_Fl2r, map_l2r)
    call create_mapper(this%mapper_Fr2l, map_r2l)

  end subroutine setup_inputs

  subroutine run_map_lnd2rof_irrig(this)
    ! This utility function wraps the call to the map_lnd2rof_irrig routine
    !
    ! It uses an avwts_s set to 1 everywhere
    class(TestMapL2RIrrig), intent(inout) :: this

    integer :: nlnd
    real(r8), allocatable :: avwts(:)
    type(mct_aVect) :: avwts_s
    character(len=*), parameter :: avwtsfld_s = 'my_avwtsfld'

    ! Set up avwts_s with weights set to 1 everywhere
    nlnd = mct_aVect_lsize(this%l2r_l)
    allocate(avwts(nlnd))
    avwts(:) = 1._r8
    call create_aVect_with_data_rows_are_points(avwts_s, &
         attr_tags = [avwtsfld_s], &
         data = reshape(avwts, [nlnd, 1]))
    
    ! Do the main SUT call
    call map_lnd2rof_irrig( &
         l2r_l = this%l2r_l, &
         r2x_r = this%r2x_r, &
         irrig_flux_field = irrig_flux_field, &
         avwts_s = avwts_s, &
         avwtsfld_s = avwtsfld_s, &
         mapper_Fl2r = this%mapper_Fl2r, &
         mapper_Fr2l = this%mapper_Fr2l, &
         l2r_r = this%l2r_r)

    ! Clean up
    deallocate(avwts)
    call mct_aVect_clean(avwts_s)
  end subroutine run_map_lnd2rof_irrig

  ! ========================================================================
  ! Actual tests
  ! ========================================================================

  @Test
  subroutine test_standardCase_oneLand_twoRof(this)
    ! Standard case with one land (source) cell and two rof (destination) cells
    class(TestMapL2RIrrig), intent(inout) :: this
    integer, parameter :: nlnd = 1
    integer, parameter :: nrof = 2
    real(r8), parameter :: irrig_l(nlnd) = [100._r8]
    real(r8), parameter :: volr_r(nrof) = [1._r8, 3._r8]
    real(r8) :: irrig_r(nrof)
    real(r8) :: expected_volr_l
    real(r8) :: expected_irrig_r(nrof)
    real(r8) :: sum_irrig_r
    type(simple_map_type) :: map_l2r
    type(simple_map_type) :: map_r2l

    ! Setup
    map_l2r = create_simple_map_with_one_source(ndest = nrof)
    map_r2l = simple_map_type( &
         source_indices  = [1,      2], &
         dest_indices    = [1,      1], &
         overlap_weights = [0.4_r8, 0.6_r8])
    call this%setup_inputs( &
         irrig_l = irrig_l, &
         volr_r  = volr_r,  &
         map_l2r = map_l2r, &
         map_r2l = map_r2l)

    ! Exercise
    call this%run_map_lnd2rof_irrig()

    ! Verify
    irrig_r = aVect_exportRattr(this%l2r_r, irrig_flux_field)
    expected_volr_l = 0.4_r8 * 1._r8 + 0.6_r8 * 3._r8
    expected_irrig_r(1) = irrig_l(1) * 1._r8 / expected_volr_l
    expected_irrig_r(2) = irrig_l(1) * 3._r8 / expected_volr_l
    @assertEqual(expected_irrig_r, irrig_r, tolerance=tol)
    ! Also make sure this is conservative:
    sum_irrig_r = 0.4_r8*irrig_r(1) + 0.6_r8*irrig_r(2)
    @assertEqual(irrig_l(1), sum_irrig_r, tolerance=tol)
  end subroutine test_standardCase_oneLand_twoRof

  @Test
  subroutine test_zero_and_negative(this)
    ! This tests the handling of rof cells with 0 or negative volr. It includes two land
    ! (source) points, to ensure that each land cell gets its own handling and to ensure
    ! that R2 (which overlaps L1 and L2) gets the appropriate value.
    !
    ! This has the following setup:
    !
    ! L (2 cells): 111222
    ! R (3 cells): 112233
    ! R1 has volr = 0
    ! R2 has volr = -10
    ! R3 has volr = 2
    !
    ! Then Irrig_L(1) should be mapped evenly to R1 and R2 (regular mapping); Irrig_L(2)
    ! should be mapped entirely to R3 (because R2 should be reset to 0, then it should use
    ! normalized mapping).
    class(TestMapL2RIrrig), intent(inout) :: this
    integer, parameter :: nlnd = 2
    integer, parameter :: nrof = 3
    real(r8), parameter :: irrig_l(nlnd) = [10._r8, 100._r8]
    real(r8), parameter :: volr_r(nrof) = [0._r8, -10._r8, 2._r8]
    real(r8) :: irrig_r(nrof)
    real(r8) :: expected_irrig_r2
    type(simple_map_type) :: map_l2r
    type(simple_map_type) :: map_r2l
    real(r8) :: sum_irrig_l
    real(r8) :: sum_irrig_r

    ! Setup
    map_l2r = simple_map_type( &
         source_indices  = [1,     1,      2,      2], &
         dest_indices    = [1,     2,      2,      3], &
         overlap_weights = [1._r8, 0.5_r8, 0.5_r8, 1._r8])

    map_r2l = simple_map_type( &
         source_indices  = [1,           2,           2,           3], &
         dest_indices    = [1,           1,           2,           2], &
         overlap_weights = [2._r8/3._r8, 1._r8/3._r8, 1._r8/3._r8, 2._r8/3._r8])

    call this%setup_inputs( &
         irrig_l = irrig_l, &
         volr_r = volr_r, &
         map_l2r = map_l2r, &
         map_r2l = map_r2l)

    ! Exercise
    call this%run_map_lnd2rof_irrig()

    ! Verify
    irrig_r = aVect_exportRattr(this%l2r_r, irrig_flux_field)
    ! L1 is mapped without normalization, so the flux in R1 is simply the flux in L1
    @assertEqual(irrig_l(1), irrig_r(1), tolerance=tol)
    ! L2 is mapped with normalization; all of its irrigation goes into R3
    @assertEqual(irrig_l(2) * 3._r8/2._r8, irrig_r(3), tolerance=tol)
    ! R2 overlaps L1 and L2, with 50% in each. From L1 it gets the irrigation flux mapped
    ! directly; from L2 it gets 0 (since L2 is mapped with normalization, and R2's volr <
    ! 0).
    @assertEqual(irrig_l(1) * 0.5_r8, irrig_r(2), tolerance=tol)
    ! Also make sure this is conservative
    sum_irrig_l = 3._r8 * irrig_l(1) + 3._r8 * irrig_l(2)
    sum_irrig_r = 2._r8 * irrig_r(1) + 2._r8 * irrig_r(2) + 2._r8 * irrig_r(3)
    @assertEqual(sum_irrig_l, sum_irrig_r)

  end subroutine test_zero_and_negative

end module test_map_lnd2rof_irrig
