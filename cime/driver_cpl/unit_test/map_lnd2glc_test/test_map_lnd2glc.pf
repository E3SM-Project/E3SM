module test_map_lnd2glc

  ! Tests of map_lnd2glc_mod
  
  use pfunit_mod
  use map_lnd2glc_mod
  use glc_elevclass_mod, only : glc_elevclass_init, glc_elevclass_clean
  use mct_mod, only : mct_aVect, mct_aVect_clean
  use seq_map_type_mod, only : seq_map
  use mct_wrapper_mod, only : mct_init, mct_clean
  use avect_wrapper_mod
  use simple_map_mod
  use create_mapper_mod
  use vertical_gradient_calculator_base, only : vertical_gradient_calculator_base_type
  use vertical_gradient_calculator_constant, only : vertical_gradient_calculator_constant_type
  use shr_kind_mod, only : r8 => shr_kind_r8

  implicit none

  real(r8), parameter :: tol = 1.e-11_r8

  integer, parameter :: n_elev_classes = 3

  ! Assume 3 elevation classes, with boundaries of:
  ! (1) 0 - 100 m
  ! (2) 100 - 200 m
  ! (3) 200 - 300 m
  real(r8), parameter :: elev_class_boundaries(0:n_elev_classes) = &
       [0._r8, 100._r8, 200._r8, 300._r8]


  ! This type holds the data in a single land grid cell
  type :: lnd_data_type
     ! Index 0 is bare land
     real(r8) :: topo(0:n_elev_classes)
     real(r8) :: data(0:n_elev_classes)
  end type lnd_data_type
     
  @TestCase
  type, extends(TestCase) :: TestMapLnd2glc
     type(seq_map) :: mapper
     type(mct_aVect) :: data_l      ! data on the LND (source) grid
     type(mct_aVect) :: landfrac_l  ! landfrac on the LND (source) grid
     type(mct_aVect) :: data_g      ! data on the GLC (destination) grid
     type(mct_aVect) :: g2x         ! data sent from glc -> cpl
   contains
     procedure :: setUp
     procedure :: tearDown
     procedure :: setup_inputs
     procedure :: run_map_lnd2glc
     procedure :: verify_data_g
  end type TestMapLnd2glc

contains

  ! ========================================================================
  ! Utility routines
  ! ========================================================================

  subroutine setUp(this)
    class(TestMapLnd2glc), intent(inout) :: this

    call mct_init()

  end subroutine setUp

  subroutine tearDown(this)
    class(TestMapLnd2glc), intent(inout) :: this
    
    call clean_mapper(this%mapper)
    call mct_aVect_clean(this%data_l)
    call mct_aVect_clean(this%landfrac_l)
    call mct_aVect_clean(this%data_g)
    call mct_aVect_clean(this%g2x)
    call glc_elevclass_clean()
    call mct_clean()
  end subroutine tearDown

  subroutine setup_inputs(this, frac_glc, topo_glc, lnd_data, my_map, landfrac)
    ! This utility function sets up inputs that are needed for the map_lnd2glc call

    class(TestMapLnd2glc), intent(inout) :: this
    real(r8), intent(in) :: frac_glc(:)  ! ice fraction in each glc cell
    real(r8), intent(in) :: topo_glc(:)  ! ice topographic height in each glc cell
    type(lnd_data_type), intent(in) :: lnd_data(:)  ! land data in each grid cell
    type(simple_map_type), intent(in) :: my_map  ! mapping information from land to glc

    ! If provided, this gives the landfrac of each land cell. If absent, landfrac is
    ! assumed to be 1 for every land cell
    real(r8), intent(in), optional :: landfrac(:)
    
    integer :: npts_glc
    integer :: npts_lnd
    integer :: lnd_index
    real(r8), allocatable :: l_landfrac(:)  ! local version of landfrac
    
    ! ------------------------------------------------------------------------
    ! Do some initial error-checking to make sure this routine is being called properly
    ! ------------------------------------------------------------------------
    npts_glc = size(frac_glc)
    @assertEqual(npts_glc, size(topo_glc))

    npts_lnd = size(lnd_data)
    if (present(landfrac)) then
       @assertEqual(npts_lnd, size(landfrac))
    end if
    
    ! ------------------------------------------------------------------------
    ! Set local version of optional arguments
    ! ------------------------------------------------------------------------

    allocate(l_landfrac(npts_lnd))
    if (present(landfrac)) then
       l_landfrac = landfrac
    else
       l_landfrac(:) = 1._r8
    end if
    
    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    call glc_elevclass_init(n_elev_classes, elev_class_boundaries)

    ! The following assumes that n_elev_classes is 3:
    call create_aVect_with_data_rows_are_fields(this%data_l, &
         attr_tags = ['data00   ', 'data01   ', 'data02   ', 'data03   ', &
                      'Sl_topo00', 'Sl_topo01', 'Sl_topo02', 'Sl_topo03'], &
         data = reshape([(lnd_data(lnd_index)%data, lnd_data(lnd_index)%topo, &
                        lnd_index = 1, npts_lnd)], &
                        [8,npts_lnd]))
    
    call create_aVect_with_data_rows_are_fields(this%landfrac_l, &
         attr_tags = ['lfrac'], &
         data = reshape(l_landfrac, [1, npts_lnd]))
    
    call create_aVect_with_data_rows_are_points(this%g2x, &
         attr_tags = ['Sg_ice_covered', 'Sg_topo       '], &
         data = reshape([frac_glc, topo_glc], [npts_glc, 2]))

    call create_aVect_without_data(this%data_g, attr_tags = ['data'], lsize = npts_glc)

    call create_mapper(this%mapper, my_map)

  end subroutine setup_inputs

  subroutine run_map_lnd2glc(this, gradient_calculator, fieldname)
    ! This utility function wraps the call to the map_lnd2glc routine

    class(TestMapLnd2glc), intent(inout) :: this
    class(vertical_gradient_calculator_base_type), intent(in) :: gradient_calculator

    ! Name of field to map. If not provided, uses 'data'. (This argument is available to
    ! test particular cases, such as having trailing blanks in the fieldname; for most
    ! tests, it can be omitted.)
    character(len=*), intent(in), optional :: fieldname

    character(len=:), allocatable :: l_fieldname  ! local version of fieldname

    l_fieldname = 'data'
    if (present(fieldname)) then
       l_fieldname = fieldname
    end if

    call map_lnd2glc(this%data_l, this%landfrac_l, this%g2x, l_fieldname, gradient_calculator, &
         this%mapper, this%data_g)
  end subroutine run_map_lnd2glc
    
  subroutine verify_data_g(this, expected_data_glc, message)
    ! Verify that the remapped data (in this%data_g) matches expected_data_glc

    class(TestMapLnd2glc), intent(in) :: this
    real(r8), intent(in) :: expected_data_glc(:)  ! expected outputs in each glc cell
    character(len=*), intent(in) :: message  ! message printed if assertion fails

    real(r8), allocatable :: actual_data_glc(:)
    
    actual_data_glc = aVect_exportRattr(this%data_g, 'data')
    @assertEqual(expected_data_glc, actual_data_glc, message=message, tolerance=tol)
    
  end subroutine verify_data_g

  subroutine create_data_for_EC2_gradient2(my_map, gradient_calculator, lnd_data, &
       frac_glc, topo_glc, expected_data_glc)
    ! Helper routine to set up all of the data needed to run a test with a single source
    ! grid cell, a single destination point in elevation class 2, and a gradient of 2*EC.
    !
    ! This can be used for one-offs off of this setup that is not too simple, but not too
    ! complex.

    type(simple_map_type), intent(out) :: my_map
    type(vertical_gradient_calculator_constant_type), intent(out) :: gradient_calculator
    type(lnd_data_type), intent(out) :: lnd_data
    real(r8), intent(out) :: frac_glc(1)
    real(r8), intent(out) :: topo_glc(1)
    real(r8), intent(out) :: expected_data_glc(1)

    my_map = create_simple_map_with_one_source(ndest = 1)

    gradient_calculator = &
         vertical_gradient_calculator_constant_type(num_points = 1, gradient = 2._r8)

    ! data in elev class:   0       1       2        3
    lnd_data%topo(:) = [25._r8, 50._r8, 150._r8, 250._r8]
    lnd_data%data(:) = [10._r8, 11._r8, 12._r8,  13._r8]

    frac_glc(1) = 1._r8
    topo_glc(1) = 125._r8

    ! For expected data, note that we multiply the topo difference by 4:
    ! gradient * EC = 2 * 2 = 4
    expected_data_glc(1) = lnd_data%data(2) + 4._r8*(125._r8 - lnd_data%topo(2))
    
  end subroutine create_data_for_EC2_gradient2
    
  ! ========================================================================
  ! Actual tests
  ! ========================================================================
  
  @Test
  subroutine test_mapLnd2glc_with_EC0_gradient0(this)
    ! Do a test of the map_lnd2glc routine with only an elevation class 0 destination
    ! point, and a gradient of 0. This tests the very basic operation of map_lnd2glc.
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data

    integer, parameter :: npts_glc = 1
    real(r8), parameter :: frac_glc(npts_glc) = [0._r8]
    real(r8), parameter :: topo_glc(npts_glc) = [75._r8]
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    my_map = create_simple_map_with_one_source(ndest = npts_glc)
    
    gradient_calculator = &
         vertical_gradient_calculator_constant_type(num_points = 1, gradient = 0._r8)

    ! data in elev class:   0       1       2        3
    lnd_data%topo(:) = [25._r8, 50._r8, 150._r8, 250._r8]
    lnd_data%data(:) = [10._r8, 11._r8, 12._r8,  13._r8]

    call this%setup_inputs(frac_glc, topo_glc, [lnd_data], my_map)

    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator)
    
    ! ------------------------------------------------------------------------
    ! Verify
    ! ------------------------------------------------------------------------

    expected_data_glc(1) = lnd_data%data(0)
    
    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_with_EC0_gradient0")

  end subroutine test_mapLnd2glc_with_EC0_gradient0

  @Test
  subroutine test_mapLnd2glc_with_EC2_gradient0(this)
    ! Do a test of the map_lnd2glc routine with only an elevation class 2 destination
    ! point, and a gradient of 0.
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data
    
    integer, parameter :: npts_glc = 1
    real(r8), parameter :: frac_glc(npts_glc) = [1._r8]
    real(r8), parameter :: topo_glc(npts_glc) = [125._r8]
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    my_map = create_simple_map_with_one_source(ndest = npts_glc)

    gradient_calculator = &
         vertical_gradient_calculator_constant_type(num_points = 1, gradient = 0._r8)

    ! data in elev class:   0       1       2        3
    lnd_data%topo(:) = [25._r8, 50._r8, 150._r8, 250._r8]
    lnd_data%data(:) = [10._r8, 11._r8, 12._r8,  13._r8]

    call this%setup_inputs(frac_glc, topo_glc, [lnd_data], my_map)
    
    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator)
    
    ! ------------------------------------------------------------------------
    ! Verify
    ! ------------------------------------------------------------------------

    expected_data_glc(1) = lnd_data%data(2)

    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_with_EC2_gradient0")

  end subroutine test_mapLnd2glc_with_EC2_gradient0
  
  @Test
  subroutine test_mapLnd2glc_with_multipleDest_gradient0(this)
    ! Do a test of the map_lnd2glc routine with multiple destination points, and a
    ! gradient of 0 - i.e., not trying to correct for the vertical gradient. This tests to
    ! make sure that each destination (GLC) grid cell gets data from the appropriate
    ! source (LND) elevation class.
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data
    
    ! On the glc grid, there are 4 grid cells: one bare land and one in each elevation class
    integer, parameter :: npts_glc = 4
    real(r8), parameter :: frac_glc(npts_glc) = [1._r8, 1._r8, 1._r8, 0._r8]
    real(r8), parameter :: topo_glc(npts_glc) = [225._r8, 125._r8, 25._r8, 75._r8]
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    my_map = create_simple_map_with_one_source(ndest = npts_glc)

    gradient_calculator = &
         vertical_gradient_calculator_constant_type(num_points = 1, gradient = 0._r8)
    
    ! data in elev class:   0       1       2        3
    lnd_data%topo(:) = [25._r8, 50._r8, 150._r8, 250._r8]
    lnd_data%data(:) = [10._r8, 11._r8, 12._r8,  13._r8]

    call this%setup_inputs(frac_glc, topo_glc, [lnd_data], my_map)
    
    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator)
    
    ! ------------------------------------------------------------------------
    ! Verify
    ! ------------------------------------------------------------------------

    expected_data_glc(:) = [lnd_data%data(3), lnd_data%data(2), lnd_data%data(1), lnd_data%data(0)]
    
    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_with_multipleDest_gradient0")

  end subroutine test_mapLnd2glc_with_multipleDest_gradient0

  @Test
  subroutine test_mapLnd2glc_with_EC2_gradient2(this)
    ! Do a test of the map_lnd2glc routine with only an elevation class 2 destination
    ! point, and a gradient of 2*EC
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data
    
    integer, parameter :: npts_glc = 1
    real(r8) :: frac_glc(npts_glc)
    real(r8) :: topo_glc(npts_glc)
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    call create_data_for_EC2_gradient2(my_map, gradient_calculator, lnd_data, &
         frac_glc, topo_glc, expected_data_glc)
    call this%setup_inputs(frac_glc, topo_glc, [lnd_data], my_map)
    
    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator)
    
    ! ------------------------------------------------------------------------
    ! Verify
    ! ------------------------------------------------------------------------

    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_with_EC2_gradient2")

  end subroutine test_mapLnd2glc_with_EC2_gradient2

  @Test
  subroutine test_mapLnd2glc_with_trailing_blanks_in_fieldname(this)
    ! Do a test with trailing blanks in the field name
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data
    
    integer, parameter :: npts_glc = 1
    real(r8) :: frac_glc(npts_glc)
    real(r8) :: topo_glc(npts_glc)
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    call create_data_for_EC2_gradient2(my_map, gradient_calculator, lnd_data, &
         frac_glc, topo_glc, expected_data_glc)
    call this%setup_inputs(frac_glc, topo_glc, [lnd_data], my_map)
    
    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator, fieldname = 'data   ')
    
    ! ------------------------------------------------------------------------
    ! Verify
    ! ------------------------------------------------------------------------

    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_with_trailing_blanks_in_fieldname")

  end subroutine test_mapLnd2glc_with_trailing_blanks_in_fieldname

  @Test
  subroutine test_mapLnd2glc_with_multipleSource_multipleDest(this)
    ! Do a test of the map_lnd2glc routine with multiple source points and multiple
    ! destination points.
    !
    ! In particular, we have 2 source points and 3 dest points: d1 entirely in s1, d2
    ! entirely in s2, d3 part in s1, part in s2
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data(2)
    
    integer, parameter :: npts_glc = 3
    ! For simplicity, all glc points are in elevation class 2:
    real(r8), parameter :: frac_glc(npts_glc) = [1._r8, 1._r8, 1._r8]
    real(r8), parameter :: topo_glc(npts_glc) = [125._r8, 125._r8, 125._r8]
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    
    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    my_map = simple_map_type( &
         source_indices  = [1,     2,     1,      2], &
         dest_indices    = [1,     2,     3,      3], &
         overlap_weights = [1._r8, 1._r8, 0.4_r8, 0.6_r8])

    gradient_calculator = &
         vertical_gradient_calculator_constant_type(num_points = 2, gradient = 2._r8)

    ! data in elev class:  0       1       2        3
    lnd_data(1)%topo(:) = [25._r8, 50._r8, 150._r8, 250._r8]
    lnd_data(1)%data(:) = [10._r8, 11._r8, 12._r8,  13._r8]
    lnd_data(2)%topo(:) = [25._r8, 10._r8, 110._r8, 210._r8]
    lnd_data(2)%data(:) = [14._r8, 15._r8, 16._r8,  17._r8]
    
    call this%setup_inputs(frac_glc, topo_glc, lnd_data, my_map)
    
    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator)
    
    ! ------------------------------------------------------------------------
    ! Verify
    ! ------------------------------------------------------------------------

    ! gradient * EC * gridcell^2 = 2 * 2 * 1 = 4
    expected_data_glc(1) = lnd_data(1)%data(2) + 4._r8*(topo_glc(1) - lnd_data(1)%topo(2))
    ! gradient * EC * gridcell^2 = 2 * 2 * 4 = 16
    expected_data_glc(2) = lnd_data(2)%data(2) + 16._r8*(topo_glc(2) - lnd_data(2)%topo(2))

    ! To determine the expected answer in the glc grid cell with two land source cells,
    ! we do a straightforward application of equation 2.3 in the design document:
    ! https://docs.google.com/a/ucar.edu/document/d/1sjsaiPYsPJ9A7dVGJIHGg4rVIY2qF5aRXbNzSXVAafU/edit#
    ! - i.e., remap: data_l + (vertical_gradient_l) * (topo_g - topo_l)
    expected_data_glc(3) = &
         0.4_r8 * (lnd_data(1)%data(2) + 4._r8*(topo_glc(3) - lnd_data(1)%topo(2))) + &
         0.6_r8 * (lnd_data(2)%data(2) + 16._r8*(topo_glc(3) - lnd_data(2)%topo(2)))
    
    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_with_multipleSource_multipleDest")

  end subroutine test_mapLnd2glc_with_multipleSource_multipleDest

  @Test
  subroutine test_mapLnd2glc_with_landfrac_EC0_gradient0(this)
    ! Do a test of the map_lnd2glc routine with landfrac < 1; make sure normalization
    ! happens properly. This test uses elevation class 0, to cover the call to
    ! seq_map_map for the bare land elevation class. In order to test the landfrac
    ! normalization sufficiently, this uses two source points.
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data(2)
    real(r8), parameter :: lnd_overlaps(2) = [0.3_r8, 0.7_r8]
    real(r8), parameter :: landfracs(2)    = [0.4_r8, 0.9_r8]

    integer, parameter :: npts_glc = 1
    real(r8), parameter :: frac_glc(npts_glc) = [0._r8]
    real(r8), parameter :: topo_glc(npts_glc) = [75._r8]
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    my_map = simple_map_type( &
         source_indices  = [1     , 2], &
         dest_indices    = [1     , 1], &
         overlap_weights = lnd_overlaps)

    gradient_calculator = &
         vertical_gradient_calculator_constant_type(num_points = 2, gradient = 0._r8)

    ! data in elev class:  0       1       2        3
    lnd_data(1)%topo(:) = [25._r8, 50._r8, 150._r8, 250._r8]
    lnd_data(1)%data(:) = [10._r8, 11._r8, 12._r8,  13._r8]
    lnd_data(2)%topo(:) = [25._r8, 10._r8, 110._r8, 210._r8]
    lnd_data(2)%data(:) = [14._r8, 15._r8, 16._r8,  17._r8]

    call this%setup_inputs(frac_glc, topo_glc, lnd_data, my_map, &
         landfrac = landfracs)

    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator)
    
    ! ------------------------------------------------------------------------
    ! Verify
    ! ------------------------------------------------------------------------

    expected_data_glc(1) = (lnd_overlaps(1) * landfracs(1) * lnd_data(1)%data(0) + &
                            lnd_overlaps(2) * landfracs(2) * lnd_data(2)%data(0)) / &
                           (lnd_overlaps(1) * landfracs(1) + lnd_overlaps(2) * landfracs(2))
                            
    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_with_landfrac_EC0_gradient0")

  end subroutine test_mapLnd2glc_with_landfrac_EC0_gradient0

  @Test
  subroutine test_mapLnd2glc_with_landfrac_EC2_gradient0(this)
    ! Do a test of the map_lnd2glc routine with landfrac < 1; make sure normalization
    ! happens properly. This test uses elevation class 2, to cover the call to
    ! seq_map_map for the ice sheet elevation classes. In order to test the landfrac
    ! normalization sufficiently, this uses two source points.
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data(2)
    real(r8), parameter :: lnd_overlaps(2) = [0.3_r8, 0.7_r8]
    real(r8), parameter :: landfracs(2)    = [0.4_r8, 0.9_r8]

    integer, parameter :: npts_glc = 1
    real(r8), parameter :: frac_glc(npts_glc) = [1._r8]
    real(r8), parameter :: topo_glc(npts_glc) = [125._r8]
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    my_map = simple_map_type( &
         source_indices  = [1     , 2], &
         dest_indices    = [1     , 1], &
         overlap_weights = lnd_overlaps)

    gradient_calculator = &
         vertical_gradient_calculator_constant_type(num_points = 2, gradient = 0._r8)

    ! data in elev class:  0       1       2        3
    lnd_data(1)%topo(:) = [25._r8, 50._r8, 150._r8, 250._r8]
    lnd_data(1)%data(:) = [10._r8, 11._r8, 12._r8,  13._r8]
    lnd_data(2)%topo(:) = [25._r8, 10._r8, 110._r8, 210._r8]
    lnd_data(2)%data(:) = [14._r8, 15._r8, 16._r8,  17._r8]

    call this%setup_inputs(frac_glc, topo_glc, lnd_data, my_map, &
         landfrac = landfracs)

    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator)
    
    ! ------------------------------------------------------------------------
    ! Verify
    ! ------------------------------------------------------------------------

    expected_data_glc(1) = (lnd_overlaps(1) * landfracs(1) * lnd_data(1)%data(2) + &
                            lnd_overlaps(2) * landfracs(2) * lnd_data(2)%data(2)) / &
                           (lnd_overlaps(1) * landfracs(1) + lnd_overlaps(2) * landfracs(2))
                            
    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_with_landfrac_EC2_gradient0")

  end subroutine test_mapLnd2glc_with_landfrac_EC2_gradient0
  
  @Test
  subroutine test_mapLnd2glc_conservation(this)
    ! This is a more complex test with multiple lnd points and multiple glc points, where
    ! the different glc points are in different elevation classes. In addition to the
    ! standard tests, this also demonstrates that the remapping is conservative. For this
    ! to be true, though, we need to be a little more careful about how we set the
    ! topographic heights of the land cells.
    class(TestMapLnd2glc), intent(inout) :: this

    type(lnd_data_type) :: lnd_data(2)

    integer, parameter :: npts_glc = 4
    ! The different GLC points are in EC:        0      1       2        2
    real(r8), parameter :: frac_glc(npts_glc) = [0._r8, 1._r8,  1._r8,   1._r8]
    real(r8), parameter :: topo_glc(npts_glc) = [5._r8, 25._r8, 125._r8, 190._r8]
    ! Area of each glc point (needed for the conservation check):
    real(r8), parameter :: area_glc(npts_glc) = [11._r8, 13._r8, 15._r8, 17._r8]
    real(r8) :: expected_data_glc(npts_glc)

    type(simple_map_type) :: my_map
    type(vertical_gradient_calculator_constant_type) :: gradient_calculator

    ! These parameters give the fraction of each glc cell that is in lnd1 and the
    ! fraction in lnd2 (note that this sums to 1 for each glc point)
    real(r8), parameter :: overlaps_with_lnd1(npts_glc) = [0.9_r8, 0.7_r8, 0.3_r8, 0.1_r8]
    real(r8), parameter :: overlaps_with_lnd2(npts_glc) = [0.1_r8, 0.3_r8, 0.7_r8, 0.9_r8]

    real(r8) :: areas_lnd1(npts_glc)  ! area of each glc cell in lnd1
    real(r8) :: areas_lnd2(npts_glc)  ! area of each glc cell in lnd2
    real(r8) :: ec_areas_lnd1(0:n_elev_classes)  ! area of each elevation class in lnd1
    real(r8) :: ec_areas_lnd2(0:n_elev_classes)  ! area of each elevation class in lnd2
    real(r8) :: topo_ec2_lnd1, topo_ec2_lnd2
    real(r8) :: lnd_sum
    real(r8) :: glc_sum
    
    ! ------------------------------------------------------------------------
    ! Setup
    ! ------------------------------------------------------------------------

    my_map = simple_map_type( &
         source_indices  = [1, 1, 1, 1,         2, 2, 2, 2], &
         dest_indices    = [1, 2, 3, 4,         1, 2, 3, 4], &
         overlap_weights = [overlaps_with_lnd1, overlaps_with_lnd2])

    gradient_calculator = &
         vertical_gradient_calculator_constant_type(num_points = 2, gradient = 2._r8)

    areas_lnd1(:) = overlaps_with_lnd1(:) * area_glc(:)
    areas_lnd2(:) = overlaps_with_lnd2(:) * area_glc(:)

    ! Determine topographic height of elevation class 2 in each land grid cell. This
    ! takes some work, because we need to take the weighted average of two CISM cells for
    ! each of the two land cells.
    !
    ! NOTE(wjs, 2015-05-17) In principle, we could replace this manual determination of
    ! topographic heights with a call to map_glc2lnd_ec. But then it would make sense to
    ! move this test routine somewhere else, to indicate that it's testing a combination
    ! of routines. This would take more work than I'm up for right now. But eventually,
    ! we may want to do that, along with introducing some additional conservation checks.
    ! Then these conservation checks would become more integration-ish tests than unit
    ! tests.
    topo_ec2_lnd1 = (areas_lnd1(3) * topo_glc(3) + areas_lnd1(4) * topo_glc(4)) / &
         (areas_lnd1(3) + areas_lnd1(4))
    topo_ec2_lnd2 = (areas_lnd2(3) * topo_glc(3) + areas_lnd2(4) * topo_glc(4)) / &
         (areas_lnd2(3) + areas_lnd2(4))

    ! Note that the topographic height in elevation class 1 comes from the single CISM
    ! cell in elevation class 1. The topographic heights of elevation classes 0 and 3 are
    ! arbitrary. (The topographic height of elevation class 0 doesn't matter for
    ! conservation, and there is no CISM cell in elevation class 3.)
     
    ! data in elev class:  0       1       2              3
    lnd_data(1)%topo(:) = [25._r8, 25._r8, topo_ec2_lnd1, 250._r8]
    lnd_data(1)%data(:) = [10._r8, 11._r8, 12._r8,        13._r8]
    lnd_data(2)%topo(:) = [25._r8, 25._r8, topo_ec2_lnd2, 210._r8]
    lnd_data(2)%data(:) = [14._r8, 15._r8, 16._r8,        17._r8]

    call this%setup_inputs(frac_glc, topo_glc, lnd_data, my_map)
    
    ! ------------------------------------------------------------------------
    ! Exercise
    ! ------------------------------------------------------------------------

    call this%run_map_lnd2glc(gradient_calculator)
    
    ! ------------------------------------------------------------------------
    ! Verify: Ensure that the actual glc values are the same as expected
    ! ------------------------------------------------------------------------

    ! glc 1 is in EC 0
    expected_data_glc(1) = overlaps_with_lnd1(1) * lnd_data(1)%data(0) + &
         overlaps_with_lnd2(1) * lnd_data(2)%data(0)
    ! glc 2 is in EC 1. The vertical gradient isn't important here, since the topographic
    ! height of lnd EC 1 matches the topographic height of the glc cell.
    expected_data_glc(2) = overlaps_with_lnd1(2) * lnd_data(1)%data(1) + &
         overlaps_with_lnd2(2) * lnd_data(2)%data(1)

    ! glc 3 & 4 are in EC 2. Here we need to account for the vertical gradient. We do a
    ! straightforward application of equation 2.3 in the design document:
    ! https://docs.google.com/a/ucar.edu/document/d/1sjsaiPYsPJ9A7dVGJIHGg4rVIY2qF5aRXbNzSXVAafU/edit#
    ! - i.e., remap: data_l + (vertical_gradient_l) * (topo_g - topo_l)
    expected_data_glc(3) = &
         overlaps_with_lnd1(3) * (lnd_data(1)%data(2) + 4._r8*(topo_glc(3) - lnd_data(1)%topo(2))) + &
         overlaps_with_lnd2(3) * (lnd_data(2)%data(2) + 16._r8*(topo_glc(3) - lnd_data(2)%topo(2)))

    expected_data_glc(4) = &
         overlaps_with_lnd1(4) * (lnd_data(1)%data(2) + 4._r8*(topo_glc(4) - lnd_data(1)%topo(2))) + &
         overlaps_with_lnd2(4) * (lnd_data(2)%data(2) + 16._r8*(topo_glc(4) - lnd_data(2)%topo(2)))

    call this%verify_data_g(expected_data_glc, message = "test_mapLnd2glc_conservation")
    
    ! ------------------------------------------------------------------------
    ! Verify: Ensure conservation
    ! ------------------------------------------------------------------------

    ! Determine area of each elevation class (column) on the land grid
    ec_areas_lnd1(0) = areas_lnd1(1)
    ec_areas_lnd1(1) = areas_lnd1(2)
    ec_areas_lnd1(2) = areas_lnd1(3) + areas_lnd1(4)
    ec_areas_lnd1(3) = 0._r8

    ec_areas_lnd2(0) = areas_lnd2(1)
    ec_areas_lnd2(1) = areas_lnd2(2)
    ec_areas_lnd2(2) = areas_lnd2(3) + areas_lnd2(4)
    ec_areas_lnd2(3) = 0._r8
    
    ! Determine weighted sum of field on the land grid
    lnd_sum = sum(ec_areas_lnd1(:) * lnd_data(1)%data(:) + &
         ec_areas_lnd2(:) * lnd_data(2)%data(:))

    ! Determine weighted sum of EXPECTED field on the glc grid (we have already shown that
    ! the actual field on the glc grid is the same as expected)
    glc_sum = sum(area_glc(:) * expected_data_glc(:))
    
    ! Show these are the same
    @assertEqual(glc_sum, lnd_sum, message='Conservation', tolerance=tol)
    
  end subroutine test_mapLnd2glc_conservation
    
end module test_map_lnd2glc
