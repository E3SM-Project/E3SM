module test_seq_map

  ! Tests of seq_map_mod

  use pfunit_mod
  use seq_map_mod
  use seq_map_type_mod
  use mct_mod
  use mct_wrapper_mod, only : mct_init, mct_clean
  use avect_wrapper_mod
  use simple_map_mod
  use create_mapper_mod
  use shr_kind_mod, only : r8 => shr_kind_r8

  implicit none


  real(r8), parameter :: tol = 1.e-13_r8

  @TestCase
  type, extends(TestCase) :: TestSeqMap
     type(seq_map) :: mapper
     type(mct_aVect) :: av_s  ! data on the source grid
     type(mct_aVect) :: av_d  ! data on the destination grid
   contains
     procedure :: setUp
     procedure :: tearDown
  end type TestSeqMap

contains

  subroutine setUp(this)
    class(TestSeqMap), intent(inout) :: this

    call mct_init()
  end subroutine setUp

  subroutine tearDown(this)
    class(TestSeqMap), intent(inout) :: this

    call clean_mapper(this%mapper)
    call mct_aVect_clean(this%av_s)
    call mct_aVect_clean(this%av_d)
    call mct_clean()
  end subroutine tearDown

  @Test
  subroutine test_seqMapMap_1DestPt_returnsCorrectAV(this)
    class(TestSeqMap), intent(inout) :: this
    integer, parameter :: npts_source = 3
    integer, parameter :: npts_dest = 1
    real(r8), parameter :: data_source(npts_source) = [1._r8, 11._r8, 12._r8]
    real(r8) :: expected_data(npts_dest)
    real(r8), allocatable :: actual_data(:)
    type(simple_map_type) :: my_map

    ! Setup

    ! Set up an area-conservative mapping that looks like the following:
    ! Source: AABC
    ! Dest:   1111
    ! i.e., there is a single destination grid cell, which is overlapped by 3 source grid
    ! cells: A (50%), B (25%), C (25%)

    ! Set up attribute vectors
    call create_aVect_with_data_rows_are_points(this%av_s, &
         attr_tags = ['data'], &
         data = reshape(data_source, [npts_source,1]))
    call create_aVect_without_data(this%av_d, &
         attr_tags = ['data'], &
         lsize = npts_dest)

    ! Set up mapper. This is an area-conservative remapping.
    my_map = simple_map_type( &
         source_indices  = [1,      2,       3], &
         dest_indices    = [1,      1,       1], &
         overlap_weights = [0.5_r8, 0.25_r8, 0.25_r8])
    call create_mapper(this%mapper, my_map)

    ! Exercise
    call seq_map_map(this%mapper, this%av_s, this%av_d)

    ! Verify

    actual_data = aVect_exportRattr(this%av_d, 'data')
    expected_data(1) = &
         0.5_r8 * data_source(1) + &
         0.25_r8 * data_source(2) + &
         0.25_r8 * data_source(3)
    @assertEqual(expected_data, actual_data, tolerance=tol)
  end subroutine test_seqMapMap_1DestPt_returnsCorrectAV

  @Test
  subroutine test_seqMapMap_2DestPt_returnsCorrectAV(this)
    class(TestSeqMap), intent(inout) :: this
    integer, parameter :: npts_source = 3
    integer, parameter :: npts_dest = 2
    real(r8), parameter :: data_source(npts_source) = [1._r8, 11._r8, 12._r8]
    real(r8) :: expected_data(npts_dest)
    real(r8), allocatable :: actual_data(:)
    type(simple_map_type) :: my_map

    ! Setup

    ! Set up attribute vectors
    call create_aVect_with_data_rows_are_points(this%av_s, &
         attr_tags = ['data'], &
         data = reshape(data_source, [npts_source,1]))
    call create_aVect_without_data(this%av_d, &
         attr_tags = ['data'], &
         lsize = npts_dest)

    ! Set up mapper. This is an area-conservative remapping.
    my_map = simple_map_type( &
         source_indices  = [1,      2,       3,       2,      3], &
         dest_indices    = [1,      1,       1,       2,      2], &
         overlap_weights = [0.5_r8, 0.25_r8, 0.25_r8, 0.5_r8, 0.5_r8])
    call create_mapper(this%mapper, my_map)

    ! Exercise
    call seq_map_map(this%mapper, this%av_s, this%av_d)

    ! Verify

    actual_data = aVect_exportRattr(this%av_d, 'data')
    expected_data(1) = &
         0.5_r8 * data_source(1) + &
         0.25_r8 * data_source(2) + &
         0.25_r8 * data_source(3)
    expected_data(2) = &
         0.5_r8 * data_source(2) + &
         0.5_r8 * data_source(3)
    @assertEqual(expected_data, actual_data, tolerance=tol)
  end subroutine test_seqMapMap_2DestPt_returnsCorrectAV

end module test_seq_map
