#!/usr/bin/env python

"""
build model executable
"""

import sys, os

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(os.environ["CIMEROOT"],"scripts","Tools"))

from standard_script_setup import *
from CIME.buildlib         import parse_input
from CIME.case             import Case
from CIME.utils            import expect, run_cmd

logger = logging.getLogger(__name__)

###############################################################################
def _main_func():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)

    logger.info("Building a single executable version of target coupled model")

    with Case(caseroot) as case:
        casetools = case.get_value("CASETOOLS")
        cimeroot  = case.get_value("CIMEROOT")
        exeroot   = case.get_value("EXEROOT")
        gmake     = case.get_value("GMAKE")
        gmake_j   = case.get_value("GMAKE_J")
        model     = case.get_value("MODEL")
        os.environ["PIO_VERSION"] = str(case.get_value("PIO_VERSION"))

    with open('Filepath', 'w') as out:
        out.write(os.path.join(caseroot, "SourceMods", "src.drv") + "\n")
        out.write(os.path.join(cimeroot, "driver_cpl", "driver") + "\n")

    # build model executable

    makefile = os.path.join(casetools, "Makefile")
    exename = os.path.join(exeroot, model + ".exe")

    cmd = "%s exec_se -j %d EXEC_SE=%s MODEL=%s LIBROOT=%s -f %s "\
        % (gmake, gmake_j, exename, "driver", libroot, makefile)

    rc, out, err = run_cmd(cmd)
    expect(rc==0,"Command %s failed rc=%d\nout=%s\nerr=%s"%(cmd,rc,out,err))
    logger.info(out)
###############################################################################

if __name__ == "__main__":
    _main_func()
