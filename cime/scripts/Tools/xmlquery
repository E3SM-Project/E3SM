#!/usr/bin/env python

"""
This utility allows the CIME user to view a field in a env_*xml file via a commandline interface.

If this tool is missing any feature that you need, please go to github and create an issue (https://github.com/ESMCI/cime/issues). Detailed information is available at https://github.com/ESMCI/cime.


    AUTHOR AND CREDITS
        Authors: Jim Edwards , ....

        Based on legacy code with many contributers. (see ...)

    COPYRIGHT AND LICENSE

        This library is free software; you can redistribute it and/or modify
        it under the same terms as Python itself.
"""

from standard_script_setup import *

from CIME.utils import expect
from CIME.case import Case

import argparse, doctest, shutil, glob
import textwrap
import sys

logger = logging.getLogger("xmlquery")

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(   description="Querry the xml files for attributes and return their values." ,
                                        formatter_class=argparse.RawDescriptionHelpFormatter, epilog=textwrap.dedent(__doc__) )
    CIME.utils.setup_standard_logging_options(parser)

    # Set command line options
    parser.add_argument("attributes", nargs="*"  ,
                        help="attribute value in env_*.xml file ( <element_name attribute='attribute_value'>value</element_name> )")

    parser.add_argument("-file" , "--file",
                        help="env*.xml file")

    parser.add_argument("-attribute", "--attribute",
                        nargs="*" , help="list of attribute/option names" , default=[])

    parser.add_argument("-subgroup","--subgroup",
                        help="apply to this subgroup only")

    parser.add_argument("-caseroot" , "--caseroot", default=os.getcwd(),
                        help="Case directory to build")

    parser.add_argument("-listall", "--listall" , default=False , action="store_true" ,
                        help="List all attributes and their values")

    parser.add_argument("--listofsettings", nargs="*", default=[] ,
                        help="Comma seperated list of option names (attribute values)")

    parser.add_argument("-fileonly", "--fileonly", default=False, action="store_true",
                        help="Only print the filename that the field is defined in.")

    parser.add_argument("-valonly", "--valonly", default=False, action="store_true",
                        help="Only print the field name and value.")

    parser.add_argument("-value", "--value", default=False, action="store_true",
                        help="Only print one value without newline character. If more than one has been found print first value in list.")
    parser.add_argument("-no-resolve", "--no-resolve", action="store_true",
                        help="Do not resolve variable values")

    args = parser.parse_args(args[1:])

    CIME.utils.handle_standard_logging_options(args)

    if (len(sys.argv) == 1) :
        parser.print_help()
        exit()

    # merge list from to command line options and remove duplicate names
    if( len(args.listofsettings) == 1 ):
        args.attribute = args.attribute + args.listofsettings[0].split(',')

    if( len(args.attributes) > 1) :
        args.attribute =  args.attribute + args.attributes

    # in case it is a comma separated list
    if( len(args.attributes) == 1) :
        args.attribute =  args.attribute + args.attributes[0].split(',')

    # remove duplicate names
    args.attribute = list( set (args.attribute ))

    return args

def xmlquery(caseroot, args, listofattributes=[] ,  subgroup=None, noecho=False, warn=None ):
    """
    Return list of attributes and their values , print formatted

    Test:

    >>> list_of_attributes = xmlquery(os.getcwd(),{ "valonly" :True})
    >>> type(list_of_attributes) is list
    True
    >>> len(list_of_attributes) > 0
    True
    """
    # Initialize case ; read in all xml files from caseroot
    with Case(caseroot) as case:
        values  = []
        results = [] # List of formatted strings containing the search results
        resolved = not args.no_resolve
        if(listofattributes and len(listofattributes) >= 1):

            for xmlattr in listofattributes:
                # type_str = case.get_type_info(xmlattr)
                logger.debug("Searching for %s", xmlattr)
                attribute_hits = case.get_values(xmlattr, resolved=resolved,
                                                 subgroup=subgroup)
                results       += attribute_hits

        elif (args.listall):
            logger.warning("Retrieving all values.")
            results = case.get_values(None, resolved=resolved,
                                      subgroup=subgroup)
        else:
            logger.warning("No attributes (%s) or listall option",
                           listofattributes)

    # Formatting of return strings
    if ( len(results) > 0) :

        for node in results :

            val = ""

            # attribute formatting - add group if present

            attr = node['attribute']
            if node['group'] :
                attr = "%s:%s" % (node['group'] , node['attribute'])

            # Formatting for different options
            if args.fileonly :
                val = "%s\t%s" % (attr , node["file"] )
            elif args.valonly :
                val = "%s\t%s" % (attr , node["value"])
            elif args.value :
                val = "%s" % (node["value"])
            else :
                if (node['description']) :
                    wrapper=textwrap.TextWrapper()
                    wrapper.initial_indent = "\t\t"
                    wrapper.subsequent_indent = "\t\t"
                    val = "%s\t%s\ttype:%s\n%s\n" %  (attr , node["value"] , node['type'] , wrapper.fill(node['description']) )
                else :
                    val = "%s\t%s\ttype:%s\t%s" %  (attr , node["value"] , node['type'] , node['description'] )

            values.append(val)

    return values

def _main_func(description):
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    # Initialize command line parser and get command line options
    args = parse_command_line(sys.argv, description)

    # Debug statement - obvious
    logger.debug("CLI arguments: %s" , args)
    logger.debug("Searching for attributes '%s'" , args.attribute)

    # querry for attributes and print results
    results = xmlquery(args.caseroot , args, args.attribute , args.subgroup)

    # if called with value option omit newline and return only one value
    if args.value == True :
        # l = list( set (results) )
        if len(results) > 0 :
            sys.stdout.write(results[0])
    else :
        for res in xmlquery(args.caseroot , args, args.attribute ) :
            print res


if (__name__ == "__main__"):
    _main_func(__doc__)
