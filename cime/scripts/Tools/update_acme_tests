#!/usr/bin/env python

"""
This script recreates and acme suite within the CESM testlist.xml
file, which should be given as the only argument. It deletes any
existing category from the XML file, draws from information within
this file to create new test entries, and then inserts these entries
into the XML file.
"""

from standard_script_setup import *
from CIME.utils import expect
from update_acme_tests import get_test_suites, update_acme_tests

import sys, argparse, os

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
usage="""\n{0} testlist.xml [<test category> <test category> ...] [--verbose]
OR
{0} --help
OR
{0} --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Update all acme test suites for all platforms \033[0m
    > {0} ../config/acme/allactive/testlist_allactive.xml
    \033[1;32m# Update acme_developer tests for all platforms \033[0m
    > {0} ../config/acme/allactive/testlist_allactive.xml acme_developer
    \033[1;32m# Add acme_developer tests for a new platform \033[0m
    > {0} ../config/acme/allactive/testlist_allactive.xml acme_developer -p machine,compiler
""".format(os.path.basename(args[0])),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("test_list_path", help="The path to test lists XML file")

    parser.add_argument("categories", nargs="*",
                        help="The test categories to update. Default will update all. Test categories: {}".format(", ".join(get_test_suites())))

    parser.add_argument("-p", "--platform",
                        help="Only add tests for a specific platform, format=machine,compiler. Useful for adding new platforms.")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    expect(os.path.isfile(args.test_list_path),
           "'{}' is not a valid file".format(args.test_list_path))

    expect(args.platform is None or len(args.platform.split(",")) == 2,
           "-p value must be in format: 'machine,compiler'")

    if (not args.categories):
        args.categories = get_test_suites()

    return args.categories, args.test_list_path, args.platform

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        CIME.utils.run_cmd_no_fail("python -m doctest {}/update_acme_tests.py -v".format(CIME.utils.get_python_libs_root(), arg_stdout=None, arg_stderr=None))
        return

    categories, test_list_path, platform = parse_command_line(sys.argv, description)

    update_acme_tests(test_list_path, categories, platform)

if __name__ == "__main__":
    _main_func(__doc__)
