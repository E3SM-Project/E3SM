#!/usr/bin/env python

"""
Get task-level information for a case.
"""
from standard_script_setup import *

from CIME.task_maker import TaskMaker
from CIME.case import Case

import argparse, doctest

###############################################################################
def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n%s [--task-geom|-thread-geom|--sum-pes|--sum-tasks|--max-threads|--aprun|--pbsrs (wes|san|ivy|has) [--verbose]
OR
%s --help
OR
%s --test

\033[1mEXAMPLES:\033[0m
    \033[1;32m#  \033[0m
    > %s -taskgeom
""" % ((os.path.basename(args[0]), ) * 4),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("caseroot", nargs="?", default=os.getcwd(),
                        help="Case directory to analyze")

    parser.add_argument("--sum-pes", action="store_true",
                        help="report total number of pes: (mpi tasks)x(threads)")

    parser.add_argument("--sum-tasks", action="store_true",
                        help="report total number of mpi tasks")

    parser.add_argument("--max-threads", action="store_true",
                        help="report max threads over all mpi tasks")

    parser.add_argument("--task-geom", action="store_true",
                        help="report task geometry string for IBM")

    parser.add_argument("--thread-geom", action="store_true",
                        help="report thread geometry string for IBM")

    parser.add_argument("--aprun", action="store_true",
                        help="report aprun options for Cray XT")

    parser.add_argument("--pbsrs", action="store", choices=(None, "wes", "san", "ivy", "has"),
                        help="report PBS resources option for the given NAS node type name")

    parser.add_argument("--all", action="store_true",
                        help="report everything")

    args = parser.parse_args(args[1:])

    CIME.utils.handle_standard_logging_options(args)

    return args.caseroot, args.sum_pes, args.sum_tasks, args.max_threads, args.task_geom, args.thread_geom, args.aprun, args.pbsrs, args.all

###############################################################################
def _main_func(description):
###############################################################################
    if ("--test" in sys.argv):
        test_results = doctest.testmod(verbose=True)
        sys.exit(1 if test_results.failed > 0 else 0)

    caseroot, sum_pes, sum_tasks, max_threads, task_geom, thread_geom, aprun, pbsrs, all_ = \
        parse_command_line(sys.argv, description)

    with Case(caseroot) as case:
        tm = TaskMaker(case)

        if sum_pes:
            print tm.fullsum
        if sum_tasks:
            print tm.totaltasks
        if max_threads:
            print tm.maxthreads
        if task_geom:
            print tm.taskgeometry
        if thread_geom:
            print tm.threadgeometry
        if aprun:
            print tm.aprun
        if pbsrs is not None:
            print tm.pbsrs.replace("$MODEL", pbsrs)

        if all_:
            print "# ----------------------------------------"
            print "# PE LAYOUT:"
            print "#   total number of tasks  =", tm.totaltasks
            print "#   maximum threads per task =", tm.maxthreads

            for model, ntasks, nthrds, rootpe, ninst in zip(tm.COMP, tm.NTASKS, tm.NTHRDS, tm.ROOTPE, tm.NINST):
                print "#  ", model, "ntasks=%s" % ntasks, "nthrds=%s" % nthrds, "rootpe=%s" % rootpe, "ninst=%s" % ninst

            print "#"
            print "#  total number of hw pes =", tm.fullsum

            for model, ntasks, nthrds, rootpe, pstrid in zip(tm.COMP, tm.NTASKS, tm.NTHRDS, tm.ROOTPE, tm.PSTRID):
                tt = rootpe + (ntasks - 1) * pstrid
                tm_ = tm.sum_threads[tt] + nthrds - 1
                print "#  ", model, "hw pe range ~ from", tm.sum_threads[rootpe], "to", tm_

            if tm.min_threads < 1:
                logging.warning("#  There appear to be some IDLE hw pes")
                logging.warning("#  Please consider reviewing your env_mach_pes.xml file")


###############################################################################

if (__name__ == "__main__"):
    _main_func(__doc__)

